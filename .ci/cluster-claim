#!/usr/bin/env bash

# Copyright 2018-2021 Datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

source ${DIR}/../build-aux/helpers.sh

push_metrics() {
    exit_code="$?"
    time=`date +%s`
    build_label=
    if [[ -n "${CIRCLE_BUILD_NUM}" ]] ; then
        build_label=",build_id=${CIRCLE_BUILD_NUM}"
    fi
    # could theoretically stick more data in here, like export the error step or something
    # but for now just going for the least intrusive change
    # with the build id we'll be able to link to build from metrics
    metric="apro_ci.kubeception_exit_code${build_label} value=$exit_code ${time}"
    influx_host="https://sw.bakerstreet.io/influxdb"
    # don't fail build if there's any weirdness here
    curl -i -XPOST --oauth2-bearer ${KUBECEPTION_TOKEN} "${influx_host}/write?db=db0&precision=s" --data-binary "${metric}" | cat
}

set -o errexit
set -o nounset
set -o xtrace

if [ -n "${USE_LOCAL_K3S_CLUSTER:-}" ] ; then
    mkdir -p ~/.kube
    export DEV_KUBECONFIG=~/.kube/kubeception.yaml
    touch ${DEV_KUBECONFIG}
    if [ -z "${K3S_CLUSTER_NAME:-}" ] ; then
        K3S_CLUSTER_NAME=amb-ci
    fi
    KUBECONFIG=${DEV_KUBECONFIG} k3d cluster create ${K3S_CLUSTER_NAME} --k3s-server-arg "--no-deploy=traefik" --k3s-server-arg "--kubelet-arg=max-pods=255"
    exit 0
fi

if [ -n "${KUBECEPTION_TOKEN:-}" ]; then

    trap push_metrics EXIT
    mkdir -p ~/.kube
    export DEV_KUBECONFIG=~/.kube/kubeception.yaml
    tries=0
    while true ; do
        # get a kluster with a 1-hour timeout (by default) that is size "large" (by default)
        get_cluster ${DEV_KUBECONFIG} ${KUBECEPTION_TIMEOUT:-3600} ${KUBECEPTION_PROFILE:-large} ${KUBECEPTION_VERSION:-1.19}
        ret=$?
        if [ "$ret" == "0" ] ; then
            wait_for_kubeconfig ${DEV_KUBECONFIG}
            ret=$?
            if [ "$ret" == "0" ] ; then
                exit
            fi
        fi
        if [ "${tries}" == 3 ] ; then
            echo 'Could not aquire kluster'
            exit $ret
        fi
        tries=$((tries+1))
    done
fi

echo "Kubernaut is no longer supported; halting run"
exit 1
