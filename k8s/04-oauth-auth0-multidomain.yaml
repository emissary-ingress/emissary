# @TEMPLATE@

{{ $AmbassadorOrigin1 := "https://ambassador.ambassador.svc.cluster.local" }}
{{ $AmbassadorOrigin2 := "https://foo.ambassador.svc.cluster.local" }}
# These come directly from https://manage.auth0.com/#/applications/DOzF9q7U2OrvB7QniW9ikczS1onJgyiC/settings
# The administrator credentials to see that page are at
#    $(keybase config get -b mountdir)/team/datawireio/secrets/auth0.auth0.apro-testing.*
{{ $Auth0_Domain := "ambassador-oauth-e2e.auth0.com" }}
{{ $Auth0_Client_ID := "DOzF9q7U2OrvB7QniW9ikczS1onJgyiC" }}
{{ $Auth0_Client_Secret := "MkpnAmzX-EEzV708qD_giNd9CF_R-owNau94QZVgOfna9FYf-SdTvATuNkrEDBk-" }}
# Make sure that:
#  - "{{$AmbassadorOrigin1}}/.ambassador/oauth2/redirection-endpoint" is in the "Allowed Callback URLs" textbox
#  - "{{$AmbassadorOrigin1}}" is in the "Allowed Web Origins" textbox
#  - A test user account is set up (and configured in ./tests/cluster/go-test/filter-oauth2/testdata/idp_auth0.js)
#  - (Note that you get to ignore $AmbassadorOrigin2 here.)
#
# Borrowing the Autho0 simplejwt case...
#  1. Set the (non-standard) "audience" Authorization Parameter, so
#     that the Access Token is a JWT, and we can test JWT validation.
---
apiVersion: getambassador.io/v2
kind: Filter
metadata:
  name: oauth2-auth0-multijwt
spec:
  OAuth2:
    authorizationURL: https://{{ $Auth0_Domain }}
    clientID: {{ $Auth0_Client_ID }}
    secret: {{ $Auth0_Client_Secret }}
    maxStale: 12h
    extraAuthorizationParameters:
      audience: "urn:datawire:ambassador:testapi"
    accessTokenValidation: jwt
    protectedOrigins:
      - origin: {{ $AmbassadorOrigin1 }}
      - origin: {{ $AmbassadorOrigin2 }}
        includeSubdomains: true
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: oauth2-auth0-multijwt
spec:
  prefix: /oauth2-auth0-multijwt/
  rewrite: /
  service: httpbin.default.svc.cluster.local
  host_rewrite: httpbin.org
  timeout_ms: 5000
---
apiVersion: getambassador.io/v2
kind: FilterPolicy
metadata:
  name: oauth2-auth0-multijwt
spec:
  rules:
    - host: "*"
      path: /oauth2-auth0-multijwt/**
      filters:
        - name: oauth2-auth0-multijwt

# We need to make sure that we have a service for $AmbassadorOrigin2
---
  apiVersion: v1
  kind: Service
  metadata:
    name: foo
    namespace: ambassador
    labels:
      product: aes
      app.kubernetes.io/component: foo-service
  spec:
    type: LoadBalancer
    ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
    selector:
      service: ambassador
  