KUBECONFIG = $(DEV_KUBECONFIG)
export KUBECONFIG

#docker.tag.dev = $(DEV_REGISTRY)/e2e-test:$(shell tr : - < $<)
docker.tag.dev = $(DEV_REGISTRY)/kubeapply:$(shell tr : - < $<)
include build-aux/teleproxy.mk
include build-aux/docker.mk
include build-aux/common.mk
.NOTPARALLEL:
.DEFAULT_GOAL = check

# "Release"-ish images
images += consul_connect_integration
# Purely testing images
images += model-cluster-app
images += model-cluster-grpc-auth
images += model-cluster-http-auth
images += model-cluster-logout
images += model-cluster-openapi-service
images += model-cluster-uaa

# Run the e2e tests

GOTEST2TAP       ?= $(build-aux.bindir)/gotest2tap
$(eval $(call build-aux.bin-go.rule, gotest2tap     , github.com/datawire/build-aux/bin-go/gotest2tap      ))

venv/bin/activate: %/bin/activate:
	mkdir -p $*
	echo module venv > $*/go.mod
	virtualenv --python=python3 $*
venv/bin/consul-kube: %/bin/consul-kube: | %/bin/activate
	$*/bin/pip install git+https://github.com/tradel/consul-kube

images: $(foreach i,$(images) aes-example-plugins, docker/$i.docker.tag.dev )
push:   $(foreach i,$(images) aes-example-plugins, docker/$i.docker.push.dev )
.PHONY: images push

# UAA's ~3m bootup time is the main motivator for the big --timeout
deploy: $(foreach i,$(images) aes-example-plugins, docker/$i.docker.push.dev )
	@PS4=; set -ex; { \
	  set -a && . ./k8s-env.sh; \
	  go run github.com/datawire/ambassador/cmd/edgectl license "$$AMBASSADOR_LICENSE_KEY"; \
	  kubectl --namespace=ambassador set image deployment/ambassador aes="$$AES_EXAMPLE_PLUGINS_IMAGE"; \
	  go run github.com/datawire/ambassador/cmd/kubeapply --timeout=6m --filename=k8s; \
	}
apply: | $(foreach i,$(images) aes-example-plugins, docker/$i.docker.push.dev )
	@PS4=; set -ex; { \
	  set -a && . ./k8s-env.sh; \
	  go run github.com/datawire/ambassador/cmd/edgectl license "$$AMBASSADOR_LICENSE_KEY"; \
	  kubectl --namespace=ambassador set image deployment/ambassador aes="$$AES_EXAMPLE_PLUGINS_IMAGE"; \
	  go run github.com/datawire/ambassador/cmd/kubeapply --timeout=6m --filename=k8s; \
	}
.PHONY: deploy apply

tests.src += $(wildcard tests/*/*.test)
tests.src += $(wildcard tests/*/*.tap.gen)

tests.tap += $(patsubst %.test,%.tap,$(filter %.test,$(tests.src)))
tests.tap += $(patsubst %.tap.gen,%.tap,$(filter %.tap.gen,$(tests.src)))

tests.run += $(patsubst %.test,%.log,$(filter %.test,$(tests.src)))
tests.run += $(patsubst %.tap.gen,%.tap,$(filter %.tap.gen,$(tests.src)))

$(tests.run): deploy proxy venv/bin/consul-kube bin_$(GOHOSTOS)_$(GOHOSTARCH)/apictl $(GOTEST2TAP)
test-suite.tap: $(tests.tap)

# Docker build

docker/aes-example-plugins.docker.stamp: FORCE
	$(MAKE) -C aes-example-plugins AES_IMAGE=$$(docker images -q aes:latest) DOCKER_IMAGE=aes-example-plugins
	docker image inspect aes-example-plugins --format='{{.Id}}' > $@

# "Release"-ish binaries
bins += github.com/datawire/apro/cmd/consul_connect_integration
# Purely testing binaries
bins += github.com/datawire/apro/cmd/model-cluster-app
bins += github.com/datawire/apro/cmd/model-cluster-grpc-auth
bins += github.com/datawire/apro/cmd/model-cluster-http-auth
bins += github.com/datawire/apro/cmd/model-cluster-logout
# Supplementary binaries 
bins += github.com/datawire/apro/cmd/apictl
bins += github.com/datawire/ambassador/cmd/ambex

define bin.rule
  bin_%/$(notdir $(bin)): FORCE
	go build -o $$@ $(bin)
endef
$(foreach bin,$(bins),$(eval $(bin.rule)))

bin_linux_amd64/kubectl:
	curl -o $@ --fail 'https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl'
	chmod 755 $@

%.docker.stamp: %/Dockerfile
	docker build --iidfile=$@ $*
%.docker: %.docker.stamp $(COPY_IFCHANGED)
	$(COPY_IFCHANGED) $< $@

uaa_cache_tag = quay.io/datawire/ambassador_pro-buildcache:model-cluster-uaa-$(firstword $(shell sha1sum $*/Dockerfile))
docker/model-cluster-uaa.docker.stamp: %.docker.stamp: %/Dockerfile
	@PS4=; set -ex; { \
	    if docker run --rm --entrypoint=true $(uaa_cache_tag); then \
	        docker image inspect $(uaa_cache_tag) --format='{{.Id}}' > $@; \
	    else \
	        docker build --iidfile=$@ $*; \
	    fi; \
	}

define docker.rule
  # Trigger rebuilds
  docker/$(image).docker.stamp: $(shell find docker/$(image)/)

  # Include binaries
  ifneq ($(filter $(image),$(notdir $(bins))),)
    docker/$(image).docker.stamp: docker/$(image)/$(image)
  endif
  docker/$(image)/%: bin_linux_amd64/%
	cp $$< $$@
  docker/$(image)/clean:
	rm -f docker/$(image)/$(image)
  .PHONY: docker/$(image)/clean
  clean: docker/$(image)/clean
endef
$(foreach image,$(images),$(eval $(docker.rule)))

docker/consul_connect_integration.docker.stamp: docker/consul_connect_integration/kubectl

clean: $(foreach i,$(images), docker/$i/clean )
	rm -f docker/consul_connect_integration/kubectl
	rm -rf bin_linux_amd64
