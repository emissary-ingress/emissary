#!/usr/bin/env python3
"""Updates version.yml and CHANGELOG.md for next version, then
launch the `git citool` GUI to create a commit of it.
"""

import datetime
import fileinput
import os.path
import re
import sys
from contextlib import contextmanager
from typing import Generator

from lib import base_version, build_version, git_add, git_check_clean, re_ga
from lib.uiutil import Checker, CheckResult, run
from lib.uiutil import run_txtcapture as run_capture


def main(next_ver: str, today: datetime.date, quiet: bool=False, commit: bool = True) -> int:
    """This edits several files (the Git directory "tree"), then launches
    the `git citool` GUI to commit them.  This _should_ be an utterly
    trivial and readable list of
        for line in fileinput.FileInput("FILENAME", inplace=True):
            # edit 'line' as appropriate
            sys.stdout.write(line)
        git_add("FILENAME")
    blocks.  However, the block to edit the CHANGELOG.md file is unfortunately a
    touch more complex, because it has to deal with parsing the file in to
    sections and buffering the sections... maybe line-oriented processing wasn't
    the best choice for that file.
    """

    if not quiet:
        print()
        print(f'Doing basic updates for v{next_ver}...')
        print()

    # This context manager and check function are pretty much just to produce
    # a nice list of steps...

    checker = Checker()

    @contextmanager
    def check(name: str) -> Generator[CheckResult, None, None]:
        with checker.check(name) as subcheck:
            # time.sleep(1)  # it's stupid, but honestly the delay makes the output more readable
            yield subcheck

    # docs/yaml/versions.yml
    with check(f"Updating docs/yaml/versions.yml with {next_ver}..."):
        for line in fileinput.FileInput("docs/yaml/versions.yml", inplace=True):
            if line.startswith("version:"):
                line = f"version: {next_ver}\n"
            sys.stdout.write(line)
        git_add("docs/yaml/versions.yml")

    changelog_ver_pattern = re.compile(r"^## \[([0-9]+\.[0-9]+\.[0-9]+(?:-rc\.[0-9]+)?)\] \S+ [0-9]+, [0-9]{4}$")
    with check(f"Updating CHANGELOG.md with {next_ver}..."):
        in_notes = False
        buf = ""
        for line in fileinput.FileInput("CHANGELOG.md", inplace=True):
            if not in_notes:
                sys.stdout.write(line)
                if line.startswith("## RELEASE NOTES"):
                    in_notes = True
                continue

            match = changelog_ver_pattern.match(line)
            if not match:
                buf += line
            elif line.startswith(f"## [{next_ver}]"):
                # Don't do anything, this changelog already has an entry for the next version
                sys.stdout.write(buf)
                sys.stdout.write(line)
                in_notes = False
            else:
                prev_ver = match[1]
                # dope let's get the last version first
                # this is the beginning of the last version line
                sys.stdout.write("\n")
                sys.stdout.write(f"## [{next_ver}] (TBD)\n")
                sys.stdout.write(
                        f"[{next_ver}]: https://github.com/datawire/ambassador/compare/v{prev_ver}...v{next_ver}\n")
                sys.stdout.write("\n")
                sys.stdout.write("### Emissary Ingress and Ambassador Edge Stack\n")
                sys.stdout.write("\n")
                sys.stdout.write("(no changes yet)\n")
                sys.stdout.write(buf)
                sys.stdout.write(line)
                in_notes = False

        git_add("CHANGELOG.md")

    if checker.ok and commit:
        with check(f"Committing changes..."):
            gitdir = run_capture(['git', 'rev-parse', '--git-dir'])
            with open(os.path.join(gitdir, 'GITGUI_MSG'), 'w') as msgfile:
                msgfile.write(f"Update for v{next_ver}\n")
            run(['git', 'citool'])

    if checker.ok:
        return 0
    else:
        return 1


if __name__ == '__main__':
    args = sys.argv[1:]

    quiet = False
    commit = True

    while args and args[0].startswith("--"):
        if args[0] == '--quiet':
            quiet = True
            args.pop(0)
        elif args and (args[0] == '--no-commit'):
            commit = False
            args.pop(0)

    if len(args) != 1 or not re_ga.match(args[0]):
        sys.stderr.write(f"Usage: {os.path.basename(sys.argv[0])} X.Y.Z\n")
        sys.exit(2)

    sys.exit(main(
        next_ver=args[0],
        today=datetime.date.today(),
        quiet=quiet,
        commit=commit,
    ))
