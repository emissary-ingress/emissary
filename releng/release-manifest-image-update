#!/usr/bin/env python3
"""Update the directory "tree" for cutting an RC release.  This will
change the appropriate files, then launch the `git citool` GUI to
create a commit of it.
"""

import datetime
import fileinput
import os.path
import re
import sys
from contextlib import contextmanager
from typing import Generator
from shutil import which

from lib import base_version, build_version, git_add, git_check_clean, re_ga, vX, vY
from lib.uiutil import Checker, CheckResult, run
from lib.uiutil import run_txtcapture as run_capture


def main(next_ver: str, today: datetime.date, quiet: bool=False, commit: bool = True) -> int:
    """This edits several files (the Git directory "tree"), then launches
    the `git citool` GUI to commit them.  This _should_ be an utterly
    trivial and readable list of
        for line in fileinput.FileInput("FILENAME", inplace=True):
            # edit 'line' as appropriate
            sys.stdout.write(line)
        git_add("FILENAME")
    blocks.  However, the block to edit the CHANGELOG.md file is unfortunately a
    touch more complex, because it has to deal with parsing the file in to
    sections and buffering the sections... maybe line-oriented processing wasn't
    the best choice for that file.
    """

    if not quiet:
        print()
        print(f'Doing basic updates for v{next_ver}...')
        print()

    if which("gh") is None:
        print("gh tool is not installed.")
        print("Please install the tool and rerun this script:")
        print("https://github.com/cli/cli#installation")
        return 1
    checker = Checker()

    @contextmanager
    def check(name: str) -> Generator[CheckResult, None, None]:
        with checker.check(name) as subcheck:
            # time.sleep(1)  # it's stupid, but honestly the delay makes the output more readable
            yield subcheck
    run(["gh", "auth", "login"])

    run(["git", "fetch", "--tags"])
    run(["git", "checkout", f"v{next_ver}", "-b", f"rel/v{next_ver}/chart-img-updates"])
    warning = """
 ==> Warning: FIXME: This script does not have the property that if
     something goes wrong, you can just restart it; put another way:
     it does not have the property that each step is idempotent.
     If something does go wrong, then you'll have to address it, then
     resume where the script left off by going through the checklist
     manually (or by commenting out the already-completed steps).
"""
    print(f"{ansiterm.sgr.fg_red}{warning}{ansiterm.sgr}")

    print('TODO: CHECK THAT IMAGE EXISTS')
    # update the repo too?
    run(["make", f"IMAGE_TAG={next_ver}", "release/chart/update-images"])
    run(["make", "update-yaml"])
    git_add("manifests")
    git_add("docs/yaml")
    if checker.ok and commit:
        with check(f"Committing changes..."):
            gitdir = run_capture(['git', 'rev-parse', '--git-dir'])
            with open(os.path.join(gitdir, 'GITGUI_MSG'), 'w') as msgfile:
                msgfile.write(f"Updating and manifest images for v{next_ver}\n")
            run(['git', 'citool'])
        m = re_ga.match(next_ver)
        assert m
        release_branch = f"release/v{vX}.{m[vY]}"
        # TODO: dont hardcode owners
        run(["gh", "pr", "create",
                "--base", release_branch,
                "--title", f"Chart and manifest image updates {next_ver}",
                "--description", f"Update charts and manifests to use the newly release images for {next_ver}",
                "--reviewer", "kflynn,rhs,esmet,acookin"])
    run(["make", "release/chart/tag"])
    if checker.ok:
        return 0
    else:
        return 1


if __name__ == '__main__':
    args = sys.argv[1:]

    quiet = False
    commit = True

    while args and args[0].startswith("--"):
        if args[0] == '--quiet':
            quiet = True
            args.pop(0)
        elif args and (args[0] == '--no-commit'):
            commit = False
            args.pop(0)

    if len(args) != 1 or not re_ga.match(args[0]):
        sys.stderr.write(f"Usage: {os.path.basename(sys.argv[0])} X.Y.Z\n")
        sys.exit(2)

    sys.exit(main(
        next_ver=args[0],
        today=datetime.date.today(),
        quiet=quiet,
        commit=commit,
    ))
