#!/usr/bin/env python3
"""Updates all the manifests and helm charts to use a newer ambassador version.
This must be run with an already pushed GA tag `vX.Y.Z`.
"""

import datetime
import fileinput
import os.path
import re
import sys
from contextlib import contextmanager
from typing import Generator
from shutil import which

from lib import base_version, build_version, git_add, git_check_clean, re_ga, vX, vY, ansiterm
from lib.uiutil import Checker, CheckResult, run
from lib.uiutil import run_txtcapture as run_capture


def main(next_ver: str, today: datetime.date, quiet: bool=False, commit: bool = True) -> int:
    if which("gh") is None:
        print("gh tool is not installed.")
        print("Please install the tool and rerun this script:")
        print("https://github.com/cli/cli#installation")
        return 1
    checker = Checker()

    @contextmanager
    def check(name: str) -> Generator[CheckResult, None, None]:
        with checker.check(name) as subcheck:
            # time.sleep(1)  # it's stupid, but honestly the delay makes the output more readable
            yield subcheck
    run(["gh", "auth", "login"])

    warning = """
 ==> Warning: FIXME: This script does not have the property that if
     something goes wrong, you can just restart it; put another way:
     it does not have the property that each step is idempotent.
     If something does go wrong, then you'll have to address it, then
     resume where the script left off by going through the checklist
     manually (or by commenting out the already-completed steps).
"""
    print(f"{ansiterm.sgr.fg_red}{warning}{ansiterm.sgr}")

    workbranch = f"rel/v{next_ver}/chart-img-updates"
    with check(f"Creating new branch {workbranch} off of tag v{next_ver}"):
        run(["git", "fetch", "--tags"])
        run(["git", "checkout", f"v{next_ver}", "-b", workbranch])

    print('TODO: CHECK THAT IMAGE EXISTS')
    with check(f"Updating image tag in charts"):
        run(["make", f"IMAGE_TAG={next_ver}", "release/chart/update-images"])
        git_add("charts/ambassador")
        git_add("charts/emissary-ingress")
    with check(f"Updating manifest yaml"):
        run(["make", "update-yaml"])
        git_add("manifests")
        git_add("docs/yaml")
    if checker.ok and commit:
        with check(f"Committing changes..."):
            gitdir = run_capture(['git', 'rev-parse', '--git-dir'])
            with open(os.path.join(gitdir, 'GITGUI_MSG'), 'w') as msgfile:
                msgfile.write(f"Updating and manifest images for v{next_ver}\n")
            run(['git', 'citool'])
        with check(f"Creating pull request for chart and manifest changes"):
            m = re_ga.match(next_ver)
            assert m
            release_branch = f"release/v{m[vX]}.{m[vY]}"
            # TODO: dont hardcode owners
            run(["gh", "pr", "create",
                    "--base", release_branch,
                    "--title", f"Chart and manifest image updates {next_ver}",
                    "--body", f"Update charts and manifests to use the newly release images for {next_ver}",
                    "--reviewer", "kflynn,rhs,esmet,acookin"])
        with check(f"Creating chart tag"):
            run(["make", "release/chart/tag"])
    if checker.ok:
        return 0
    else:
        return 1


if __name__ == '__main__':
    args = sys.argv[1:]

    quiet = False
    commit = True

    while args and args[0].startswith("--"):
        if args[0] == '--quiet':
            quiet = True
            args.pop(0)
        elif args and (args[0] == '--no-commit'):
            commit = False
            args.pop(0)

    if len(args) != 1 or not re_ga.match(args[0]):
        sys.stderr.write(f"Usage: {os.path.basename(sys.argv[0])} X.Y.Z\n")
        sys.exit(2)

    sys.exit(main(
        next_ver=args[0],
        today=datetime.date.today(),
        quiet=quiet,
        commit=commit,
    ))
