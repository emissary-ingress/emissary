#!/usr/bin/env python3
"""Update the directory "tree" for cutting an RC release.  This will
change the appropriate files, then launch the `git citool` GUI to
create a commit of it.

"""

import datetime
import fileinput
import os.path
import re
import sys
from contextlib import contextmanager
from typing import Generator

from lib import base_version, build_version, git_add, git_check_clean, re_rc, vX, vY, vZ
from lib.uiutil import Checker, CheckResult, run
from lib.uiutil import run_txtcapture as run_capture


def main(next_ver: str, commit: bool = True) -> int:
    """
    This edits the chart files for the given RC, then optionally launches
    the `git citool` GUI to commit them.  This _should_ be an utterly
    trivial and readable list of

        for line in fileinput.FileInput("FILENAME", inplace=True):
            # edit 'line' as appropriate
            sys.stdout.write(line)
        git_add("FILENAME")

    blocks.  However, the block to edit the CHANGELOG.md file is unfortunately a
    touch more complex, because it has to deal with parsing the file in to
    sections and buffering the sections... maybe line-oriented processing wasn't
    the best choice for that file.
    """

    # Make sure the passed-in version is OK...
    m = re_rc.match(next_ver)
    assert m

    print()
    print(f'Doing chart updates for v{next_ver}...')
    print()

    # This context manager and check function are pretty much just to produce
    # a nice list of steps...

    checker = Checker()

    @contextmanager
    def check(name: str) -> Generator[CheckResult, None, None]:
        with checker.check(name) as subcheck:
            # time.sleep(1)  # it's stupid, but honestly the delay makes the output more readable
            yield subcheck

    # Chart.yaml

    with check("Updating Chart.yaml version, appVersion, and ossVersion..."):
        chart_version = ''
        for line in fileinput.FileInput("charts/ambassador/Chart.yaml", inplace=True):
            if line.startswith("version:"):
                ver_regex = r'version:\s*(\d+)\.(\d+)\.(\d+)'
                res = re.match(ver_regex, line)
                if not res:
                    raise Exception(f'Chart version is not sane -- {line}')
                major = int(res.group(1))
                minor = int(res.group(2))
                patch = int(res.group(3))

                if m[vZ] == "0":
                    # bump minor
                    minor = minor + 1
                else:
                    #bump revision
                    patch = patch + 1
                chart_version = f'{major}.{minor}.{patch}'
                line = f'version: {chart_version}\n'

            if line.startswith("appVersion:"):
                line = f"appVersion: {next_ver}\n"

            if line.startswith("ossVersion:"):
                line = f"ossVersion: {next_ver}\n"

            sys.stdout.write(line)

        git_add("charts/ambassador/Chart.yaml")

    with check("Updating values.yaml image tag..."):
        is_next_tag = False
        for line in fileinput.FileInput("charts/ambassador/values.yaml", inplace=True):
            if line.startswith('image:'):
                is_next_tag = True

            if is_next_tag:
                match = re.match(r'(\s+)tag:', line)

                if match:
                    line = f"{match.group(1)}tag: {next_ver}\n"
                    is_next_tag = False

            sys.stdout.write(line)

        git_add("charts/ambassador/values.yaml")

    with check("Updating chart CHANGELOG.md..."):
        for line in fileinput.FileInput("charts/ambassador/CHANGELOG.md", inplace=True):
            if line.startswith('## Next Release'):
                chart_changelog = f'- Update Ambassador chart image to version {next_ver}: [CHANGELOG](https://github.com/datawire/ambassador/blob/master/CHANGELOG.md)'
                line = f'{line}\n(no changes yet)\n\n## v{chart_version}\n\n{chart_changelog}'

            if line.startswith('(no changes yet)'):
                line = '\n'

            sys.stdout.write(line)

        git_add("charts/ambassador/CHANGELOG.md")

    with check("Updating chart README.md image tag..."):
        for line in fileinput.FileInput("charts/ambassador/README.md", inplace=True):
            line_regex = r'^\|\s*`image.tag`\s+\|.*\|\s+`\d+\.\d+\.\d+`\s*\|$'

            if re.match(line_regex, line):
                replace = f"`{next_ver}`"
                line = re.sub(r'`\d+\.\d+\.\d+`', replace, line)

            sys.stdout.write(line)

        git_add("charts/ambassador/README.md")

    with check(f"Verifying that tree is clean..."):
        git_check_clean(allow_staged=True)

    if commit:
        if checker.ok:
            with check(f"Committing changes..."):
                gitdir = run_capture(['git', 'rev-parse', '--git-dir'])
                with open(os.path.join(gitdir, 'GITGUI_MSG'), 'w') as msgfile:
                    msgfile.write(f"Update for v{next_ver}\n")
                run(['git', 'citool'])

    if checker.ok:
        return 0
    else:
        return 1


if __name__ == '__main__':
    args = sys.argv[1:]
    commit = True

    if args and (args[0] == '--no-commit'):
        commit = False
        args.pop(0)

    if len(args) != 1 or not re_rc.match(args[0]):
        sys.stderr.write(f"Usage: {os.path.basename(sys.argv[0])} X.Y.Z-rc.N\n")
        sys.exit(2)

    sys.exit(main(next_ver=args[0], commit=commit))
