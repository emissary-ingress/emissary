#!/usr/bin/env python3
"""Waits for GA manifests and chart to exist
"""

import argparse
import http.client
import sys
import time
import subprocess
import fileinput

from lib import ansiterm


def check_docker(image: str) -> bool:
    p = subprocess.run(["docker", "pull", image], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return p.returncode == 0


def main(ga_tag: str, helm_s3_key: str) -> int:
    print(f"{ansiterm.sgr.bold.fg_cyn}==> Waiting for GA artifacts for {ga_tag}")
    print(f"    Check Circle CI if you would like to check progress:")
    print(f"        https://app.circleci.com/pipelines/github/emissary-ingress/emissary")
    print(f"    The 'OSS: Release Manifests'  and 'OSS: Release Chart' workflows for tag {ga_tag} should create these artifacts.{ansiterm.sgr.reset}")

    chart_version = ""
    for line in fileinput.FileInput("charts/ambassador/Chart.yaml"):
        if line.startswith("version:"):
            chart_version = line.replace("version:", "").strip()
    print(f"    {ansiterm.sgr.bold.fg_cyn}==> Starting wait for helm chart {chart_version}.{ansiterm.sgr}")
    s3_url = f"datawire-static-files.s3.amazonaws.com"

    helm_chart_s3_path = f"/{helm_s3_key}/ambassador-{chart_version}.tgz"
    helm_found = False
    while not helm_found:
        conn = http.client.HTTPSConnection(s3_url)
        conn.request("GET", helm_chart_s3_path)
        r1 = conn.getresponse()
        if r1.status == 200:
            print(f"        {ansiterm.sgr.bold.fg_grn}Helm chart for {chart_version} found in S3!{ansiterm.sgr}")
            helm_found = True
        else:
            print(f"        {ansiterm.sgr.fg_red}Helm chart {chart_version} still not found, sleeping before trying again.{ansiterm.sgr}")
            time.sleep(10)

    print(f"    {ansiterm.sgr.bold.fg_cyn}==> Starting wait for yaml manifests.{ansiterm.sgr}")
    manifests_found = False
    while not manifests_found:
        conn = http.client.HTTPSConnection(s3_url)
        conn.request("GET", f"/yaml/ambassador-docs/{ga_tag}/ambassador/ambassador-rbac.yaml")
        r1 = conn.getresponse()
        if r1.status == 200:
            print(f"        {ansiterm.sgr.bold.fg_grn}Yaml manifests for {ga_tag} found in S3!{ansiterm.sgr}")
            manifests_found = True
        else:
            print(f"        {ansiterm.sgr.fg_red}Yaml manifests still not found for {ga_tag}, sleeping before trying again.{ansiterm.sgr}")
            time.sleep(10)
    print(f"{ansiterm.sgr.bold.fg_grn}==> All artifacts found for {ga_tag}!{ansiterm.sgr}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Wait for commit to show up in s3')
    parser.add_argument('--ga-tag', required=True)
    parser.add_argument('--helm-s3-key', default="ambassador")
    args = parser.parse_args()

    sys.exit(main(
        ga_tag=args.ga_tag,
        helm_s3_key=args.helm_s3_key,
    ))
