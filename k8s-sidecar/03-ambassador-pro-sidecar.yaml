# @TEMPLATE@
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  # name must match the spec fields below, and be in the form: <plural>.<group>
  # XXX: what is group name supposed to mean???
  name: ratelimits.getambassador.io
spec:
  # group name to use for REST API: /apis/<group>/<version>
  group: getambassador.io
  # list of versions supported by this CustomResourceDefinition
  version: v1beta1
  versions:
    - name: v1beta1
      # Each version can be enabled/disabled by Served flag.
      served: true
      # One and only one version must be marked as the storage version.
      storage: true
  # either Namespaced or Cluster
  scope: Namespaced
  names:
    # plural name to be used in the URL: /apis/<group>/<version>/<plural>
    plural: ratelimits
    # singular name to be used as an alias on the CLI and for display
    singular: ratelimit
    # kind is normally the CamelCased singular type. Your resource manifests use this.
    kind: RateLimit
    # shortNames allow shorter string to match your resource on the CLI
    shortNames:
    - rl
---
apiVersion: v1
kind: Service
metadata:
  name: ratelimit-redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: ratelimit-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ratelimit-redis
  template:
    metadata:
      labels:
        app: ratelimit-redis
    spec:
      containers:
      - name: redis
        image: redis:5.0.1
      restartPolicy: Always


######################################################################
# Create the ClusterRole+ClusterRoleBinding+ServiceAccount for
# ambassador
#
# NB: ClusterRoles and ClusterRoleBindings are not namespaced
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-sidecar
rules:
- apiGroups: [""]
  resources:
  - services
  verbs: ["get", "list", "watch"]
- apiGroups: ["getambassador.io"]
  resources:
  - ratelimits
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["create", "update", "patch", "get", "list", "watch"]
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador-sidecar
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-sidecar
subjects:
- kind: ServiceAccount
  name: ambassador
  namespace: default


######################################################################
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v0
      kind: RateLimitService
      name: ratelimit
      service: "127.0.0.1:8081"
      ---
      apiVersion: ambassador/v0
      kind: Mapping
      name: rl-test
      prefix: /rl/
      service: httpbin.org
      rate_limits:
        - descriptor: rldesc
  name: ratelimit
spec:
  type: ClusterIP
  ports:
  - name: ratelimit-grpc
    port: 81
    targetPort: 8081
  - name: ratelimit-debug
    port: 80
    targetPort: 6070
  selector:
    service: ambassador


######################################################################
# Create the ambassador Service+Service+Deployment
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-admin
spec:
  type: NodePort
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: 8877
  selector:
    service: ambassador
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
spec:
  type: NodePort # XXX: Kubernaut
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    service: ambassador
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ambassador
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        service: ambassador
    spec:
      serviceAccountName: ambassador
      containers:
      - name: ambassador
        image: quay.io/datawire/ambassador:0.50.0-rc3
        env:
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      - name: ratelimit
        image: {{env "RATELIMIT_IMAGE"}}
        env:
        - name: REDIS_SOCKET_TYPE
          value: tcp
        - name: REDIS_URL
          value: ratelimit-redis:6379
        - name: AMBASSADOR_LICENSE_KEY
          value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRldiIsImV4cCI6NDcwMDgyNjEzM30.wCxi5ICR6C5iEz6WkKpurNItK3zER12VNhM8F1zGkA8
      restartPolicy: Always


######################################################################
# Does this *need* to be a standalone service, or could it be a
# sidecar?  IDK.  --lukeshu
---
apiVersion: v1
kind: Service
metadata:
  name: telepresence-proxy
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: telepresence-proxy
  ports:
  - name: sshd
    protocol: TCP
    port: 8022
  - name: api
    protocol: TCP
    port: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telepresence-proxy
  labels:
    app: telepresence-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telepresence-proxy
  template:
    metadata:
      labels:
        app: telepresence-proxy
    spec:
      containers:
      - name: telepresence-proxy
        image: {{env "PROXY_IMAGE"}}
        ports:
        - name: sshd
          containerPort: 8022
