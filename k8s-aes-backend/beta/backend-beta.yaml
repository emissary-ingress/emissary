---
apiVersion: v1
kind: Service
metadata:
  name: aes-backend-beta
  namespace: metriton
spec:
  type: ClusterIP
  ports:
  - name: http-api
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: aes-backend-beta
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aes-backend-beta
  namespace: metriton
  labels:
    app: aes-backend-beta
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aes-backend-beta
  template:
    metadata:
      labels:
        app: aes-backend-beta
    spec:
      containers:
      - name: aes-backend
        image: ${AES_BACKEND_IMAGE}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
          - name: HUBSPOT_API_KEY
            valueFrom:
              secretKeyRef:
                name: hubspot-api-key
                key: hubspotKey
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: aws
                key: access-key-id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws
                key: secret-access-key
          - name: AWS_HOSTED_ZONE_ID
            valueFrom:
              secretKeyRef:
                name: aws
                key: hosted-zone-id
          - name: POSTGRES_DB
            value: metriton
          - name: POSTGRES_HOST
            value: metriton-postgresql-beta
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: metriton-database-beta
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: metriton-database-beta
        livenessProbe:
          httpGet:
            path: /signup/sys/healthz
            port: 8080
          periodSeconds: 60
        readinessProbe:
          httpGet:
            path: /signup/sys/readyz
            port: 8080
          periodSeconds: 60
---
# Secrets `hubspot-api-key` and `aws` are stored in keybase
