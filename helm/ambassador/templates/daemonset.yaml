{{- if .Values.daemonSet -}}
apiVersion: apps/v1beta2
kind: DaemonSet
metadata:
  name: {{ template "ambassador.fullname" . }}
  labels:
    app: {{ template "ambassador.name" . }}
    chart: {{ template "ambassador.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "ambassador.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: {{ template "ambassador.name" . }}
        app: {{ template "ambassador.name" . }}
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
    spec:
      serviceAccountName: {{ template "ambassador.serviceAccountName" . }}
      volumes:
      - name: stats-exporter-mapping-config
        configMap:
          name: '{{ template "ambassador.fullname" . }}-config'
          items:
          - key: exporterConfiguration
            path: mapping-config.yaml
      containers:
        - name: statsd-sink
          image: "{{ .Values.exporter.image }}"
          ports:
          - name: metrics
            containerPort: 9102
          - name: listener
            containerPort: 8125
          args: ["-statsd.listen-address=:8125", "-statsd.mapping-config=/statsd-exporter/mapping-config.yaml"]
          volumeMounts:
          - name: stats-exporter-mapping-config
            mountPath: /statsd-exporter/
            readOnly: true
        - name: ambassador
          image: "{{ .Values.image.repository }}:{{ template "ambassador.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPorts.http }}
            - name: https
              containerPort: {{ .Values.service.targetPorts.https }}
            - name: admin
              containerPort: 8877
          env:
          {{- if .Values.namespace.single }}
          - name: AMBASSADOR_SINGLE_NAMESPACE
            value: {{ .Values.namespace.single }}
          {{- end }}
          - name: AMBASSADOR_ID
            value: {{ .Values.ambassador.id | quote }}
          - name: AMBASSADOR_NAMESPACE
            {{- if .Values.namespace.name }}
            value: {{ .Values.namespace.name | quote }}
            {{ else }}
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
            {{- end -}}
          {{- if .Values.timing }}
          {{- if .Values.timing.restart }}
          - name: AMBASSADOR_RESTART_TIME
            value: {{ .Values.timing.restart | quote }}
          {{- end -}}
          {{- if .Values.timing.drain }}
          - name: AMBASSADOR_DRAIN_TIME
            value: {{ .Values.timing.drain | quote }}
          {{- end -}}
          {{- if .Values.timing.shutdown }}
          - name: AMBASSADOR_SHUTDOWN_TIME
            value: {{ .Values.timing.shutdown | quote }}
          {{- end -}}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: admin
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: admin
            initialDelaySeconds: 30
            periodSeconds: 3
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}    
     {{- with .Values.image.imagePullSecrets}}
      imagePullSecrets:
       - name : {{ toYaml . }}
     {{- end }}
{{- end }}     