# Default values for ambassador.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

ambassador:
  id: default

namespace:
  single: false
  # name: default

replicaCount: 1
# If ambassador is needed as daemonSet then set create to true
daemonSet: false


image:
  repository: quay.io/datawire/ambassador
  pullPolicy: IfNotPresent
  #imagePullSecrets: sample


service:
  enableHttp: true
  enableHttps: true

  targetPorts:
    http: 80
    https: 443


  type: LoadBalancer
  port: 80
  #Nodeport to use  if type is selected as Nodeport otherwise it will be ignored
  #nodePort : 30039
  # annotations:
  #   getambassador.io/config: |
  #     ---
  #     apiVersion: ambassador/v0
  #     kind: Module
  #     name:  ambassador
  #     config:
  #       diagnostics:
  #         enabled: false
  # loadBalancerSourceRanges:
  #   - YOUR_IP_RANGE

adminService:
  create: true
  type: ClusterIP

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: 

resources: {}
  # If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

exporter:
  image: prom/statsd-exporter:v0.6.0
  # You can configure the statsd exporter to modify the behavior of mappings and other features.
  # See documentation: https://github.com/prometheus/statsd_exporter/tree/v0.6.0#metric-mapping-and-configuration
  # Uncomment the following line if you wish to specify a custom configuration:
  # configuration: |
  #   ---
  #   mappings:
  #   - match: 'envoy.cluster.*.upstream_cx_connect_ms'
  #     name: "envoy_cluster_upstream_cx_connect_time"
  #     timer_type: 'histogram'
  #     labels:
  #       cluster_name: "$1"

timing:
  # sets the minimum number of seconds between Envoy restarts
  # restart: 15
  # sets the number of seconds that the Envoy will wait for open connections to drain on a restart
  # drain: 5
  # sets the number of seconds that Ambassador will wait for the old Envoy to clean up and exit on a restart
  # shutdown: 10
