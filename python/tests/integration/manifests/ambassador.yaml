# GENERATED FILE: edits made by hand will not be preserved.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: kat-ambassador
    app.kubernetes.io/managed-by: kat
    app.kubernetes.io/name: kat-ambassador
    app.kubernetes.io/part-of: kat-ambassador
    product: aes
    rbac.getambassador.io/role-group: {self.path.k8s}
  name: {self.path.k8s}-apiext
  namespace: emissary-system
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: kat-ambassador
    app.kubernetes.io/managed-by: kat
    app.kubernetes.io/name: kat-ambassador
    app.kubernetes.io/part-of: kat-ambassador
    product: aes
  name: {self.path.k8s}-apiext
  namespace: emissary-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {self.path.k8s}-apiext
subjects:
- kind: ServiceAccount
  name: {self.path.k8s}
  namespace: {self.namespace}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/dependencies: {self.path.k8s}-redis.{self.namespace}
    a8r.io/description: The Ambassador Edge Stack goes beyond traditional API Gateways
      and Ingress Controllers with the advanced edge features needed to support developer
      self-service and full-cycle development.
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/owner: Ambassador Labs
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/support: https://www.getambassador.io/about-us/support/
  labels:
    app.kubernetes.io/component: ambassador-service
    app.kubernetes.io/instance: kat-ambassador
    app.kubernetes.io/managed-by: kat
    app.kubernetes.io/name: kat-ambassador
    app.kubernetes.io/part-of: kat-ambassador
    product: aes
  name: {self.path.k8s}
  namespace: {self.namespace}
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443
  {extra_ports}
  selector:
    profile: main
    service: {self.path.k8s}
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/dependencies: None
    a8r.io/description: The Ambassador Edge Stack admin service for internal use and
      health checks.
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/owner: Ambassador Labs
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/support: https://www.getambassador.io/about-us/support/
  labels:
    app.kubernetes.io/instance: kat-ambassador
    app.kubernetes.io/managed-by: kat
    app.kubernetes.io/name: kat-ambassador
    app.kubernetes.io/part-of: kat-ambassador
    product: aes
    service: ambassador-admin
  name: {self.path.k8s}-admin
  namespace: {self.namespace}
spec:
  ports:
  - name: ambassador-admin
    port: 8877
    protocol: TCP
    targetPort: admin
  - name: ambassador-snapshot
    port: 8005
    protocol: TCP
    targetPort: 8005
  selector:
    service: {self.path.k8s}
  type: ClusterIP
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
  labels:
    app.kubernetes.io/instance: kat-ambassador
    app.kubernetes.io/managed-by: kat
    app.kubernetes.io/name: kat-ambassador
    app.kubernetes.io/part-of: kat-ambassador
    product: aes
    profile: main
    service: {self.path.k8s}
  name: {self.path.k8s}
  namespace: {self.namespace}
spec:
  containers:
  - env:
    - name: AMBASSADOR_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: AGENT_CONFIG_RESOURCE_NAME
      value: {self.path.k8s}-agent-cloud-token
    - name: AMBASSADOR_CONFIG_BASE_DIR
      value: /tmp/ambassador
    - name: AMBASSADOR_DISABLE_GO_FILTER
      value: "false"
    - name: AMBASSADOR_ID
      value: {self.path.k8s}
    - name: AMBASSADOR_SNAPSHOT_COUNT
      value: "0"
    {envs}
    image: {images[emissary]}
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /ambassador/v0/check_alive
        port: admin
      initialDelaySeconds: 30
      periodSeconds: 3
    name: ambassador
    ports:
    - containerPort: 8080
      name: http
    - containerPort: 8443
      name: https
    - containerPort: 8877
      name: admin
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /ambassador/v0/check_ready
        port: admin
      initialDelaySeconds: 30
      periodSeconds: 3
    resources: null
    securityContext:
      {capabilities_block}
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    volumeMounts:
    - mountPath: /tmp/ambassador-pod-info
      name: ambassador-pod-info
      readOnly: true
    - mountPath: /tmp/
      name: scratchpad
  dnsPolicy: ClusterFirst
  hostNetwork: false
  imagePullSecrets: []
  initContainers:
  - args:
    - |
      deployment_name="emissary-apiext"
      deployment_namespace="emissary-system"
      while true; do
        echo "checking if deployment/$deployment_name in namespace: $deployment_namespace exists."
        if kubectl get deployment "$deployment_name" -n $deployment_namespace > /dev/null 2>&1; then
          echo "$deployment_name.$deployment_namespace exists."
          echo "checking if $deployment_name.$deployment_namespace is fully available..."
          kubectl wait --for=condition=available deployment/"$deployment_name" -n $deployment_namespace --timeout=5m
          if [ $? -eq 0 ]; then
            echo "$deployment_name.$deployment_namespace is available"
            while true; do
            desired_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.spec.replicas}')
            current_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.status.replicas}')
            if [[ $current_replicas != $desired_replicas ]]; then
              echo "$deployment_name.$deployment_namespace is in the process of restarting. Have: $current_replicas, want $desired_replicas"
              sleep 3
            else
              echo "$deployment_name.$deployment_namespace is fully ready and not currently restarting.  Have: $current_replicas, want $desired_replicas"
              break
            fi
            done
            break
          else
            echo "$deployment_name.$deployment_namespace did not become available within the timeout"
          fi
        else
          echo "$deployment_name.$deployment_namespace does not exist yet. Waiting..."
          sleep 3
        fi
      done
    command:
    - /bin/sh
    - -c
    image: istio/kubectl:1.5.10
    imagePullPolicy: IfNotPresent
    name: wait-for-apiext
    securityContext:
      runAsUser: 8888
  restartPolicy: Always
  securityContext:
    runAsUser: 8888
  serviceAccountName: {self.path.k8s}
  volumes:
  - downwardAPI:
      items:
      - fieldRef:
          fieldPath: metadata.labels
        path: labels
    name: ambassador-pod-info
  - emptyDir:
      medium: Memory
      sizeLimit: 45Mi
    name: scratchpad
