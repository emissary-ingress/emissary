# @TEMPLATE@
#
# This file is roughly:
# https://getambassador.io/yaml/ambassador/pro/ambassador-pro.yaml
# but:
#  - split in to sections, for readability
#  - modified to work with Kubernaut
#  - in the "standalone" namespace
#  - with ratelimit stuff removed (for now)

######################################################################
# Create a ClusterRole+ClusterRoleBinding+ServiceAccount for
# ambassador-pro that has access to the CRDs that we will create for
# it below
#
# NB: ClusterRoles and ClusterRoleBindings are not namespaced
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-pro-standalone
rules:
- apiGroups: ["getambassador.io"]
  resources:
  - policies
  - tenants
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador-pro
  namespace: standalone
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador-pro-standalone
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-pro-standalone
subjects:
- kind: ServiceAccount
  name: ambassador-pro
  namespace: standalone


######################################################################
# Create a CRDs used to configure ambassador-pro
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: policies.getambassador.io
spec:
  group: getambassador.io
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
  scope: Namespaced
  names:
    plural: policies
    singular: policy
    kind: Policy
    shortNames:
    - pol
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tenants.getambassador.io
spec:
  group: getambassador.io
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
  scope: Namespaced
  names:
    plural: tenants
    singular: tenant
    kind: Tenant
    shortNames:
    - ten


######################################################################
# Create the ambassador-pro Service+Deployment
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-pro
  namespace: standalone
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind: AuthService
      name: authentication
      proto: http
      auth_service: ambassador-pro
      allowed_request_headers:
      - "Client-Id"
      - "Client-Secret"
      allowed_authorization_headers:
      - "Authorization"
      - "Client-Id"
      - "Client-Secret"
      ---
      apiVersion: ambassador/v1
      kind: Mapping
      name: callback_mapping
      prefix: /callback
      service: ambassador-pro
spec:
  type: ClusterIP
  selector:
    service: ambassador-pro
  ports:
  - name: auth-http
    port: 80
    targetPort: 8080
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ambassador-pro
  namespace: standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-pro
  template:
    metadata:
      labels:
        service: ambassador-pro
    spec:
      serviceAccountName: ambassador-pro
      containers:
      - name: auth
        image: {{env "IMAGE"}}
        ports:
        - containerPort: 8080
        env:
        # Auth provider's absolute url: {scheme}://{host}
        # This is required for the container to start
        - name: AUTH_PROVIDER_URL
          value: {{env "AUTH_PROVIDER_URL"}}
        - name: AMBASSADOR_LICENSE_KEY
          value: {{env "AMBASSADOR_LICENSE_KEY"}}
# XXX: Kubernaut
#      imagePullSecrets:
#      - name: ambassador-pro-registry-credentials
