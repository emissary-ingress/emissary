# @TEMPLATE@
#
# This file is roughly:
# https://getambassador.io/yaml/ambassador/pro/ambassador-pro.yaml
# but:
#  - split in to sections, for readability
#  - modified to work with Kubernaut
#  - in the "standalone" namespace
#  - with the "telepresence-proxy" Service+Deployment added

######################################################################
# Create a ClusterRole+ClusterRoleBinding+ServiceAccount for
# ambassador-pro that has access to the CRDs that we will create for
# it below
#
# NB: ClusterRoles and ClusterRoleBindings are not namespaced
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-pro-standalone
rules:
- apiGroups: ["getambassador.io"]
  resources:
  - filters
  - filterpolicies
  - ratelimits
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador-pro
  namespace: standalone
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador-pro-standalone
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-pro-standalone
subjects:
- kind: ServiceAccount
  name: ambassador-pro
  namespace: standalone


######################################################################
# Create a CRDs used to configure ambassador-pro
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: filterpolicies.getambassador.io
spec:
  group: getambassador.io
  version: v1beta2
  versions:
  - name: v1beta2
    served: true
    storage: true
  scope: Namespaced
  names:
    plural: filterpolicies
    singular: filterpolicy
    kind: FilterPolicy
    shortNames:
    - fp
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: filters.getambassador.io
spec:
  group: getambassador.io
  version: v1beta2
  versions:
  - name: v1beta2
    served: true
    storage: true
  scope: Namespaced
  names:
    plural: filters
    singular: filter
    kind: Filter
    shortNames:
    - fil
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ratelimits.getambassador.io
spec:
  group: getambassador.io
  version: v1beta2
  versions:
    - name: v1beta2
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: ratelimits
    singular: ratelimit
    kind: RateLimit
    shortNames:
    - rl


######################################################################
# Redis for Ambassador Pro ratelimit
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-pro-redis
  namespace: standalone
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    service: ambassador-pro-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-pro-redis
  namespace: standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-pro-redis
  template:
    metadata:
      labels:
        service: ambassador-pro-redis
    spec:
      containers:
      - name: redis
        image: redis:5.0.1
      restartPolicy: Always


######################################################################
# Create the ambassador-pro Service+Deployment
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-pro
  namespace: standalone
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind: RateLimitService
      name: ambassador-pro
      service: "ambassador-pro:8081"
      ---
      apiVersion: ambassador/v1
      kind: AuthService
      name: authentication
      proto: grpc
      auth_service: ambassador-pro
      allow_request_body: false # setting this to 'true' allows Plugin and Delegate filters to access the body, but has performance overhead
      ---
      # This mapping needs to exist, but is never actually followed.
      apiVersion: ambassador/v1
      kind: Mapping
      name: callback_mapping
      prefix: /callback
      service: NoTaReAlSeRvIcE
spec:
  type: ClusterIP
  selector:
    service: ambassador-pro
  ports:
  - name: ratelimit-grpc
    port: 8081
    targetPort: 8081
  - name: ratelimit-debug
    port: 6070
    targetPort: 6070
  - name: auth-http
    port: 80
    targetPort: 8082
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ambassador-pro
  namespace: standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-pro
  template:
    metadata:
      labels:
        service: ambassador-pro
    spec:
      serviceAccountName: ambassador-pro
      terminationGracePeriodSeconds: 0
      containers:
      - name: ambassador-pro
        image: {{env "AMB_SIDECAR_IMAGE"}}
        ports:
        - name: ratelimit-grpc
          containerPort: 8081
        - name: ratelimit-debug
          containerPort: 6070
        - name: auth-http
          containerPort: 8082
        env:
        - name: APP_LOG_LEVEL
          value: DEBUG
        - name: REDIS_SOCKET_TYPE # For ratelimit
          value: tcp
        - name: REDIS_URL # For ratelimit
          value: ambassador-pro-redis:6379
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AMBASSADOR_SINGLE_NAMESPACE
          value: "true"
        - name: AMBASSADOR_LICENSE_KEY # For everything
          value: {{env "AMBASSADOR_LICENSE_KEY"}}
# XXX: Kubernaut
#      imagePullSecrets:
#      - name: ambassador-pro-registry-credentials


######################################################################
# Create the traffic-proxy Service+Deployment
#
# Does this *need* to be a standalone service, or can it be part of
# the main ambassador-pro deployment?  IDK.  --lukeshu
---
apiVersion: v1
kind: Service
metadata:
  name: telepresence-proxy
  namespace: standalone
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: telepresence-proxy
  ports:
  - name: sshd
    protocol: TCP
    port: 8022
  - name: api
    protocol: TCP
    port: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telepresence-proxy
  namespace: standalone
  labels:
    app: telepresence-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telepresence-proxy
  template:
    metadata:
      labels:
        app: telepresence-proxy
    spec:
      containers:
      - name: telepresence-proxy
        image: {{env "PROXY_IMAGE"}}
        ports:
        - name: sshd
          containerPort: 8022
        env:
        - name: AMBASSADOR_LICENSE_KEY
          value: {{env "AMBASSADOR_LICENSE_KEY"}}
# XXX: Kubernaut
#      imagePullSecrets:
#      - name: ambassador-pro-registry-credentials
