# GENERATED FILE: DO NOT EDIT.
---
# Install Redis for AES
apiVersion: v1
kind: Service
metadata:
  name: ambassador-redis
  labels:
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack Redis store for auth and rate limiting, among other things."
    a8r.io/documentation: https://www.getambassador.io/docs/latest/
    a8r.io/chat: http://d6e.co/slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    service: ambassador-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-redis
  labels:
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-redis
  template:
    metadata:
      labels:
        service: ambassador-redis
    spec:
      containers:
        - name: redis
          image: redis:5.0.1
      restartPolicy: Always
---
# Create a secret with empty license key for AES
apiVersion: v1
kind: Secret
metadata:
  name: ambassador-edge-stack
data:
  license-key: "" # This secret is just a placeholder, it is mounted as a volume and refreshed when changed
---
# Create a service to test AES
apiVersion: v1
kind: Service
metadata:
  name: test-aes
  labels:
    product: aes
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    product: aes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    product: aes
  name: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      product: aes
  template:
    metadata:
      annotations:
        consul.hashicorp.com/connect-inject: 'false'
        sidecar.istio.io/inject: 'false'
      labels:
        product: aes
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    product: aes
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - env:
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: REDIS_URL
              value: ambassador-redis:6379
            - name: AMBASSADOR_URL
              value: https://ambassador.default.svc.cluster.local
            - name: POLL_EVERY_SECS
              value: '60'
            - name: AMBASSADOR_INTERNAL_URL
              value: https://127.0.0.1:8443
          image: docker.io/datawire/aes:$version$
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: 8877
            periodSeconds: 3
          name: aes
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8443
              name: https
            - containerPort: 8877
              name: admin
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: 8877
            periodSeconds: 3
          resources:
            limits:
              cpu: 1
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 100Mi
          volumeMounts:
            - mountPath: /tmp/ambassador-pod-info
              name: ambassador-pod-info
            - mountPath: /.config/ambassador
              name: ambassador-edge-stack-secrets
              readOnly: true
      restartPolicy: Always
      securityContext:
        runAsUser: 8888
      serviceAccountName: ambassador
      terminationGracePeriodSeconds: 0
      volumes:
        - downwardAPI:
            items:
              - fieldRef:
                  fieldPath: metadata.labels
                path: labels
          name: ambassador-pod-info
        - name: ambassador-edge-stack-secrets
          secret:
            secretName: ambassador-edge-stack
---
# AES specific permissions. If a permission also applies to OSS, it should go in ambassador/docs/yaml/ambassador/ambassador-rbac.yaml
# Edge Stack mostly needs the same permissions as Ambassador OSS,
# but:
#  1. It needs extra permissions ("update"/"patch"/"create"/"delete")
#     for getambassador.io resources.
#  2. It needs extra permissions ("create"/"update") for secrets.
#  3. It needs permission to "create" events.
#  4. It needs permission to "get"/"create"/"update" Leases (or
#     Endpoints, if on Kubernetes <1.12).
#
# Note: If you edit this, be sure to also edit the pytest
# `manifests/rbac_*_scope.yaml` files.
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador
  labels:
    product: aes
rules:
- apiGroups: [ "apiextensions.k8s.io" ]
  resources: [ "customresourcedefinitions" ]
  verbs: ["get", "list", "watch"]
#devmagic:{{- if env "AMBASSADOR_SINGLE_NAMESPACE" | ne "" }}
#devmagic:---
#devmagic:apiVersion: rbac.authorization.k8s.io/v1beta1
#devmagic:kind: Role
#devmagic:metadata:
#devmagic:  name: ambassador
#devmagic:  namespace: ambassador
#devmagic:  labels:
#devmagic:    product: aes
#devmagic:rules:
#devmagic:{{- end }}
- apiGroups: [ "getambassador.io" ]
  resources: [ "*" ]
  verbs: ["update", "patch", "create", "delete" ]
- apiGroups: [""]
  resources: [ "secrets" ]
  verbs: ["create", "update"]
- apiGroups: [""]
  resources: [ "events" ]
  verbs: ["get", "list", "watch", "create", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: [ "leases" ]
  verbs: ["get", "create", "update"]
- apiGroups: [""]
  resources: [ "endpoints" ]
  verbs: ["get", "list", "watch", "create", "update"]
- apiGroups: [""]
  resources: ["endpoints", "namespaces", "secrets", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["getambassador.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["getambassador.io"]
  resources: ["mappings/status"]
  verbs: ["update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.internal.knative.dev"]
  resources: ["clusteringresses", "ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.internal.knative.dev"]
  resources: ["ingresses/status", "clusteringresses/status"]
  verbs: ["update"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses", "ingressclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses/status"]
  verbs: ["update"]
