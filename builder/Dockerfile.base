###
# This dockerfile builds the base image for the builder container. See
# the main Dockerfile for more information about what the builder
# container is and how code in this repo is built.
#
# Originally this base was built as part of the builder container's
# bootstrap process. We discovered that minor network interruptions
# would break these steps, and such interruptions were common on our
# cloud CI system. We decided to separate out these steps so that any
# one of them is much less likely to be the cause of a network-related
# failure, i.e. a flake.
#
# See the comment before the build_builder_base() function in builder.sh
# to see when and how often this base image is built and pushed.
##

# This argument controls the base image that is used for our build
# container.
ARG builderbase_stage0="frolvlad/alpine-glibc:alpine-3.10"
ARG builderbase_stage1="builderbase-stage1"

########################################
# Third-party code
########################################

FROM ${builderbase_stage0} as builderbase-stage1

WORKDIR /buildroot

ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/buildroot/bin

RUN apk --no-cache add \
    bash \
    bash-completion \
    build-base \
    curl \
    cython \
    docker \
    git \
    iptables \
    jq \
    libcap \
    libcap-dev \
    libffi-dev \
    ncurses \
    nodejs \
    npm \
    openssh-client \
    openssl-dev \
    python3 \
    python3-dev \
    rsync \
    sudo \
    yaml-dev \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && chmod u+s $(which docker)
RUN pip3 install -U pip pip-tools==5.3.1
RUN npm config set user 0 && \
    npm config set unsafe-perm true && \
    npm install -g rollup@2.9.1 rollup-plugin-terser@5.3.0
RUN curl --fail -L https://dl.google.com/go/go1.15.linux-amd64.tar.gz | tar -C /usr/local -xzf -
RUN curl https://sdk.cloud.google.com > /tmp/install.sh && \
    mkdir /usr/lib64/ && \
    bash /tmp/install.sh --disable-prompts --install-dir=/usr/lib64

RUN curl --fail -L https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl -o /usr/bin/kubectl && chmod a+x /usr/bin/kubectl && \
    kubectl completion bash > /usr/share/bash-completion/completions/kubectl
RUN curl --fail -L https://raw.githubusercontent.com/ahmetb/kubectx/v0.7.0/kubectx -o /usr/local/bin/kubectx && chmod a+x /usr/local/bin/kubectx && \
    curl --fail -L https://raw.githubusercontent.com/ahmetb/kubectx/v0.7.0/completion/kubectx.bash -o /usr/share/bash-completion/completions/kubectx
RUN curl --fail -L https://raw.githubusercontent.com/ahmetb/kubectx/v0.7.0/kubens -o /usr/local/bin/kubens && chmod a+x /usr/local/bin/kubens && \
    curl --fail -L https://raw.githubusercontent.com/ahmetb/kubectx/v0.7.0/completion/kubens.bash -o /usr/share/bash-completion/completions/kubens

RUN curl --fail -L https://raw.githubusercontent.com/jonmosco/kube-ps1/v0.7.0/kube-ps1.sh -o /usr/local/bin/kube-ps1.sh

# The YAML parser is... special. To get the C version, we need to install Cython and libyaml, then
# build it locally -- just using pip won't work.

# Download, build, and install PyYAML.
RUN mkdir /tmp/pyyaml && \
  cd /tmp/pyyaml && \
  curl -O -L http://pyyaml.org/download/pyyaml/PyYAML-5.3.1.tar.gz && \
  tar xzf PyYAML-5.3.1.tar.gz && \
  cd PyYAML-5.3.1 && \
  python3 setup.py --with-libyaml install

FROM ${builderbase_stage1} as builderbase-stage2
# Then we can do the rest of the Python stuff.
COPY requirements.txt .
RUN pip3 install -r requirements.txt
