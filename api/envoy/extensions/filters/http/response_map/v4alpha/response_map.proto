syntax = "proto3";

package envoy.extensions.filters.http.response_map.v4alpha;

import "envoy/config/accesslog/v4alpha/accesslog.proto";
import "envoy/config/core/v4alpha/base.proto";
import "envoy/config/core/v4alpha/substitution_format_string.proto";

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.response_map.v4alpha";
option java_outer_classname = "ResponseMapProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: ResponseMap]
// Response map filter :ref:`configuration overview <config_http_filters_response_map>`.
// [#extension: envoy.filters.http.response_map]

// The configuration to filter and change local response.
message ResponseMapper {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.filters.http.response_map.v3.ResponseMapper";

  // Filter to determine if this mapper should apply.
  config.accesslog.v4alpha.AccessLogFilter filter = 1 [(validate.rules).message = {required: true}];

  // The new response status code if specified.
  google.protobuf.UInt32Value status_code = 2 [(validate.rules).uint32 = {lt: 600 gte: 200}];

  // The new body text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
  // command operator in the `body_format`.
  config.core.v4alpha.DataSource body = 3;

  config.core.v4alpha.SubstitutionFormatString body_format_override = 4;
}

// The configuration to customize HTTP responses read by Envoy.
message ResponseMap {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.filters.http.response_map.v3.ResponseMap";

  // Configuration of list of mappers which allows to filter and change HTTP response.
  // The mappers will be checked by the specified order until one is matched.
  repeated ResponseMapper mappers = 1;

  // The configuration to form response body from the :ref:`command operators <config_access_log_command_operators>`
  // and to specify response content type as one of: plain/text or application/json.
  //
  // Example one: plain/text body_format.
  //
  // .. code-block::
  //
  //   text_format: %LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=$REQ(:path)%
  //
  // The following response body in `plain/text` format will be generated for a request with
  // local reply body of "upstream connection error", response_code=503 and path=/foo.
  //
  // .. code-block::
  //
  //   upstream connection error:503:path=/foo
  //
  //  Example two: application/json body_format.
  //
  // .. code-block::
  //
  //  json_format:
  //    status: %RESPONSE_CODE%
  //    message: %LOCAL_REPLY_BODY%
  //    path: $REQ(:path)%
  //
  // The following response body in "application/json" format would be generated for a request with
  // local reply body of "upstream connection error", response_code=503 and path=/foo.
  //
  // .. code-block:: json
  //
  //  {
  //    "status": 503,
  //    "message": "upstream connection error",
  //    "path": "/foo"
  //  }
  //
  config.core.v4alpha.SubstitutionFormatString body_format = 2;
}

// Extra settings on a per virtualhost/route/weighted-cluster level.
message ResponseMapPerRoute {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.filters.http.response_map.v3.ResponseMapPerRoute";

  oneof override {
    option (validate.required) = true;

    // Disable the response map filter for this particular vhost or route.
    // If disabled is specified in multiple per-filter-configs, the most specific one will be used.
    bool disabled = 1 [(validate.rules).bool = {const: true}];

    // Override the global configuration of the response map filter with this new config.
    ResponseMap response_map = 2 [(validate.rules).message = {required: true}];
  }
}
