syntax = "proto3";

package envoy.service.tap.v3alpha;

option java_outer_classname = "TapdsProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.service.tap.v3alpha";
option java_generic_services = true;

import "envoy/api/v3alpha/discovery.proto";
import "envoy/service/tap/v3alpha/common.proto";

import "google/api/annotations.proto";

import "validate/validate.proto";

// [#protodoc-title: Tap discovery service]

// [#not-implemented-hide:] Tap discovery service.
service TapDiscoveryService {
  rpc StreamTapConfigs(stream api.v3alpha.DiscoveryRequest)
      returns (stream api.v3alpha.DiscoveryResponse) {
  }

  rpc DeltaTapConfigs(stream api.v3alpha.DeltaDiscoveryRequest)
      returns (stream api.v3alpha.DeltaDiscoveryResponse) {
  }

  rpc FetchTapConfigs(api.v3alpha.DiscoveryRequest) returns (api.v3alpha.DiscoveryResponse) {
    option (google.api.http) = {
      post: "/v3alpha/discovery:tap_configs"
      body: "*"
    };
  }
}

// [#not-implemented-hide:] A tap resource is essentially a tap configuration with a name
// The filter TapDS config references this name.
message TapResource {
  // The name of the tap configuration.
  string name = 1 [(validate.rules).string = {min_bytes: 1}];

  // Tap config to apply
  TapConfig config = 2;
}
