// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.8.0
// source: edgectl/rpc/daemon.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// InterceptError is a common error type used by the intercept call family (add, remove, list, available).
type InterceptError int32

const (
	InterceptError_InterceptOk              InterceptError = 0
	InterceptError_NoPreviewHost            InterceptError = 1
	InterceptError_NoConnection             InterceptError = 2
	InterceptError_NoTrafficManager         InterceptError = 3
	InterceptError_TrafficManagerConnecting InterceptError = 4
	InterceptError_TrafficManagerError      InterceptError = 5
	InterceptError_AlreadyExists            InterceptError = 6
	InterceptError_NoAcceptableDeployment   InterceptError = 7
	InterceptError_AmbiguousMatch           InterceptError = 8
	InterceptError_FailedToEstablish        InterceptError = 9
	InterceptError_FailedToRemove           InterceptError = 10
	InterceptError_NotFound                 InterceptError = 11
)

// Enum value maps for InterceptError.
var (
	InterceptError_name = map[int32]string{
		0:  "InterceptOk",
		1:  "NoPreviewHost",
		2:  "NoConnection",
		3:  "NoTrafficManager",
		4:  "TrafficManagerConnecting",
		5:  "TrafficManagerError",
		6:  "AlreadyExists",
		7:  "NoAcceptableDeployment",
		8:  "AmbiguousMatch",
		9:  "FailedToEstablish",
		10: "FailedToRemove",
		11: "NotFound",
	}
	InterceptError_value = map[string]int32{
		"InterceptOk":              0,
		"NoPreviewHost":            1,
		"NoConnection":             2,
		"NoTrafficManager":         3,
		"TrafficManagerConnecting": 4,
		"TrafficManagerError":      5,
		"AlreadyExists":            6,
		"NoAcceptableDeployment":   7,
		"AmbiguousMatch":           8,
		"FailedToEstablish":        9,
		"FailedToRemove":           10,
		"NotFound":                 11,
	}
)

func (x InterceptError) Enum() *InterceptError {
	p := new(InterceptError)
	*p = x
	return p
}

func (x InterceptError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterceptError) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[0].Descriptor()
}

func (InterceptError) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[0]
}

func (x InterceptError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterceptError.Descriptor instead.
func (InterceptError) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{0}
}

type ConnectResponse_ErrType int32

const (
	ConnectResponse_Ok                    ConnectResponse_ErrType = 0
	ConnectResponse_AlreadyConnected      ConnectResponse_ErrType = 1
	ConnectResponse_Disconnecting         ConnectResponse_ErrType = 2
	ConnectResponse_Paused                ConnectResponse_ErrType = 3
	ConnectResponse_EstablishingOverrides ConnectResponse_ErrType = 4
	ConnectResponse_ClusterFailed         ConnectResponse_ErrType = 5
	ConnectResponse_BridgeFailed          ConnectResponse_ErrType = 6
	ConnectResponse_TrafficManagerFailed  ConnectResponse_ErrType = 7
)

// Enum value maps for ConnectResponse_ErrType.
var (
	ConnectResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "AlreadyConnected",
		2: "Disconnecting",
		3: "Paused",
		4: "EstablishingOverrides",
		5: "ClusterFailed",
		6: "BridgeFailed",
		7: "TrafficManagerFailed",
	}
	ConnectResponse_ErrType_value = map[string]int32{
		"Ok":                    0,
		"AlreadyConnected":      1,
		"Disconnecting":         2,
		"Paused":                3,
		"EstablishingOverrides": 4,
		"ClusterFailed":         5,
		"BridgeFailed":          6,
		"TrafficManagerFailed":  7,
	}
)

func (x ConnectResponse_ErrType) Enum() *ConnectResponse_ErrType {
	p := new(ConnectResponse_ErrType)
	*p = x
	return p
}

func (x ConnectResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[1].Descriptor()
}

func (ConnectResponse_ErrType) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[1]
}

func (x ConnectResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectResponse_ErrType.Descriptor instead.
func (ConnectResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{1, 0}
}

type DisconnectResponse_ErrType int32

const (
	DisconnectResponse_Ok               DisconnectResponse_ErrType = 0
	DisconnectResponse_NotConnected     DisconnectResponse_ErrType = 1
	DisconnectResponse_DisconnectFailed DisconnectResponse_ErrType = 2
)

// Enum value maps for DisconnectResponse_ErrType.
var (
	DisconnectResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "NotConnected",
		2: "DisconnectFailed",
	}
	DisconnectResponse_ErrType_value = map[string]int32{
		"Ok":               0,
		"NotConnected":     1,
		"DisconnectFailed": 2,
	}
)

func (x DisconnectResponse_ErrType) Enum() *DisconnectResponse_ErrType {
	p := new(DisconnectResponse_ErrType)
	*p = x
	return p
}

func (x DisconnectResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisconnectResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[2].Descriptor()
}

func (DisconnectResponse_ErrType) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[2]
}

func (x DisconnectResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisconnectResponse_ErrType.Descriptor instead.
func (DisconnectResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{2, 0}
}

type PauseResponse_ErrType int32

const (
	PauseResponse_Ok                   PauseResponse_ErrType = 0
	PauseResponse_AlreadyPaused        PauseResponse_ErrType = 1
	PauseResponse_ConnectedToCluster   PauseResponse_ErrType = 2
	PauseResponse_UnexpectedPauseError PauseResponse_ErrType = 3
)

// Enum value maps for PauseResponse_ErrType.
var (
	PauseResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "AlreadyPaused",
		2: "ConnectedToCluster",
		3: "UnexpectedPauseError",
	}
	PauseResponse_ErrType_value = map[string]int32{
		"Ok":                   0,
		"AlreadyPaused":        1,
		"ConnectedToCluster":   2,
		"UnexpectedPauseError": 3,
	}
)

func (x PauseResponse_ErrType) Enum() *PauseResponse_ErrType {
	p := new(PauseResponse_ErrType)
	*p = x
	return p
}

func (x PauseResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PauseResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[3].Descriptor()
}

func (PauseResponse_ErrType) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[3]
}

func (x PauseResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PauseResponse_ErrType.Descriptor instead.
func (PauseResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{3, 0}
}

type ResumeResponse_ErrType int32

const (
	ResumeResponse_Ok                    ResumeResponse_ErrType = 0
	ResumeResponse_NotPaused             ResumeResponse_ErrType = 1
	ResumeResponse_ReEstablishing        ResumeResponse_ErrType = 2
	ResumeResponse_UnexpectedResumeError ResumeResponse_ErrType = 3
)

// Enum value maps for ResumeResponse_ErrType.
var (
	ResumeResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "NotPaused",
		2: "ReEstablishing",
		3: "UnexpectedResumeError",
	}
	ResumeResponse_ErrType_value = map[string]int32{
		"Ok":                    0,
		"NotPaused":             1,
		"ReEstablishing":        2,
		"UnexpectedResumeError": 3,
	}
)

func (x ResumeResponse_ErrType) Enum() *ResumeResponse_ErrType {
	p := new(ResumeResponse_ErrType)
	*p = x
	return p
}

func (x ResumeResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResumeResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[4].Descriptor()
}

func (ResumeResponse_ErrType) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[4]
}

func (x ResumeResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResumeResponse_ErrType.Descriptor instead.
func (ResumeResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{4, 0}
}

type StatusResponse_ErrType int32

const (
	StatusResponse_Ok           StatusResponse_ErrType = 0
	StatusResponse_Paused       StatusResponse_ErrType = 1
	StatusResponse_NoNetwork    StatusResponse_ErrType = 2
	StatusResponse_Disconnected StatusResponse_ErrType = 3
)

// Enum value maps for StatusResponse_ErrType.
var (
	StatusResponse_ErrType_name = map[int32]string{
		0: "Ok",
		1: "Paused",
		2: "NoNetwork",
		3: "Disconnected",
	}
	StatusResponse_ErrType_value = map[string]int32{
		"Ok":           0,
		"Paused":       1,
		"NoNetwork":    2,
		"Disconnected": 3,
	}
)

func (x StatusResponse_ErrType) Enum() *StatusResponse_ErrType {
	p := new(StatusResponse_ErrType)
	*p = x
	return p
}

func (x StatusResponse_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusResponse_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_edgectl_rpc_daemon_proto_enumTypes[5].Descriptor()
}

func (StatusResponse_ErrType) Type() protoreflect.EnumType {
	return &file_edgectl_rpc_daemon_proto_enumTypes[5]
}

func (x StatusResponse_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusResponse_ErrType.Descriptor instead.
func (StatusResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{7, 0}
}

// ConnectRequest contains the information needed to connect ot a cluster.
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context        string                   `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	Namespace      string                   `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	ManagerNS      string                   `protobuf:"bytes,3,opt,name=ManagerNS,proto3" json:"ManagerNS,omitempty"`
	InstallID      string                   `protobuf:"bytes,4,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	IsCI           bool                     `protobuf:"varint,5,opt,name=IsCI,proto3" json:"IsCI,omitempty"`
	WaitForNetwork int32                    `protobuf:"varint,6,opt,name=WaitForNetwork,proto3" json:"WaitForNetwork,omitempty"`
	Args           []string                 `protobuf:"bytes,7,rep,name=Args,proto3" json:"Args,omitempty"`
	User           *ConnectRequest_UserInfo `protobuf:"bytes,8,opt,name=User,proto3" json:"User,omitempty"` // Remove when connector runs as user
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ConnectRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConnectRequest) GetManagerNS() string {
	if x != nil {
		return x.ManagerNS
	}
	return ""
}

func (x *ConnectRequest) GetInstallID() string {
	if x != nil {
		return x.InstallID
	}
	return ""
}

func (x *ConnectRequest) GetIsCI() bool {
	if x != nil {
		return x.IsCI
	}
	return false
}

func (x *ConnectRequest) GetWaitForNetwork() int32 {
	if x != nil {
		return x.WaitForNetwork
	}
	return 0
}

func (x *ConnectRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ConnectRequest) GetUser() *ConnectRequest_UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          ConnectResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.ConnectResponse_ErrType" json:"Error,omitempty"`
	ErrorText      string                  `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
	ClusterContext string                  `protobuf:"bytes,3,opt,name=ClusterContext,proto3" json:"ClusterContext,omitempty"`
	ClusterServer  string                  `protobuf:"bytes,4,opt,name=ClusterServer,proto3" json:"ClusterServer,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectResponse) GetError() ConnectResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return ConnectResponse_Ok
}

func (x *ConnectResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *ConnectResponse) GetClusterContext() string {
	if x != nil {
		return x.ClusterContext
	}
	return ""
}

func (x *ConnectResponse) GetClusterServer() string {
	if x != nil {
		return x.ClusterServer
	}
	return ""
}

type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     DisconnectResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.DisconnectResponse_ErrType" json:"Error,omitempty"`
	ErrorText string                     `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *DisconnectResponse) GetError() DisconnectResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return DisconnectResponse_Ok
}

func (x *DisconnectResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type PauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     PauseResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.PauseResponse_ErrType" json:"Error,omitempty"`
	ErrorText string                `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *PauseResponse) Reset() {
	*x = PauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResponse) ProtoMessage() {}

func (x *PauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResponse.ProtoReflect.Descriptor instead.
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{3}
}

func (x *PauseResponse) GetError() PauseResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return PauseResponse_Ok
}

func (x *PauseResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type ResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     ResumeResponse_ErrType `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.ResumeResponse_ErrType" json:"Error,omitempty"`
	ErrorText string                 `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *ResumeResponse) Reset() {
	*x = ResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeResponse) ProtoMessage() {}

func (x *ResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeResponse.ProtoReflect.Descriptor instead.
func (*ResumeResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{4}
}

func (x *ResumeResponse) GetError() ResumeResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return ResumeResponse_Ok
}

func (x *ResumeResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{5}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APIVersion int32  `protobuf:"varint,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{6}
}

func (x *VersionResponse) GetAPIVersion() int32 {
	if x != nil {
		return x.APIVersion
	}
	return 0
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      StatusResponse_ErrType         `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.StatusResponse_ErrType" json:"Error,omitempty"`
	ErrorText  string                         `protobuf:"bytes,2,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
	Bridge     bool                           `protobuf:"varint,3,opt,name=Bridge,proto3" json:"Bridge,omitempty"`
	Cluster    *StatusResponse_ClusterInfo    `protobuf:"bytes,4,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Intercepts *StatusResponse_InterceptsInfo `protobuf:"bytes,5,opt,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{7}
}

func (x *StatusResponse) GetError() StatusResponse_ErrType {
	if x != nil {
		return x.Error
	}
	return StatusResponse_Ok
}

func (x *StatusResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *StatusResponse) GetBridge() bool {
	if x != nil {
		return x.Bridge
	}
	return false
}

func (x *StatusResponse) GetCluster() *StatusResponse_ClusterInfo {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *StatusResponse) GetIntercepts() *StatusResponse_InterceptsInfo {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

// InterceptRequest contains the information needed to add a deployment intercept.
type InterceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the intercept
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Namespace in which to create the Intercept mapping
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Name of the deployment being intercepted
	Deployment string `protobuf:"bytes,3,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
	// Prefix to intercept (default /)
	Prefix     string `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	TargetHost string `protobuf:"bytes,5,opt,name=TargetHost,proto3" json:"TargetHost,omitempty"`
	TargetPort int32  `protobuf:"varint,6,opt,name=TargetPort,proto3" json:"TargetPort,omitempty"`
	// GRPC flag to set on the Intercept mapping. Ideally we'd get this from the
	// Traffic-Manager interceptables instead of having to pass it as a CLI argument.
	GRPC     bool              `protobuf:"varint,7,opt,name=GRPC,proto3" json:"GRPC,omitempty"`
	Preview  bool              `protobuf:"varint,8,opt,name=Preview,proto3" json:"Preview,omitempty"`
	Patterns map[string]string `protobuf:"bytes,9,rep,name=Patterns,proto3" json:"Patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InterceptRequest) Reset() {
	*x = InterceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptRequest) ProtoMessage() {}

func (x *InterceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptRequest.ProtoReflect.Descriptor instead.
func (*InterceptRequest) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{8}
}

func (x *InterceptRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterceptRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InterceptRequest) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *InterceptRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *InterceptRequest) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *InterceptRequest) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *InterceptRequest) GetGRPC() bool {
	if x != nil {
		return x.GRPC
	}
	return false
}

func (x *InterceptRequest) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *InterceptRequest) GetPatterns() map[string]string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type RemoveInterceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the intercept
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *RemoveInterceptRequest) Reset() {
	*x = RemoveInterceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInterceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInterceptRequest) ProtoMessage() {}

func (x *RemoveInterceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInterceptRequest.ProtoReflect.Descriptor instead.
func (*RemoveInterceptRequest) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveInterceptRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InterceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.InterceptError" json:"Error,omitempty"`
	PreviewURL string         `protobuf:"bytes,2,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	Text       string         `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *InterceptResponse) Reset() {
	*x = InterceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptResponse) ProtoMessage() {}

func (x *InterceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptResponse.ProtoReflect.Descriptor instead.
func (*InterceptResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{10}
}

func (x *InterceptResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *InterceptResponse) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *InterceptResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ListInterceptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError                      `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.InterceptError" json:"Error,omitempty"`
	Text       string                              `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Intercepts []*ListInterceptsResponse_ListEntry `protobuf:"bytes,3,rep,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *ListInterceptsResponse) Reset() {
	*x = ListInterceptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterceptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterceptsResponse) ProtoMessage() {}

func (x *ListInterceptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterceptsResponse.ProtoReflect.Descriptor instead.
func (*ListInterceptsResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{11}
}

func (x *ListInterceptsResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *ListInterceptsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ListInterceptsResponse) GetIntercepts() []*ListInterceptsResponse_ListEntry {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

type AvailableInterceptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      InterceptError                           `protobuf:"varint,1,opt,name=Error,proto3,enum=edgectl.InterceptError" json:"Error,omitempty"`
	Text       string                                   `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Intercepts []*AvailableInterceptsResponse_ListEntry `protobuf:"bytes,3,rep,name=Intercepts,proto3" json:"Intercepts,omitempty"`
}

func (x *AvailableInterceptsResponse) Reset() {
	*x = AvailableInterceptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableInterceptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableInterceptsResponse) ProtoMessage() {}

func (x *AvailableInterceptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableInterceptsResponse.ProtoReflect.Descriptor instead.
func (*AvailableInterceptsResponse) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{12}
}

func (x *AvailableInterceptsResponse) GetError() InterceptError {
	if x != nil {
		return x.Error
	}
	return InterceptError_InterceptOk
}

func (x *AvailableInterceptsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AvailableInterceptsResponse) GetIntercepts() []*AvailableInterceptsResponse_ListEntry {
	if x != nil {
		return x.Intercepts
	}
	return nil
}

// UserInfo contains information needed when the daemon shells out as another user.
// This is subject to change in the near future and this message type will be removed.
type ConnectRequest_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Cwd  string   `protobuf:"bytes,2,opt,name=Cwd,proto3" json:"Cwd,omitempty"`
	Env  []string `protobuf:"bytes,3,rep,name=Env,proto3" json:"Env,omitempty"`
}

func (x *ConnectRequest_UserInfo) Reset() {
	*x = ConnectRequest_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_UserInfo) ProtoMessage() {}

func (x *ConnectRequest_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_UserInfo.ProtoReflect.Descriptor instead.
func (*ConnectRequest_UserInfo) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConnectRequest_UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectRequest_UserInfo) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *ConnectRequest_UserInfo) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

type StatusResponse_ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected bool   `protobuf:"varint,1,opt,name=Connected,proto3" json:"Connected,omitempty"`
	Server    string `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
	Context   string `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *StatusResponse_ClusterInfo) Reset() {
	*x = StatusResponse_ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse_ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse_ClusterInfo) ProtoMessage() {}

func (x *StatusResponse_ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse_ClusterInfo.ProtoReflect.Descriptor instead.
func (*StatusResponse_ClusterInfo) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{7, 0}
}

func (x *StatusResponse_ClusterInfo) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *StatusResponse_ClusterInfo) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *StatusResponse_ClusterInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type StatusResponse_InterceptsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected          bool   `protobuf:"varint,1,opt,name=Connected,proto3" json:"Connected,omitempty"`
	InterceptableCount int32  `protobuf:"varint,2,opt,name=InterceptableCount,proto3" json:"InterceptableCount,omitempty"`
	ClusterIntercepts  int32  `protobuf:"varint,3,opt,name=ClusterIntercepts,proto3" json:"ClusterIntercepts,omitempty"`
	LocalIntercepts    int32  `protobuf:"varint,4,opt,name=LocalIntercepts,proto3" json:"LocalIntercepts,omitempty"`
	LicenseInfo        string `protobuf:"bytes,5,opt,name=LicenseInfo,proto3" json:"LicenseInfo,omitempty"`
}

func (x *StatusResponse_InterceptsInfo) Reset() {
	*x = StatusResponse_InterceptsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse_InterceptsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse_InterceptsInfo) ProtoMessage() {}

func (x *StatusResponse_InterceptsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse_InterceptsInfo.ProtoReflect.Descriptor instead.
func (*StatusResponse_InterceptsInfo) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{7, 1}
}

func (x *StatusResponse_InterceptsInfo) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *StatusResponse_InterceptsInfo) GetInterceptableCount() int32 {
	if x != nil {
		return x.InterceptableCount
	}
	return 0
}

func (x *StatusResponse_InterceptsInfo) GetClusterIntercepts() int32 {
	if x != nil {
		return x.ClusterIntercepts
	}
	return 0
}

func (x *StatusResponse_InterceptsInfo) GetLocalIntercepts() int32 {
	if x != nil {
		return x.LocalIntercepts
	}
	return 0
}

func (x *StatusResponse_InterceptsInfo) GetLicenseInfo() string {
	if x != nil {
		return x.LicenseInfo
	}
	return ""
}

type ListInterceptsResponse_ListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace  string            `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Deployment string            `protobuf:"bytes,3,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
	PreviewURL string            `protobuf:"bytes,4,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`
	Patterns   map[string]string `protobuf:"bytes,5,rep,name=Patterns,proto3" json:"Patterns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetHost string            `protobuf:"bytes,6,opt,name=TargetHost,proto3" json:"TargetHost,omitempty"`
	TargetPort int32             `protobuf:"varint,7,opt,name=TargetPort,proto3" json:"TargetPort,omitempty"`
}

func (x *ListInterceptsResponse_ListEntry) Reset() {
	*x = ListInterceptsResponse_ListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterceptsResponse_ListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterceptsResponse_ListEntry) ProtoMessage() {}

func (x *ListInterceptsResponse_ListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterceptsResponse_ListEntry.ProtoReflect.Descriptor instead.
func (*ListInterceptsResponse_ListEntry) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListInterceptsResponse_ListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetPatterns() map[string]string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ListInterceptsResponse_ListEntry) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *ListInterceptsResponse_ListEntry) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

type AvailableInterceptsResponse_ListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Deployment string `protobuf:"bytes,2,opt,name=Deployment,proto3" json:"Deployment,omitempty"`
}

func (x *AvailableInterceptsResponse_ListEntry) Reset() {
	*x = AvailableInterceptsResponse_ListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edgectl_rpc_daemon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableInterceptsResponse_ListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableInterceptsResponse_ListEntry) ProtoMessage() {}

func (x *AvailableInterceptsResponse_ListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_edgectl_rpc_daemon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableInterceptsResponse_ListEntry.ProtoReflect.Descriptor instead.
func (*AvailableInterceptsResponse_ListEntry) Descriptor() ([]byte, []int) {
	return file_edgectl_rpc_daemon_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AvailableInterceptsResponse_ListEntry) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AvailableInterceptsResponse_ListEntry) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

var File_edgectl_rpc_daemon_proto protoreflect.FileDescriptor

var file_edgectl_rpc_daemon_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x74, 0x6c, 0x22, 0xce, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73,
	0x43, 0x49, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x43, 0x49, 0x12, 0x26,
	0x0a, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x74, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x42, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43,
	0x77, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x45, 0x6e, 0x76, 0x22, 0xd8, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x22,
	0xa8, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x39, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x56, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x6b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x74, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x4f, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x6b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x03, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x0f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x74, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x74, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0x5d,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xd8, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x74, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf8, 0x03,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x12, 0x53, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x74, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x1b, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x8f, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0b, 0x32, 0x9c, 0x05, 0x0a, 0x06, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1f,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x74, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x74, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x39, 0x0a, 0x1b, 0x69, 0x6f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x74, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0b, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x63, 0x74, 0x6c, 0x2f, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edgectl_rpc_daemon_proto_rawDescOnce sync.Once
	file_edgectl_rpc_daemon_proto_rawDescData = file_edgectl_rpc_daemon_proto_rawDesc
)

func file_edgectl_rpc_daemon_proto_rawDescGZIP() []byte {
	file_edgectl_rpc_daemon_proto_rawDescOnce.Do(func() {
		file_edgectl_rpc_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_edgectl_rpc_daemon_proto_rawDescData)
	})
	return file_edgectl_rpc_daemon_proto_rawDescData
}

var file_edgectl_rpc_daemon_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_edgectl_rpc_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_edgectl_rpc_daemon_proto_goTypes = []interface{}{
	(InterceptError)(0),                           // 0: edgectl.InterceptError
	(ConnectResponse_ErrType)(0),                  // 1: edgectl.ConnectResponse.ErrType
	(DisconnectResponse_ErrType)(0),               // 2: edgectl.DisconnectResponse.ErrType
	(PauseResponse_ErrType)(0),                    // 3: edgectl.PauseResponse.ErrType
	(ResumeResponse_ErrType)(0),                   // 4: edgectl.ResumeResponse.ErrType
	(StatusResponse_ErrType)(0),                   // 5: edgectl.StatusResponse.ErrType
	(*ConnectRequest)(nil),                        // 6: edgectl.ConnectRequest
	(*ConnectResponse)(nil),                       // 7: edgectl.ConnectResponse
	(*DisconnectResponse)(nil),                    // 8: edgectl.DisconnectResponse
	(*PauseResponse)(nil),                         // 9: edgectl.PauseResponse
	(*ResumeResponse)(nil),                        // 10: edgectl.ResumeResponse
	(*Empty)(nil),                                 // 11: edgectl.Empty
	(*VersionResponse)(nil),                       // 12: edgectl.VersionResponse
	(*StatusResponse)(nil),                        // 13: edgectl.StatusResponse
	(*InterceptRequest)(nil),                      // 14: edgectl.InterceptRequest
	(*RemoveInterceptRequest)(nil),                // 15: edgectl.RemoveInterceptRequest
	(*InterceptResponse)(nil),                     // 16: edgectl.InterceptResponse
	(*ListInterceptsResponse)(nil),                // 17: edgectl.ListInterceptsResponse
	(*AvailableInterceptsResponse)(nil),           // 18: edgectl.AvailableInterceptsResponse
	(*ConnectRequest_UserInfo)(nil),               // 19: edgectl.ConnectRequest.UserInfo
	(*StatusResponse_ClusterInfo)(nil),            // 20: edgectl.StatusResponse.ClusterInfo
	(*StatusResponse_InterceptsInfo)(nil),         // 21: edgectl.StatusResponse.InterceptsInfo
	nil,                                           // 22: edgectl.InterceptRequest.PatternsEntry
	(*ListInterceptsResponse_ListEntry)(nil),      // 23: edgectl.ListInterceptsResponse.ListEntry
	nil,                                           // 24: edgectl.ListInterceptsResponse.ListEntry.PatternsEntry
	(*AvailableInterceptsResponse_ListEntry)(nil), // 25: edgectl.AvailableInterceptsResponse.ListEntry
}
var file_edgectl_rpc_daemon_proto_depIdxs = []int32{
	19, // 0: edgectl.ConnectRequest.User:type_name -> edgectl.ConnectRequest.UserInfo
	1,  // 1: edgectl.ConnectResponse.Error:type_name -> edgectl.ConnectResponse.ErrType
	2,  // 2: edgectl.DisconnectResponse.Error:type_name -> edgectl.DisconnectResponse.ErrType
	3,  // 3: edgectl.PauseResponse.Error:type_name -> edgectl.PauseResponse.ErrType
	4,  // 4: edgectl.ResumeResponse.Error:type_name -> edgectl.ResumeResponse.ErrType
	5,  // 5: edgectl.StatusResponse.Error:type_name -> edgectl.StatusResponse.ErrType
	20, // 6: edgectl.StatusResponse.Cluster:type_name -> edgectl.StatusResponse.ClusterInfo
	21, // 7: edgectl.StatusResponse.Intercepts:type_name -> edgectl.StatusResponse.InterceptsInfo
	22, // 8: edgectl.InterceptRequest.Patterns:type_name -> edgectl.InterceptRequest.PatternsEntry
	0,  // 9: edgectl.InterceptResponse.Error:type_name -> edgectl.InterceptError
	0,  // 10: edgectl.ListInterceptsResponse.Error:type_name -> edgectl.InterceptError
	23, // 11: edgectl.ListInterceptsResponse.Intercepts:type_name -> edgectl.ListInterceptsResponse.ListEntry
	0,  // 12: edgectl.AvailableInterceptsResponse.Error:type_name -> edgectl.InterceptError
	25, // 13: edgectl.AvailableInterceptsResponse.Intercepts:type_name -> edgectl.AvailableInterceptsResponse.ListEntry
	24, // 14: edgectl.ListInterceptsResponse.ListEntry.Patterns:type_name -> edgectl.ListInterceptsResponse.ListEntry.PatternsEntry
	11, // 15: edgectl.Daemon.Version:input_type -> edgectl.Empty
	11, // 16: edgectl.Daemon.Status:input_type -> edgectl.Empty
	6,  // 17: edgectl.Daemon.Connect:input_type -> edgectl.ConnectRequest
	11, // 18: edgectl.Daemon.Disconnect:input_type -> edgectl.Empty
	14, // 19: edgectl.Daemon.AddIntercept:input_type -> edgectl.InterceptRequest
	15, // 20: edgectl.Daemon.RemoveIntercept:input_type -> edgectl.RemoveInterceptRequest
	11, // 21: edgectl.Daemon.AvailableIntercepts:input_type -> edgectl.Empty
	11, // 22: edgectl.Daemon.ListIntercepts:input_type -> edgectl.Empty
	11, // 23: edgectl.Daemon.Pause:input_type -> edgectl.Empty
	11, // 24: edgectl.Daemon.Resume:input_type -> edgectl.Empty
	11, // 25: edgectl.Daemon.Quit:input_type -> edgectl.Empty
	12, // 26: edgectl.Daemon.Version:output_type -> edgectl.VersionResponse
	13, // 27: edgectl.Daemon.Status:output_type -> edgectl.StatusResponse
	7,  // 28: edgectl.Daemon.Connect:output_type -> edgectl.ConnectResponse
	8,  // 29: edgectl.Daemon.Disconnect:output_type -> edgectl.DisconnectResponse
	16, // 30: edgectl.Daemon.AddIntercept:output_type -> edgectl.InterceptResponse
	16, // 31: edgectl.Daemon.RemoveIntercept:output_type -> edgectl.InterceptResponse
	18, // 32: edgectl.Daemon.AvailableIntercepts:output_type -> edgectl.AvailableInterceptsResponse
	17, // 33: edgectl.Daemon.ListIntercepts:output_type -> edgectl.ListInterceptsResponse
	9,  // 34: edgectl.Daemon.Pause:output_type -> edgectl.PauseResponse
	10, // 35: edgectl.Daemon.Resume:output_type -> edgectl.ResumeResponse
	11, // 36: edgectl.Daemon.Quit:output_type -> edgectl.Empty
	26, // [26:37] is the sub-list for method output_type
	15, // [15:26] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_edgectl_rpc_daemon_proto_init() }
func file_edgectl_rpc_daemon_proto_init() {
	if File_edgectl_rpc_daemon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_edgectl_rpc_daemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInterceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterceptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableInterceptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse_ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse_InterceptsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterceptsResponse_ListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edgectl_rpc_daemon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableInterceptsResponse_ListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edgectl_rpc_daemon_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_edgectl_rpc_daemon_proto_goTypes,
		DependencyIndexes: file_edgectl_rpc_daemon_proto_depIdxs,
		EnumInfos:         file_edgectl_rpc_daemon_proto_enumTypes,
		MessageInfos:      file_edgectl_rpc_daemon_proto_msgTypes,
	}.Build()
	File_edgectl_rpc_daemon_proto = out.File
	file_edgectl_rpc_daemon_proto_rawDesc = nil
	file_edgectl_rpc_daemon_proto_goTypes = nil
	file_edgectl_rpc_daemon_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaemonClient interface {
	// Returns version information from the Daemon
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Returns the current connectivity status
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// Connects the daemon to a cluster
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnects the daemon from a connected cluster
	Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisconnectResponse, error)
	// Adds a deployment intercept
	AddIntercept(ctx context.Context, in *InterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error)
	// Deactivates and removes an existent deployment intercept.
	RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error)
	// Returns a list of deployments available for intercept.
	AvailableIntercepts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableInterceptsResponse, error)
	// Returns a list of currently active intercepts.
	ListIntercepts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListInterceptsResponse, error)
	// Turns network overrides off.
	Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PauseResponse, error)
	// Turns network overrides back on (after using Pause)
	Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResumeResponse, error)
	// Quits (terminates) the service.
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) AddIntercept(ctx context.Context, in *InterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error) {
	out := new(InterceptResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/AddIntercept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error) {
	out := new(InterceptResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/RemoveIntercept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) AvailableIntercepts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableInterceptsResponse, error) {
	out := new(AvailableInterceptsResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/AvailableIntercepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ListIntercepts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListInterceptsResponse, error) {
	out := new(ListInterceptsResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/ListIntercepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResumeResponse, error) {
	out := new(ResumeResponse)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/edgectl.Daemon/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
type DaemonServer interface {
	// Returns version information from the Daemon
	Version(context.Context, *Empty) (*VersionResponse, error)
	// Returns the current connectivity status
	Status(context.Context, *Empty) (*StatusResponse, error)
	// Connects the daemon to a cluster
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnects the daemon from a connected cluster
	Disconnect(context.Context, *Empty) (*DisconnectResponse, error)
	// Adds a deployment intercept
	AddIntercept(context.Context, *InterceptRequest) (*InterceptResponse, error)
	// Deactivates and removes an existent deployment intercept.
	RemoveIntercept(context.Context, *RemoveInterceptRequest) (*InterceptResponse, error)
	// Returns a list of deployments available for intercept.
	AvailableIntercepts(context.Context, *Empty) (*AvailableInterceptsResponse, error)
	// Returns a list of currently active intercepts.
	ListIntercepts(context.Context, *Empty) (*ListInterceptsResponse, error)
	// Turns network overrides off.
	Pause(context.Context, *Empty) (*PauseResponse, error)
	// Turns network overrides back on (after using Pause)
	Resume(context.Context, *Empty) (*ResumeResponse, error)
	// Quits (terminates) the service.
	Quit(context.Context, *Empty) (*Empty, error)
}

// UnimplementedDaemonServer can be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (*UnimplementedDaemonServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedDaemonServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedDaemonServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDaemonServer) Disconnect(context.Context, *Empty) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedDaemonServer) AddIntercept(context.Context, *InterceptRequest) (*InterceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntercept not implemented")
}
func (*UnimplementedDaemonServer) RemoveIntercept(context.Context, *RemoveInterceptRequest) (*InterceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntercept not implemented")
}
func (*UnimplementedDaemonServer) AvailableIntercepts(context.Context, *Empty) (*AvailableInterceptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableIntercepts not implemented")
}
func (*UnimplementedDaemonServer) ListIntercepts(context.Context, *Empty) (*ListInterceptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntercepts not implemented")
}
func (*UnimplementedDaemonServer) Pause(context.Context, *Empty) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedDaemonServer) Resume(context.Context, *Empty) (*ResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (*UnimplementedDaemonServer) Quit(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}

func RegisterDaemonServer(s *grpc.Server, srv DaemonServer) {
	s.RegisterService(&_Daemon_serviceDesc, srv)
}

func _Daemon_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Disconnect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_AddIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).AddIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/AddIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).AddIntercept(ctx, req.(*InterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_RemoveIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).RemoveIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/RemoveIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).RemoveIntercept(ctx, req.(*RemoveInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_AvailableIntercepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).AvailableIntercepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/AvailableIntercepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).AvailableIntercepts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ListIntercepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ListIntercepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/ListIntercepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ListIntercepts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Pause(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Resume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgectl.Daemon/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Daemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgectl.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Daemon_Version_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Daemon_Status_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Daemon_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Daemon_Disconnect_Handler,
		},
		{
			MethodName: "AddIntercept",
			Handler:    _Daemon_AddIntercept_Handler,
		},
		{
			MethodName: "RemoveIntercept",
			Handler:    _Daemon_RemoveIntercept_Handler,
		},
		{
			MethodName: "AvailableIntercepts",
			Handler:    _Daemon_AvailableIntercepts_Handler,
		},
		{
			MethodName: "ListIntercepts",
			Handler:    _Daemon_ListIntercepts_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Daemon_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Daemon_Resume_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Daemon_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edgectl/rpc/daemon.proto",
}
