// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/type/matcher/v3alpha/regex.proto

package envoy_type_matcher_v3alpha

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A regex matcher designed for safety when used with untrusted input.
type RegexMatcher struct {
	// Types that are valid to be assigned to EngineType:
	//	*RegexMatcher_GoogleRe2
	EngineType isRegexMatcher_EngineType `protobuf_oneof:"engine_type"`
	// The regex match string. The string must be supported by the configured engine.
	Regex                string   `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegexMatcher) Reset()         { *m = RegexMatcher{} }
func (m *RegexMatcher) String() string { return proto.CompactTextString(m) }
func (*RegexMatcher) ProtoMessage()    {}
func (*RegexMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_638a74106cbc8ba6, []int{0}
}
func (m *RegexMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegexMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegexMatcher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegexMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegexMatcher.Merge(m, src)
}
func (m *RegexMatcher) XXX_Size() int {
	return m.Size()
}
func (m *RegexMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_RegexMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_RegexMatcher proto.InternalMessageInfo

type isRegexMatcher_EngineType interface {
	isRegexMatcher_EngineType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegexMatcher_GoogleRe2 struct {
	GoogleRe2 *RegexMatcher_GoogleRE2 `protobuf:"bytes,1,opt,name=google_re2,json=googleRe2,proto3,oneof"`
}

func (*RegexMatcher_GoogleRe2) isRegexMatcher_EngineType() {}

func (m *RegexMatcher) GetEngineType() isRegexMatcher_EngineType {
	if m != nil {
		return m.EngineType
	}
	return nil
}

func (m *RegexMatcher) GetGoogleRe2() *RegexMatcher_GoogleRE2 {
	if x, ok := m.GetEngineType().(*RegexMatcher_GoogleRe2); ok {
		return x.GoogleRe2
	}
	return nil
}

func (m *RegexMatcher) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RegexMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RegexMatcher_GoogleRe2)(nil),
	}
}

// Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex string must adhere to
// the documented `syntax <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed
// to complete execution in linear time as well as limit the amount of memory used.
type RegexMatcher_GoogleRE2 struct {
	// This field controls the RE2 "program size" which is a rough estimate of how complex a
	// compiled regex is to evaluate. A regex that has a program size greater than the configured
	// value will fail to compile. In this case, the configured max program size can be increased
	// or the regex can be simplified. If not specified, the default is 100.
	MaxProgramSize       *types.UInt32Value `protobuf:"bytes,1,opt,name=max_program_size,json=maxProgramSize,proto3" json:"max_program_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RegexMatcher_GoogleRE2) Reset()         { *m = RegexMatcher_GoogleRE2{} }
func (m *RegexMatcher_GoogleRE2) String() string { return proto.CompactTextString(m) }
func (*RegexMatcher_GoogleRE2) ProtoMessage()    {}
func (*RegexMatcher_GoogleRE2) Descriptor() ([]byte, []int) {
	return fileDescriptor_638a74106cbc8ba6, []int{0, 0}
}
func (m *RegexMatcher_GoogleRE2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegexMatcher_GoogleRE2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegexMatcher_GoogleRE2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegexMatcher_GoogleRE2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegexMatcher_GoogleRE2.Merge(m, src)
}
func (m *RegexMatcher_GoogleRE2) XXX_Size() int {
	return m.Size()
}
func (m *RegexMatcher_GoogleRE2) XXX_DiscardUnknown() {
	xxx_messageInfo_RegexMatcher_GoogleRE2.DiscardUnknown(m)
}

var xxx_messageInfo_RegexMatcher_GoogleRE2 proto.InternalMessageInfo

func (m *RegexMatcher_GoogleRE2) GetMaxProgramSize() *types.UInt32Value {
	if m != nil {
		return m.MaxProgramSize
	}
	return nil
}

func init() {
	proto.RegisterType((*RegexMatcher)(nil), "envoy.type.matcher.v3alpha.RegexMatcher")
	proto.RegisterType((*RegexMatcher_GoogleRE2)(nil), "envoy.type.matcher.v3alpha.RegexMatcher.GoogleRE2")
}

func init() {
	proto.RegisterFile("envoy/type/matcher/v3alpha/regex.proto", fileDescriptor_638a74106cbc8ba6)
}

var fileDescriptor_638a74106cbc8ba6 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0xbd, 0xad, 0x15, 0x32, 0x15, 0x29, 0x41, 0xb0, 0x04, 0x89, 0xc5, 0x85, 0x74, 0x35,
	0x03, 0xe9, 0x1b, 0x04, 0x7f, 0x17, 0x42, 0x99, 0xa2, 0xdb, 0x30, 0xd5, 0x6b, 0x1a, 0x48, 0x32,
	0xc3, 0x34, 0xad, 0x69, 0x1f, 0xc1, 0x27, 0x12, 0x57, 0x5d, 0xba, 0xf4, 0x11, 0xa4, 0xbb, 0x3e,
	0x83, 0x1b, 0xc9, 0x4c, 0x2a, 0x6e, 0x74, 0x17, 0x32, 0xdf, 0x39, 0xe7, 0x7e, 0xe4, 0x0c, 0xf3,
	0xb9, 0x5c, 0xb0, 0x62, 0xa1, 0x90, 0x65, 0xa2, 0x78, 0x98, 0xa0, 0x66, 0xf3, 0x81, 0x48, 0xd5,
	0x44, 0x30, 0x8d, 0x31, 0x96, 0x54, 0x69, 0x59, 0x48, 0xd7, 0x33, 0x1c, 0xad, 0x38, 0x5a, 0x73,
	0xb4, 0xe6, 0x3c, 0x3f, 0x96, 0x32, 0x4e, 0x91, 0x19, 0x72, 0x3c, 0x7b, 0x62, 0xcf, 0x5a, 0x28,
	0x85, 0x7a, 0x6a, 0xb3, 0xde, 0xd1, 0x5c, 0xa4, 0xc9, 0xa3, 0x28, 0x90, 0x6d, 0x3f, 0xec, 0xc3,
	0xe9, 0x17, 0x90, 0x7d, 0x5e, 0x8d, 0xdc, 0xda, 0x46, 0x37, 0x22, 0xc4, 0x76, 0x45, 0x1a, 0x83,
	0x2e, 0xf4, 0xa0, 0xdf, 0x0e, 0x02, 0xfa, 0xf7, 0x34, 0xfd, 0x9d, 0xa6, 0x57, 0x26, 0xca, 0x2f,
	0x82, 0x90, 0xbc, 0x6d, 0x56, 0xcd, 0xd6, 0x0b, 0x34, 0x3a, 0x70, 0xbd, 0xc3, 0x1d, 0xdb, 0xc9,
	0x31, 0x70, 0x4f, 0x48, 0xcb, 0x58, 0x75, 0x1b, 0x3d, 0xe8, 0x3b, 0xa1, 0x53, 0x71, 0xbb, 0xba,
	0xd1, 0x03, 0x6e, 0xff, 0x7b, 0x23, 0xe2, 0xfc, 0xd4, 0xb8, 0x97, 0xa4, 0x93, 0x89, 0x32, 0x52,
	0x5a, 0xc6, 0x5a, 0x64, 0xd1, 0x34, 0x59, 0x62, 0x7d, 0xd4, 0x31, 0xb5, 0x9d, 0x74, 0xeb, 0x4c,
	0xef, 0x6e, 0xf2, 0x62, 0x10, 0xdc, 0x8b, 0x74, 0x86, 0xfc, 0x20, 0x13, 0xe5, 0xd0, 0x86, 0x46,
	0xc9, 0x12, 0xc3, 0x43, 0xd2, 0xc6, 0x3c, 0x4e, 0x72, 0x8c, 0x2a, 0x09, 0xb7, 0xf5, 0xba, 0x59,
	0x35, 0x21, 0x3c, 0x7f, 0x5f, 0xfb, 0xf0, 0xb1, 0xf6, 0xe1, 0x73, 0xed, 0x03, 0xe9, 0x27, 0xd2,
	0x8a, 0x2a, 0x2d, 0xcb, 0xc5, 0x3f, 0xce, 0x21, 0x31, 0xd2, 0xc3, 0x6a, 0x78, 0x08, 0xe3, 0x3d,
	0x73, 0xc1, 0xe0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x00, 0x13, 0x0b, 0xc7, 0xc9, 0x01, 0x00, 0x00,
}

func (m *RegexMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegexMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegexMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Regex) > 0 {
		i -= len(m.Regex)
		copy(dAtA[i:], m.Regex)
		i = encodeVarintRegex(dAtA, i, uint64(len(m.Regex)))
		i--
		dAtA[i] = 0x12
	}
	if m.EngineType != nil {
		{
			size := m.EngineType.Size()
			i -= size
			if _, err := m.EngineType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegexMatcher_GoogleRe2) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *RegexMatcher_GoogleRe2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GoogleRe2 != nil {
		{
			size, err := m.GoogleRe2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegex(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RegexMatcher_GoogleRE2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegexMatcher_GoogleRE2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegexMatcher_GoogleRE2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxProgramSize != nil {
		{
			size, err := m.MaxProgramSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegex(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegex(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegexMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EngineType != nil {
		n += m.EngineType.Size()
	}
	l = len(m.Regex)
	if l > 0 {
		n += 1 + l + sovRegex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegexMatcher_GoogleRe2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoogleRe2 != nil {
		l = m.GoogleRe2.Size()
		n += 1 + l + sovRegex(uint64(l))
	}
	return n
}
func (m *RegexMatcher_GoogleRE2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxProgramSize != nil {
		l = m.MaxProgramSize.Size()
		n += 1 + l + sovRegex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegex(x uint64) (n int) {
	return sovRegex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegexMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegexMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegexMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleRe2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegexMatcher_GoogleRE2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EngineType = &RegexMatcher_GoogleRe2{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegex
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegexMatcher_GoogleRE2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleRE2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleRE2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProgramSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxProgramSize == nil {
				m.MaxProgramSize = &types.UInt32Value{}
			}
			if err := m.MaxProgramSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegex
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegex
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRegex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRegex
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegex   = fmt.Errorf("proto: integer overflow")
)
