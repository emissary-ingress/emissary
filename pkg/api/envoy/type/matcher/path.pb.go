// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/type/matcher/path.proto

package envoy_type_matcher

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies the way to match a path on HTTP request.
type PathMatcher struct {
	// Types that are valid to be assigned to Rule:
	//	*PathMatcher_Path
	Rule                 isPathMatcher_Rule `protobuf_oneof:"rule"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PathMatcher) Reset()         { *m = PathMatcher{} }
func (m *PathMatcher) String() string { return proto.CompactTextString(m) }
func (*PathMatcher) ProtoMessage()    {}
func (*PathMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec7ed88adc90b4e, []int{0}
}
func (m *PathMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathMatcher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PathMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathMatcher.Merge(m, src)
}
func (m *PathMatcher) XXX_Size() int {
	return m.Size()
}
func (m *PathMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_PathMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_PathMatcher proto.InternalMessageInfo

type isPathMatcher_Rule interface {
	isPathMatcher_Rule()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PathMatcher_Path struct {
	Path *StringMatcher `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
}

func (*PathMatcher_Path) isPathMatcher_Rule() {}

func (m *PathMatcher) GetRule() isPathMatcher_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *PathMatcher) GetPath() *StringMatcher {
	if x, ok := m.GetRule().(*PathMatcher_Path); ok {
		return x.Path
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PathMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PathMatcher_Path)(nil),
	}
}

func init() {
	proto.RegisterType((*PathMatcher)(nil), "envoy.type.matcher.PathMatcher")
}

func init() { proto.RegisterFile("envoy/type/matcher/path.proto", fileDescriptor_bec7ed88adc90b4e) }

var fileDescriptor_bec7ed88adc90b4e = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0xcd, 0x2b, 0xcb,
	0xaf, 0xd4, 0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0xcf, 0x4d, 0x2c, 0x49, 0xce, 0x48, 0x2d, 0xd2, 0x2f,
	0x48, 0x2c, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x02, 0x4b, 0xeb, 0x81, 0xa4,
	0xf5, 0xa0, 0xd2, 0x52, 0xf2, 0x58, 0xb4, 0x14, 0x97, 0x14, 0x65, 0xe6, 0xa5, 0x43, 0x34, 0x49,
	0xc9, 0x96, 0xa6, 0x14, 0x24, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7,
	0x15, 0xeb, 0x17, 0x97, 0x24, 0x96, 0x94, 0x16, 0x43, 0xa5, 0xc5, 0xcb, 0x12, 0x73, 0x32, 0x53,
	0x12, 0x4b, 0x52, 0xf5, 0x61, 0x0c, 0x88, 0x84, 0x52, 0x2c, 0x17, 0x77, 0x40, 0x62, 0x49, 0x86,
	0x2f, 0xc4, 0x4c, 0x21, 0x47, 0x2e, 0x16, 0x90, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d,
	0x14, 0xf5, 0x30, 0x9d, 0xa2, 0x17, 0x0c, 0xb6, 0x16, 0xaa, 0xc1, 0x89, 0xe3, 0x97, 0x13, 0x6b,
	0x17, 0x23, 0x93, 0x00, 0xa3, 0x07, 0x43, 0x10, 0x58, 0xab, 0x13, 0x37, 0x17, 0x4b, 0x51, 0x69,
	0x4e, 0xaa, 0x10, 0xf3, 0x0f, 0x27, 0x46, 0x27, 0xe7, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0x57, 0xc3, 0x89, 0x8b, 0x6c, 0x4c, 0x02, 0x0c, 0x5c, 0x0a,
	0x99, 0xf9, 0x10, 0x93, 0x0b, 0x8a, 0xf2, 0x2b, 0x2a, 0xb1, 0x58, 0xe2, 0xc4, 0x09, 0x72, 0x54,
	0x00, 0xc8, 0x85, 0x01, 0x8c, 0x49, 0x6c, 0x60, 0xa7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0xf7, 0x5b, 0x26, 0x38, 0x01, 0x00, 0x00,
}

func (m *PathMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rule != nil {
		{
			size := m.Rule.Size()
			i -= size
			if _, err := m.Rule.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PathMatcher_Path) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathMatcher_Path) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPath(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintPath(dAtA []byte, offset int, v uint64) int {
	offset -= sovPath(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PathMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		n += m.Rule.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PathMatcher_Path) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovPath(uint64(l))
	}
	return n
}

func sovPath(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPath(x uint64) (n int) {
	return sovPath(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PathMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPath
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringMatcher{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PathMatcher_Path{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPath
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPath(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPath
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPath
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPath
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPath
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPath        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPath          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPath = fmt.Errorf("proto: unexpected end of group")
)
