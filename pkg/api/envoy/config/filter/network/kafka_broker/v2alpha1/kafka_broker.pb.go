// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.26.1
// source: envoy/config/filter/network/kafka_broker/v2alpha1/kafka_broker.proto

package v2alpha1

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KafkaBroker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The prefix to use when emitting :ref:`statistics <config_network_filters_kafka_broker_stats>`.
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Set to true if broker filter should attempt to serialize the received responses from the
	// upstream broker instead of passing received bytes as is.
	// Disabled by default.
	ForceResponseRewrite bool `protobuf:"varint,2,opt,name=force_response_rewrite,json=forceResponseRewrite,proto3" json:"force_response_rewrite,omitempty"`
	// Optional broker address rewrite specification.
	// Allows the broker filter to rewrite Kafka responses so that all connections established by
	// the Kafka clients point to Envoy.
	// This allows Kafka cluster not to configure its 'advertised.listeners' property
	// (as the necessary re-pointing will be done by this filter).
	// This collection of rules should cover all brokers in the cluster that is being proxied,
	// otherwise some nodes' addresses might leak to the downstream clients.
	//
	// Types that are assignable to BrokerAddressRewriteSpec:
	//
	//	*KafkaBroker_IdBasedBrokerAddressRewriteSpec
	BrokerAddressRewriteSpec isKafkaBroker_BrokerAddressRewriteSpec `protobuf_oneof:"broker_address_rewrite_spec"`
}

func (x *KafkaBroker) Reset() {
	*x = KafkaBroker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaBroker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaBroker) ProtoMessage() {}

func (x *KafkaBroker) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaBroker.ProtoReflect.Descriptor instead.
func (*KafkaBroker) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaBroker) GetStatPrefix() string {
	if x != nil {
		return x.StatPrefix
	}
	return ""
}

func (x *KafkaBroker) GetForceResponseRewrite() bool {
	if x != nil {
		return x.ForceResponseRewrite
	}
	return false
}

func (m *KafkaBroker) GetBrokerAddressRewriteSpec() isKafkaBroker_BrokerAddressRewriteSpec {
	if m != nil {
		return m.BrokerAddressRewriteSpec
	}
	return nil
}

func (x *KafkaBroker) GetIdBasedBrokerAddressRewriteSpec() *IdBasedBrokerRewriteSpec {
	if x, ok := x.GetBrokerAddressRewriteSpec().(*KafkaBroker_IdBasedBrokerAddressRewriteSpec); ok {
		return x.IdBasedBrokerAddressRewriteSpec
	}
	return nil
}

type isKafkaBroker_BrokerAddressRewriteSpec interface {
	isKafkaBroker_BrokerAddressRewriteSpec()
}

type KafkaBroker_IdBasedBrokerAddressRewriteSpec struct {
	// Broker address rewrite rules that match by broker ID.
	IdBasedBrokerAddressRewriteSpec *IdBasedBrokerRewriteSpec `protobuf:"bytes,3,opt,name=id_based_broker_address_rewrite_spec,json=idBasedBrokerAddressRewriteSpec,proto3,oneof"`
}

func (*KafkaBroker_IdBasedBrokerAddressRewriteSpec) isKafkaBroker_BrokerAddressRewriteSpec() {}

// Collection of rules matching by broker ID.
type IdBasedBrokerRewriteSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*IdBasedBrokerRewriteRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *IdBasedBrokerRewriteSpec) Reset() {
	*x = IdBasedBrokerRewriteSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdBasedBrokerRewriteSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdBasedBrokerRewriteSpec) ProtoMessage() {}

func (x *IdBasedBrokerRewriteSpec) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdBasedBrokerRewriteSpec.ProtoReflect.Descriptor instead.
func (*IdBasedBrokerRewriteSpec) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescGZIP(), []int{1}
}

func (x *IdBasedBrokerRewriteSpec) GetRules() []*IdBasedBrokerRewriteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Defines a rule to rewrite broker address data.
type IdBasedBrokerRewriteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Broker ID to match.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The host value to use (resembling the host part of Kafka's advertised.listeners).
	// The value should point to the Envoy (not Kafka) listener, so that all client traffic goes
	// through Envoy.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The port value to use (resembling the port part of Kafka's advertised.listeners).
	// The value should point to the Envoy (not Kafka) listener, so that all client traffic goes
	// through Envoy.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *IdBasedBrokerRewriteRule) Reset() {
	*x = IdBasedBrokerRewriteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdBasedBrokerRewriteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdBasedBrokerRewriteRule) ProtoMessage() {}

func (x *IdBasedBrokerRewriteRule) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdBasedBrokerRewriteRule.ProtoReflect.Descriptor instead.
func (*IdBasedBrokerRewriteRule) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescGZIP(), []int{2}
}

func (x *IdBasedBrokerRewriteRule) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdBasedBrokerRewriteRule) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *IdBasedBrokerRewriteRule) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto protoreflect.FileDescriptor

var file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDesc = []byte{
	0x0a, 0x44, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e, 0x75, 0x64, 0x70, 0x61, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x9c, 0x01, 0x0a, 0x24, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x1f, 0x69, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x1d, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22,
	0x7d, 0x0a, 0x18, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x61, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x6f,
	0x0a, 0x18, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0xff, 0xff, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0xef, 0x01, 0xf2, 0x98, 0xfe, 0x8f, 0x05, 0x32, 0x12, 0x30, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02,
	0x10, 0x01, 0x0a, 0x3f, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x10, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67,
	0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescOnce sync.Once
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescData = file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDesc
)

func file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescData)
	})
	return file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDescData
}

var file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_goTypes = []interface{}{
	(*KafkaBroker)(nil),              // 0: envoy.config.filter.network.kafka_broker.v2alpha1.KafkaBroker
	(*IdBasedBrokerRewriteSpec)(nil), // 1: envoy.config.filter.network.kafka_broker.v2alpha1.IdBasedBrokerRewriteSpec
	(*IdBasedBrokerRewriteRule)(nil), // 2: envoy.config.filter.network.kafka_broker.v2alpha1.IdBasedBrokerRewriteRule
}
var file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_depIdxs = []int32{
	1, // 0: envoy.config.filter.network.kafka_broker.v2alpha1.KafkaBroker.id_based_broker_address_rewrite_spec:type_name -> envoy.config.filter.network.kafka_broker.v2alpha1.IdBasedBrokerRewriteSpec
	2, // 1: envoy.config.filter.network.kafka_broker.v2alpha1.IdBasedBrokerRewriteSpec.rules:type_name -> envoy.config.filter.network.kafka_broker.v2alpha1.IdBasedBrokerRewriteRule
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_init() }
func file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_init() {
	if File_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaBroker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdBasedBrokerRewriteSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdBasedBrokerRewriteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*KafkaBroker_IdBasedBrokerAddressRewriteSpec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto = out.File
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_rawDesc = nil
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_goTypes = nil
	file_envoy_config_filter_network_kafka_broker_v2alpha1_kafka_broker_proto_depIdxs = nil
}
