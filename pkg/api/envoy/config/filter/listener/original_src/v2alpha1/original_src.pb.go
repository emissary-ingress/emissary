// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/listener/original_src/v2alpha1/original_src.proto

package envoy_config_filter_listener_original_src_v2alpha1

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The Original Src filter binds upstream connections to the original source address determined
// for the connection. This address could come from something like the Proxy Protocol filter, or it
// could come from trusted http headers.
type OriginalSrc struct {
	// Whether to bind the port to the one used in the original downstream connection.
	// [#not-implemented-hide:]
	BindPort bool `protobuf:"varint,1,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// Sets the SO_MARK option on the upstream connection's socket to the provided value. Used to
	// ensure that non-local addresses may be routed back through envoy when binding to the original
	// source address. The option will not be applied if the mark is 0.
	Mark                 uint32   `protobuf:"varint,2,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OriginalSrc) Reset()         { *m = OriginalSrc{} }
func (m *OriginalSrc) String() string { return proto.CompactTextString(m) }
func (*OriginalSrc) ProtoMessage()    {}
func (*OriginalSrc) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e4bd40556a6972, []int{0}
}
func (m *OriginalSrc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginalSrc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OriginalSrc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OriginalSrc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginalSrc.Merge(m, src)
}
func (m *OriginalSrc) XXX_Size() int {
	return m.Size()
}
func (m *OriginalSrc) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginalSrc.DiscardUnknown(m)
}

var xxx_messageInfo_OriginalSrc proto.InternalMessageInfo

func (m *OriginalSrc) GetBindPort() bool {
	if m != nil {
		return m.BindPort
	}
	return false
}

func (m *OriginalSrc) GetMark() uint32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func init() {
	proto.RegisterType((*OriginalSrc)(nil), "envoy.config.filter.listener.original_src.v2alpha1.OriginalSrc")
}

func init() {
	proto.RegisterFile("envoy/config/filter/listener/original_src/v2alpha1/original_src.proto", fileDescriptor_19e4bd40556a6972)
}

var fileDescriptor_19e4bd40556a6972 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4d, 0x4a, 0x03, 0x41,
	0x10, 0x85, 0xed, 0xa0, 0x21, 0x8e, 0x08, 0x61, 0x36, 0x86, 0x88, 0x43, 0x70, 0x95, 0x55, 0x37,
	0x49, 0xf6, 0x22, 0x01, 0xd7, 0x86, 0x78, 0x80, 0x50, 0xc9, 0x74, 0xc6, 0xc6, 0x49, 0xd7, 0x50,
	0x5d, 0x19, 0x92, 0x9d, 0x37, 0x70, 0xeb, 0xde, 0x5b, 0x78, 0x82, 0x2c, 0xf5, 0x06, 0x32, 0x47,
	0xf0, 0x00, 0x22, 0xf3, 0x07, 0x06, 0x71, 0xe1, 0xae, 0xa8, 0xc7, 0xfb, 0xba, 0xbf, 0xf2, 0x6e,
	0xb4, 0x4d, 0x71, 0xab, 0x16, 0x68, 0x97, 0x26, 0x52, 0x4b, 0x13, 0xb3, 0x26, 0x15, 0x1b, 0xc7,
	0xda, 0x6a, 0x52, 0x48, 0x26, 0x32, 0x16, 0xe2, 0x99, 0xa3, 0x85, 0x4a, 0x87, 0x10, 0x27, 0xf7,
	0x30, 0xd8, 0xdb, 0xca, 0x84, 0x90, 0xd1, 0x1f, 0x16, 0x18, 0x59, 0x62, 0x64, 0x89, 0x91, 0x35,
	0x46, 0xee, 0x15, 0x6a, 0x4c, 0x37, 0x58, 0x87, 0x09, 0x28, 0xb0, 0x16, 0x19, 0xd8, 0xa0, 0x75,
	0x6a, 0x65, 0x22, 0x02, 0xd6, 0x25, 0xb3, 0x7b, 0xf1, 0x2b, 0x77, 0x0c, 0xbc, 0x76, 0x55, 0x7c,
	0x96, 0x42, 0x6c, 0x42, 0x60, 0xad, 0xea, 0xa1, 0x0c, 0x2e, 0xaf, 0xbc, 0x93, 0xdb, 0xea, 0xc1,
	0x3b, 0x5a, 0xf8, 0xe7, 0xde, 0xf1, 0xdc, 0xd8, 0x70, 0x96, 0x20, 0x71, 0x47, 0xf4, 0x44, 0xbf,
	0x35, 0x6d, 0xe5, 0x8b, 0x09, 0x12, 0xfb, 0xbe, 0x77, 0xb8, 0x02, 0x7a, 0xe8, 0x34, 0x7a, 0xa2,
	0x7f, 0x3a, 0x2d, 0xe6, 0xf1, 0x8b, 0xd8, 0x65, 0x81, 0x78, 0xcb, 0x02, 0xf1, 0x91, 0x05, 0xe2,
	0xf3, 0xf9, 0xeb, 0xe9, 0x68, 0xe4, 0x0f, 0x4a, 0x41, 0xbd, 0x61, 0x6d, 0x5d, 0xfe, 0x99, 0x4a,
	0xd2, 0xfd, 0x65, 0x39, 0x7a, 0x7d, 0xdc, 0xbd, 0x37, 0x1b, 0xed, 0x03, 0xef, 0xda, 0xa0, 0x2c,
	0xda, 0x09, 0xe1, 0x66, 0x2b, 0xff, 0x7f, 0xa9, 0x71, 0xfb, 0x87, 0xcf, 0x24, 0x77, 0x9c, 0x88,
	0x79, 0xb3, 0x90, 0x1d, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xde, 0x20, 0xe7, 0xc1, 0x01,
	0x00, 0x00,
}

func (m *OriginalSrc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginalSrc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginalSrc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mark != 0 {
		i = encodeVarintOriginalSrc(dAtA, i, uint64(m.Mark))
		i--
		dAtA[i] = 0x10
	}
	if m.BindPort {
		i--
		if m.BindPort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOriginalSrc(dAtA []byte, offset int, v uint64) int {
	offset -= sovOriginalSrc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OriginalSrc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BindPort {
		n += 2
	}
	if m.Mark != 0 {
		n += 1 + sovOriginalSrc(uint64(m.Mark))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOriginalSrc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOriginalSrc(x uint64) (n int) {
	return sovOriginalSrc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OriginalSrc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOriginalSrc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginalSrc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginalSrc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOriginalSrc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindPort = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			m.Mark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOriginalSrc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mark |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOriginalSrc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOriginalSrc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOriginalSrc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOriginalSrc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOriginalSrc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOriginalSrc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOriginalSrc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOriginalSrc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOriginalSrc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOriginalSrc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOriginalSrc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOriginalSrc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOriginalSrc = fmt.Errorf("proto: unexpected end of group")
)
