// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/compressor/v2/compressor.proto

package envoy_config_filter_http_compressor_v2

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	core "github.com/datawire/ambassador/pkg/api/envoy/api/v2/core"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// [#next-free-field: 6]
type Compressor struct {
	// Minimum response length, in bytes, which will trigger compression. The default value is 30.
	ContentLength *types.UInt32Value `protobuf:"bytes,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// Set of strings that allows specifying which mime-types yield compression; e.g.,
	// application/json, text/html, etc. When this field is not defined, compression will be applied
	// to the following mime-types: "application/javascript", "application/json",
	// "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
	// and their synonyms.
	ContentType []string `protobuf:"bytes,2,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// If true, disables compression when the response contains an etag header. When it is false, the
	// filter will preserve weak etags and remove the ones that require strong validation.
	DisableOnEtagHeader bool `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	// .. attention:
	//
	//    To avoid interfering with other compression filters in the same chain use this option in
	//    the filter closest to the upstream.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	// Runtime flag that controls whether the filter is enabled or not. If set to false, the
	// filter will operate as a pass-through filter. If not specified, defaults to enabled.
	RuntimeEnabled       *core.RuntimeFeatureFlag `protobuf:"bytes,5,opt,name=runtime_enabled,json=runtimeEnabled,proto3" json:"runtime_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Compressor) Reset()         { *m = Compressor{} }
func (m *Compressor) String() string { return proto.CompactTextString(m) }
func (*Compressor) ProtoMessage()    {}
func (*Compressor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ef4714f5f18ab25, []int{0}
}
func (m *Compressor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compressor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compressor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compressor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compressor.Merge(m, src)
}
func (m *Compressor) XXX_Size() int {
	return m.Size()
}
func (m *Compressor) XXX_DiscardUnknown() {
	xxx_messageInfo_Compressor.DiscardUnknown(m)
}

var xxx_messageInfo_Compressor proto.InternalMessageInfo

func (m *Compressor) GetContentLength() *types.UInt32Value {
	if m != nil {
		return m.ContentLength
	}
	return nil
}

func (m *Compressor) GetContentType() []string {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *Compressor) GetDisableOnEtagHeader() bool {
	if m != nil {
		return m.DisableOnEtagHeader
	}
	return false
}

func (m *Compressor) GetRemoveAcceptEncodingHeader() bool {
	if m != nil {
		return m.RemoveAcceptEncodingHeader
	}
	return false
}

func (m *Compressor) GetRuntimeEnabled() *core.RuntimeFeatureFlag {
	if m != nil {
		return m.RuntimeEnabled
	}
	return nil
}

func init() {
	proto.RegisterType((*Compressor)(nil), "envoy.config.filter.http.compressor.v2.Compressor")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/compressor/v2/compressor.proto", fileDescriptor_8ef4714f5f18ab25)
}

var fileDescriptor_8ef4714f5f18ab25 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x6a, 0xd4, 0x40,
	0x18, 0x85, 0xcd, 0xd6, 0x16, 0x9d, 0x6a, 0x2b, 0x11, 0x64, 0x59, 0xda, 0x65, 0x15, 0x94, 0x05,
	0x71, 0x06, 0xb2, 0x82, 0xd7, 0x6d, 0xd9, 0xa2, 0x20, 0x5a, 0x82, 0x7a, 0x1b, 0xfe, 0x4d, 0xfe,
	0xcd, 0x0e, 0x64, 0x67, 0x86, 0x99, 0x3f, 0xb1, 0x7b, 0xe7, 0x1b, 0xe8, 0xa5, 0xcf, 0x22, 0x3e,
	0x40, 0x2f, 0xf5, 0x0d, 0x64, 0x1f, 0xc1, 0x07, 0x10, 0x49, 0x66, 0xb6, 0x16, 0x7a, 0xe3, 0xe5,
	0xe4, 0x9c, 0xef, 0xcc, 0x49, 0x4e, 0xd8, 0x0b, 0x54, 0x8d, 0x5e, 0x89, 0x5c, 0xab, 0xb9, 0x2c,
	0xc5, 0x5c, 0x56, 0x84, 0x56, 0x2c, 0x88, 0x8c, 0xc8, 0xf5, 0xd2, 0x58, 0x74, 0x4e, 0x5b, 0xd1,
	0x24, 0x57, 0x4e, 0xdc, 0x58, 0x4d, 0x3a, 0x7e, 0xd2, 0x81, 0xdc, 0x83, 0xdc, 0x83, 0xbc, 0x05,
	0xf9, 0x15, 0x6b, 0x93, 0x0c, 0x0e, 0xfc, 0x05, 0x60, 0xa4, 0x8f, 0xb1, 0x28, 0x66, 0xe0, 0xd0,
	0xa7, 0x0c, 0x86, 0xa5, 0xd6, 0x65, 0x85, 0xa2, 0x3b, 0xcd, 0xea, 0xb9, 0xf8, 0x68, 0xc1, 0x18,
	0xb4, 0x6e, 0xa3, 0xd7, 0x85, 0x01, 0x01, 0x4a, 0x69, 0x02, 0x92, 0x5a, 0x39, 0xb1, 0x94, 0xa5,
	0x05, 0xda, 0xf0, 0x87, 0xd7, 0x74, 0x47, 0x40, 0x75, 0xc0, 0x1f, 0x7d, 0xef, 0x31, 0x76, 0x72,
	0x59, 0x27, 0x3e, 0x61, 0x7b, 0xb9, 0x56, 0x84, 0x8a, 0xb2, 0x0a, 0x55, 0x49, 0x8b, 0x7e, 0x34,
	0x8a, 0xc6, 0xbb, 0xc9, 0x01, 0xf7, 0x35, 0xf8, 0xa6, 0x06, 0x7f, 0xff, 0x4a, 0xd1, 0x24, 0xf9,
	0x00, 0x55, 0x8d, 0xe9, 0xdd, 0xc0, 0xbc, 0xee, 0x90, 0xf8, 0x21, 0xbb, 0xb3, 0x09, 0xa1, 0x95,
	0xc1, 0x7e, 0x6f, 0xb4, 0x35, 0xbe, 0x9d, 0xee, 0x86, 0x67, 0xef, 0x56, 0x06, 0xe3, 0x09, 0x7b,
	0x50, 0x48, 0x07, 0xb3, 0x0a, 0x33, 0xad, 0x32, 0x24, 0x28, 0xb3, 0x05, 0x42, 0x81, 0xb6, 0xbf,
	0x35, 0x8a, 0xc6, 0xb7, 0xd2, 0xfb, 0x41, 0x7d, 0xab, 0xa6, 0x04, 0xe5, 0xcb, 0x4e, 0x8a, 0x8f,
	0xd8, 0xa1, 0xc5, 0xa5, 0x6e, 0x30, 0x83, 0x3c, 0x47, 0x43, 0x19, 0xaa, 0x5c, 0x17, 0x52, 0x5d,
	0xb2, 0x37, 0x3b, 0x76, 0xe0, 0x4d, 0x47, 0x9d, 0x67, 0x1a, 0x2c, 0x21, 0xe2, 0x0d, 0xdb, 0xb7,
	0xb5, 0x22, 0xb9, 0xc4, 0x0c, 0x55, 0x7b, 0x41, 0xd1, 0xdf, 0xee, 0x5e, 0xf0, 0x31, 0xf7, 0x6b,
	0x81, 0x91, 0xbc, 0x49, 0x78, 0xbb, 0x02, 0x4f, 0xbd, 0xf3, 0x14, 0x81, 0x6a, 0x8b, 0xa7, 0x15,
	0x94, 0xe9, 0x5e, 0xa0, 0xa7, 0x1e, 0x3e, 0xfe, 0x12, 0x5d, 0xac, 0x87, 0xd1, 0x8f, 0xf5, 0x30,
	0xfa, 0xb5, 0x1e, 0x46, 0xbf, 0xbf, 0xfe, 0xf9, 0xbc, 0xfd, 0x2c, 0x7e, 0xea, 0xa3, 0xf0, 0x9c,
	0x50, 0xb9, 0xf6, 0x93, 0x87, 0xf1, 0xdd, 0xf5, 0xf5, 0x27, 0xdf, 0x3e, 0x5d, 0xfc, 0xdc, 0xe9,
	0xdd, 0xbb, 0xc1, 0x9e, 0x4b, 0xed, 0x2b, 0x18, 0xab, 0xcf, 0x57, 0xfc, 0xff, 0xfe, 0x9d, 0xe3,
	0xfd, 0x7f, 0xdb, 0x9d, 0xb5, 0xcb, 0x9c, 0x45, 0xb3, 0x9d, 0x6e, 0xa2, 0xc9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0x60, 0x1d, 0x03, 0xb8, 0x02, 0x00, 0x00,
}

func (m *Compressor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compressor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Compressor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RuntimeEnabled != nil {
		{
			size, err := m.RuntimeEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCompressor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RemoveAcceptEncodingHeader {
		i--
		if m.RemoveAcceptEncodingHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DisableOnEtagHeader {
		i--
		if m.DisableOnEtagHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContentType) > 0 {
		for iNdEx := len(m.ContentType) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentType[iNdEx])
			copy(dAtA[i:], m.ContentType[iNdEx])
			i = encodeVarintCompressor(dAtA, i, uint64(len(m.ContentType[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContentLength != nil {
		{
			size, err := m.ContentLength.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCompressor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompressor(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompressor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Compressor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContentLength != nil {
		l = m.ContentLength.Size()
		n += 1 + l + sovCompressor(uint64(l))
	}
	if len(m.ContentType) > 0 {
		for _, s := range m.ContentType {
			l = len(s)
			n += 1 + l + sovCompressor(uint64(l))
		}
	}
	if m.DisableOnEtagHeader {
		n += 2
	}
	if m.RemoveAcceptEncodingHeader {
		n += 2
	}
	if m.RuntimeEnabled != nil {
		l = m.RuntimeEnabled.Size()
		n += 1 + l + sovCompressor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompressor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompressor(x uint64) (n int) {
	return sovCompressor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Compressor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompressor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compressor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compressor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompressor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompressor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContentLength == nil {
				m.ContentLength = &types.UInt32Value{}
			}
			if err := m.ContentLength.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompressor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompressor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = append(m.ContentType, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOnEtagHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableOnEtagHeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAcceptEncodingHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveAcceptEncodingHeader = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompressor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompressor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeEnabled == nil {
				m.RuntimeEnabled = &core.RuntimeFeatureFlag{}
			}
			if err := m.RuntimeEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompressor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompressor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompressor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompressor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompressor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompressor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompressor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompressor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompressor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompressor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompressor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompressor = fmt.Errorf("proto: unexpected end of group")
)
