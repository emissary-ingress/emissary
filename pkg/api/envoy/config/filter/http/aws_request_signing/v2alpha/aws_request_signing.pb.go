// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/aws_request_signing/v2alpha/aws_request_signing.proto

package envoy_config_filter_http_aws_request_signing_v2alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Top level configuration for the AWS request signing filter.
type AwsRequestSigning struct {
	// The `service namespace
	// <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
	// of the HTTP endpoint.
	//
	// Example: s3
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the HTTP
	// endpoint.
	//
	// Example: us-west-2
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Indicates that before signing headers, the host header will be swapped with
	// this value. If not set or empty, the original host header value
	// will be used and no rewrite will happen.
	//
	// Note: this rewrite affects both signing and host header forwarding. However, this
	// option shouldn't be used with
	// :ref:`HCM host rewrite <envoy_api_field_route.RouteAction.host_rewrite>` given that the
	// value set here would be used for signing whereas the value set in the HCM would be used
	// for host header forwarding which is not the desired outcome.
	HostRewrite          string   `protobuf:"bytes,3,opt,name=host_rewrite,json=hostRewrite,proto3" json:"host_rewrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwsRequestSigning) Reset()         { *m = AwsRequestSigning{} }
func (m *AwsRequestSigning) String() string { return proto.CompactTextString(m) }
func (*AwsRequestSigning) ProtoMessage()    {}
func (*AwsRequestSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebccdae368886250, []int{0}
}
func (m *AwsRequestSigning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsRequestSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsRequestSigning.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsRequestSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsRequestSigning.Merge(m, src)
}
func (m *AwsRequestSigning) XXX_Size() int {
	return m.Size()
}
func (m *AwsRequestSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsRequestSigning.DiscardUnknown(m)
}

var xxx_messageInfo_AwsRequestSigning proto.InternalMessageInfo

func (m *AwsRequestSigning) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AwsRequestSigning) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AwsRequestSigning) GetHostRewrite() string {
	if m != nil {
		return m.HostRewrite
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsRequestSigning)(nil), "envoy.config.filter.http.aws_request_signing.v2alpha.AwsRequestSigning")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/aws_request_signing/v2alpha/aws_request_signing.proto", fileDescriptor_ebccdae368886250)
}

var fileDescriptor_ebccdae368886250 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x31, 0x4e, 0x32, 0x41,
	0x14, 0xc7, 0xbf, 0xe1, 0x53, 0x8c, 0x0b, 0x85, 0x6e, 0xa1, 0x84, 0xc4, 0x15, 0xad, 0x8c, 0xc5,
	0x4c, 0x22, 0xc6, 0xde, 0x3d, 0x00, 0x21, 0xeb, 0x01, 0x36, 0x4f, 0x78, 0x2c, 0x93, 0xc0, 0xcc,
	0x3a, 0xf3, 0x58, 0xa0, 0x33, 0xf1, 0x00, 0xb6, 0x9e, 0xc2, 0x03, 0x78, 0x02, 0x4a, 0xbd, 0x81,
	0xe1, 0x08, 0x96, 0x16, 0xc6, 0xec, 0xce, 0x52, 0x18, 0x88, 0x85, 0xdd, 0xe4, 0xff, 0x7f, 0xf3,
	0x7b, 0x79, 0x3f, 0xaf, 0x83, 0x2a, 0xd3, 0x73, 0xd1, 0xd3, 0x6a, 0x20, 0x13, 0x31, 0x90, 0x23,
	0x42, 0x23, 0x86, 0x44, 0xa9, 0x80, 0xa9, 0x8d, 0x0d, 0xde, 0x4d, 0xd0, 0x52, 0x6c, 0x65, 0xa2,
	0xa4, 0x4a, 0x44, 0x76, 0x01, 0xa3, 0x74, 0x08, 0x9b, 0x3a, 0x9e, 0x1a, 0x4d, 0xda, 0xbf, 0x2c,
	0x78, 0xdc, 0xf1, 0xb8, 0xe3, 0xf1, 0x9c, 0xc7, 0x37, 0xfd, 0x29, 0x79, 0xcd, 0x60, 0xd2, 0x4f,
	0x41, 0x80, 0x52, 0x9a, 0x80, 0xa4, 0x56, 0x56, 0x8c, 0x65, 0x62, 0x80, 0xd0, 0x51, 0x9b, 0x47,
	0x6b, 0xbd, 0x25, 0xa0, 0x89, 0x2d, 0xeb, 0xc3, 0x0c, 0x46, 0xb2, 0x0f, 0x84, 0x62, 0xf5, 0x70,
	0xc5, 0xe9, 0x03, 0xf3, 0xf6, 0xaf, 0xa7, 0x36, 0x72, 0x6b, 0x6f, 0xdc, 0x56, 0xff, 0xdc, 0xab,
	0x5b, 0x34, 0x99, 0xec, 0x61, 0xac, 0x60, 0x8c, 0x0d, 0xd6, 0x62, 0x67, 0xbb, 0xe1, 0xce, 0x67,
	0xb8, 0x65, 0x2a, 0x2d, 0x16, 0xd5, 0xca, 0xb2, 0x03, 0x63, 0xf4, 0x8f, 0xbd, 0xaa, 0xc1, 0x44,
	0x6a, 0xd5, 0xa8, 0xfc, 0x9c, 0x2a, 0x63, 0xff, 0xc4, 0xab, 0x0f, 0xb5, 0xa5, 0xd8, 0xe0, 0xd4,
	0x48, 0xc2, 0xc6, 0xff, 0x7c, 0x2c, 0xaa, 0xe5, 0x59, 0xe4, 0xa2, 0xf0, 0x99, 0x2d, 0x96, 0x01,
	0x7b, 0x5d, 0x06, 0xec, 0x7d, 0x19, 0xb0, 0x8f, 0xa7, 0xaf, 0xc7, 0xed, 0xab, 0x95, 0x28, 0x9c,
	0x11, 0x2a, 0x9b, 0x9f, 0x54, 0xca, 0xb2, 0xbf, 0xd8, 0x6a, 0xbf, 0xdc, 0x2f, 0xde, 0xaa, 0x95,
	0xbd, 0x7f, 0x5e, 0x28, 0x35, 0x2f, 0x00, 0xa9, 0xd1, 0xb3, 0x39, 0xff, 0x8b, 0xf4, 0xf0, 0x60,
	0xcd, 0x4c, 0x37, 0x97, 0xd6, 0x65, 0xb7, 0xd5, 0xc2, 0x5e, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x98, 0x55, 0x7b, 0xc1, 0x1d, 0x02, 0x00, 0x00,
}

func (m *AwsRequestSigning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsRequestSigning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwsRequestSigning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HostRewrite) > 0 {
		i -= len(m.HostRewrite)
		copy(dAtA[i:], m.HostRewrite)
		i = encodeVarintAwsRequestSigning(dAtA, i, uint64(len(m.HostRewrite)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintAwsRequestSigning(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintAwsRequestSigning(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAwsRequestSigning(dAtA []byte, offset int, v uint64) int {
	offset -= sovAwsRequestSigning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AwsRequestSigning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovAwsRequestSigning(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovAwsRequestSigning(uint64(l))
	}
	l = len(m.HostRewrite)
	if l > 0 {
		n += 1 + l + sovAwsRequestSigning(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAwsRequestSigning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAwsRequestSigning(x uint64) (n int) {
	return sovAwsRequestSigning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AwsRequestSigning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsRequestSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsRequestSigning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsRequestSigning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsRequestSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsRequestSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsRequestSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewrite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsRequestSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsRequestSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsRequestSigning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsRequestSigning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsRequestSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsRequestSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsRequestSigning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAwsRequestSigning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAwsRequestSigning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAwsRequestSigning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsRequestSigning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAwsRequestSigning = fmt.Errorf("proto: unexpected end of group")
)
