// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/grpc_credential/v3/aws_iam.proto

package envoy_config_grpc_credential_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AwsIamConfig struct {
	// The `service namespace
	// <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
	// of the Grpc endpoint.
	//
	// Example: appmesh
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the Grpc
	// endpoint. If unspecified, the extension will use the value in the ``AWS_REGION`` environment
	// variable.
	//
	// Example: us-west-2
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwsIamConfig) Reset()         { *m = AwsIamConfig{} }
func (m *AwsIamConfig) String() string { return proto.CompactTextString(m) }
func (*AwsIamConfig) ProtoMessage()    {}
func (*AwsIamConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_abde562deca54778, []int{0}
}
func (m *AwsIamConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsIamConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwsIamConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwsIamConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsIamConfig.Merge(m, src)
}
func (m *AwsIamConfig) XXX_Size() int {
	return m.Size()
}
func (m *AwsIamConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsIamConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AwsIamConfig proto.InternalMessageInfo

func (m *AwsIamConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AwsIamConfig) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsIamConfig)(nil), "envoy.config.grpc_credential.v3.AwsIamConfig")
}

func init() {
	proto.RegisterFile("envoy/config/grpc_credential/v3/aws_iam.proto", fileDescriptor_abde562deca54778)
}

var fileDescriptor_abde562deca54778 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0xcd, 0x2b, 0xcb,
	0xaf, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0x4f, 0x2e,
	0x4a, 0x4d, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcc, 0xd1, 0x2f, 0x33, 0xd6, 0x4f, 0x2c, 0x2f, 0x8e,
	0xcf, 0x4c, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x07, 0x2b, 0xd7, 0x83, 0x28,
	0xd7, 0x43, 0x53, 0xae, 0x57, 0x66, 0x2c, 0x25, 0x5b, 0x9a, 0x52, 0x90, 0xa8, 0x9f, 0x98, 0x97,
	0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0xac, 0x5f, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x0c,
	0xd1, 0x2f, 0xa5, 0x88, 0x21, 0x5d, 0x96, 0x5a, 0x54, 0x9c, 0x99, 0x9f, 0x97, 0x99, 0x97, 0x0e,
	0x55, 0x22, 0x5e, 0x96, 0x98, 0x93, 0x99, 0x92, 0x58, 0x92, 0xaa, 0x0f, 0x63, 0x40, 0x24, 0x94,
	0x7a, 0x18, 0xb9, 0x78, 0x1c, 0xcb, 0x8b, 0x3d, 0x13, 0x73, 0x9d, 0xc1, 0xd6, 0x0b, 0x69, 0x71,
	0xf1, 0x14, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0xc6, 0xe7, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x3a, 0xb1, 0xff, 0x72, 0x62, 0x29, 0x62, 0x52, 0x60, 0x0c, 0xe2, 0x86, 0x4a,
	0xfa, 0x25, 0xe6, 0xa6, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0xa5, 0xa6, 0x67, 0xe6, 0xe7, 0x49, 0x30,
	0x81, 0x54, 0x05, 0x41, 0x79, 0x56, 0x16, 0xb3, 0x8e, 0x76, 0xc8, 0x19, 0x73, 0x19, 0xe2, 0xf7,
	0x97, 0x51, 0x62, 0x4e, 0x41, 0x46, 0xa2, 0x1e, 0xb2, 0xed, 0x4e, 0x41, 0x27, 0x1e, 0xc9, 0x31,
	0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0xae, 0x86, 0x13, 0x17, 0xd9, 0x98, 0x04,
	0x18, 0xb9, 0x74, 0x33, 0xf3, 0xf5, 0xc0, 0x66, 0x15, 0x14, 0xe5, 0x57, 0x54, 0xea, 0x11, 0x08,
	0x2e, 0x27, 0x6e, 0x88, 0x91, 0x01, 0x20, 0x0f, 0x06, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x6a, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xce, 0x9f, 0x9c, 0x96, 0x01, 0x00, 0x00,
}

func (m *AwsIamConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsIamConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwsIamConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintAwsIam(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintAwsIam(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAwsIam(dAtA []byte, offset int, v uint64) int {
	offset -= sovAwsIam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AwsIamConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovAwsIam(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovAwsIam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAwsIam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAwsIam(x uint64) (n int) {
	return sovAwsIam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AwsIamConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsIam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsIamConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsIamConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsIam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsIam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsIam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsIam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsIam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAwsIam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsIam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsIam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAwsIam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsIam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsIam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsIam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsIam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAwsIam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAwsIam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAwsIam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAwsIam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsIam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAwsIam = fmt.Errorf("proto: unexpected end of group")
)
