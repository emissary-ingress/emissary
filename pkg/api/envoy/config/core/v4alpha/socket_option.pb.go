// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/core/v4alpha/socket_option.proto

package envoy_config_core_v4alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SocketOption_SocketState int32

const (
	// Socket options are applied after socket creation but before binding the socket to a port
	SocketOption_STATE_PREBIND SocketOption_SocketState = 0
	// Socket options are applied after binding the socket to a port but before calling listen()
	SocketOption_STATE_BOUND SocketOption_SocketState = 1
	// Socket options are applied after calling listen()
	SocketOption_STATE_LISTENING SocketOption_SocketState = 2
)

var SocketOption_SocketState_name = map[int32]string{
	0: "STATE_PREBIND",
	1: "STATE_BOUND",
	2: "STATE_LISTENING",
}

var SocketOption_SocketState_value = map[string]int32{
	"STATE_PREBIND":   0,
	"STATE_BOUND":     1,
	"STATE_LISTENING": 2,
}

func (x SocketOption_SocketState) String() string {
	return proto.EnumName(SocketOption_SocketState_name, int32(x))
}

func (SocketOption_SocketState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1e5251252359b22c, []int{0, 0}
}

// Generic socket option message. This would be used to set socket options that
// might not exist in upstream kernels or precompiled Envoy binaries.
// [#next-free-field: 7]
type SocketOption struct {
	// An optional name to give this socket option for debugging, etc.
	// Uniqueness is not required and no special meaning is assumed.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
	Level int64 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	// The numeric name as passed to setsockopt
	Name int64 `protobuf:"varint,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*SocketOption_IntValue
	//	*SocketOption_BufValue
	Value isSocketOption_Value `protobuf_oneof:"value"`
	// The state in which the option will be applied. When used in BindConfig
	// STATE_PREBIND is currently the only valid value.
	State                SocketOption_SocketState `protobuf:"varint,6,opt,name=state,proto3,enum=envoy.config.core.v4alpha.SocketOption_SocketState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SocketOption) Reset()         { *m = SocketOption{} }
func (m *SocketOption) String() string { return proto.CompactTextString(m) }
func (*SocketOption) ProtoMessage()    {}
func (*SocketOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e5251252359b22c, []int{0}
}
func (m *SocketOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocketOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocketOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocketOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketOption.Merge(m, src)
}
func (m *SocketOption) XXX_Size() int {
	return m.Size()
}
func (m *SocketOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketOption.DiscardUnknown(m)
}

var xxx_messageInfo_SocketOption proto.InternalMessageInfo

type isSocketOption_Value interface {
	isSocketOption_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SocketOption_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof" json:"int_value,omitempty"`
}
type SocketOption_BufValue struct {
	BufValue []byte `protobuf:"bytes,5,opt,name=buf_value,json=bufValue,proto3,oneof" json:"buf_value,omitempty"`
}

func (*SocketOption_IntValue) isSocketOption_Value() {}
func (*SocketOption_BufValue) isSocketOption_Value() {}

func (m *SocketOption) GetValue() isSocketOption_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SocketOption) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SocketOption) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SocketOption) GetName() int64 {
	if m != nil {
		return m.Name
	}
	return 0
}

func (m *SocketOption) GetIntValue() int64 {
	if x, ok := m.GetValue().(*SocketOption_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *SocketOption) GetBufValue() []byte {
	if x, ok := m.GetValue().(*SocketOption_BufValue); ok {
		return x.BufValue
	}
	return nil
}

func (m *SocketOption) GetState() SocketOption_SocketState {
	if m != nil {
		return m.State
	}
	return SocketOption_STATE_PREBIND
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SocketOption) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SocketOption_IntValue)(nil),
		(*SocketOption_BufValue)(nil),
	}
}

func init() {
	proto.RegisterEnum("envoy.config.core.v4alpha.SocketOption_SocketState", SocketOption_SocketState_name, SocketOption_SocketState_value)
	proto.RegisterType((*SocketOption)(nil), "envoy.config.core.v4alpha.SocketOption")
}

func init() {
	proto.RegisterFile("envoy/config/core/v4alpha/socket_option.proto", fileDescriptor_1e5251252359b22c)
}

var fileDescriptor_1e5251252359b22c = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x8f, 0xd3, 0x30,
	0x1c, 0xc5, 0xcf, 0xe9, 0xa5, 0xba, 0x73, 0x0b, 0x97, 0x33, 0x48, 0x84, 0x93, 0x2e, 0xca, 0x1d,
	0x03, 0x59, 0x48, 0x24, 0xca, 0xc4, 0x86, 0x75, 0x05, 0x2a, 0xa1, 0x5c, 0x95, 0x14, 0xd6, 0xca,
	0x4d, 0xdd, 0x62, 0x11, 0xec, 0x28, 0x71, 0x22, 0xba, 0x21, 0x26, 0x3e, 0x03, 0x1f, 0x85, 0x1d,
	0xa9, 0x23, 0x7c, 0x03, 0xd4, 0x9d, 0x1d, 0x31, 0x21, 0xdb, 0x41, 0x0a, 0x82, 0x6e, 0xfe, 0xbf,
	0xdf, 0xfb, 0x5b, 0xef, 0xd9, 0xf0, 0x01, 0xe5, 0x8d, 0xd8, 0x44, 0x99, 0xe0, 0x2b, 0xb6, 0x8e,
	0x32, 0x51, 0xd2, 0xa8, 0x79, 0x44, 0xf2, 0xe2, 0x35, 0x89, 0x2a, 0x91, 0xbd, 0xa1, 0x72, 0x2e,
	0x0a, 0xc9, 0x04, 0x0f, 0x8b, 0x52, 0x48, 0x81, 0xee, 0x6a, 0x7b, 0x68, 0xec, 0xa1, 0xb2, 0x87,
	0xad, 0xfd, 0xec, 0xbc, 0x5e, 0x16, 0x24, 0x22, 0x9c, 0x0b, 0x49, 0xd4, 0x46, 0x15, 0x55, 0x92,
	0xc8, 0xba, 0x32, 0x9b, 0x67, 0x17, 0xff, 0xe0, 0x86, 0x96, 0x15, 0x13, 0x9c, 0xf1, 0x75, 0x6b,
	0xb9, 0xd3, 0x90, 0x9c, 0x2d, 0x89, 0xa4, 0xd1, 0x9f, 0x83, 0x01, 0x97, 0x3f, 0x2c, 0x38, 0x4c,
	0x75, 0x9a, 0x6b, 0x1d, 0x06, 0xf9, 0x70, 0xb0, 0xa4, 0x55, 0x56, 0x32, 0x3d, 0xba, 0xc0, 0x07,
	0xc1, 0x71, 0xd2, 0x95, 0xd0, 0x6d, 0x68, 0xe7, 0xb4, 0xa1, 0xb9, 0x6b, 0xf9, 0x20, 0xe8, 0x25,
	0x66, 0x40, 0x08, 0x1e, 0x72, 0xf2, 0x96, 0xba, 0x3d, 0x2d, 0xea, 0x33, 0x3a, 0x87, 0xc7, 0x8c,
	0xcb, 0x79, 0x43, 0xf2, 0x9a, 0xba, 0x87, 0x0a, 0x3c, 0x3f, 0x48, 0x8e, 0x18, 0x97, 0xaf, 0x94,
	0xa2, 0xf0, 0xa2, 0x5e, 0xb5, 0xd8, 0xf6, 0x41, 0x30, 0x54, 0x78, 0x51, 0xaf, 0x0c, 0x4e, 0xa1,
	0xad, 0x6a, 0x52, 0xb7, 0xef, 0x83, 0xe0, 0xe6, 0xc3, 0x51, 0xb8, 0xf7, 0x81, 0xc2, 0x6e, 0x83,
	0x76, 0x48, 0xd5, 0x2a, 0x3e, 0xfa, 0x85, 0xed, 0x0f, 0xc0, 0x72, 0x40, 0x62, 0xee, 0xba, 0x7c,
	0x0a, 0x07, 0x1d, 0x8e, 0x4e, 0xe1, 0x8d, 0x74, 0xf6, 0x64, 0x36, 0x9e, 0x4f, 0x93, 0x31, 0x9e,
	0xc4, 0x57, 0xce, 0x01, 0x3a, 0x81, 0x03, 0x23, 0xe1, 0xeb, 0x97, 0xf1, 0x95, 0x03, 0xd0, 0x2d,
	0x78, 0x62, 0x84, 0x17, 0x93, 0x74, 0x36, 0x8e, 0x27, 0xf1, 0x33, 0xc7, 0x7a, 0x1c, 0x7c, 0xfa,
	0xf2, 0xd1, 0xbb, 0x07, 0x2f, 0xfe, 0x93, 0x69, 0xf4, 0x57, 0x1c, 0x3c, 0x84, 0xb6, 0x6e, 0x88,
	0x7a, 0x3f, 0x31, 0xc0, 0xc9, 0x76, 0xe7, 0x81, 0xaf, 0x3b, 0x0f, 0x7c, 0xdf, 0x79, 0xe0, 0xf3,
	0xfb, 0xed, 0xb7, 0xbe, 0xe5, 0x58, 0xf0, 0x3e, 0x13, 0xa6, 0x5d, 0x51, 0x8a, 0x77, 0x9b, 0xfd,
	0x45, 0xf1, 0x69, 0xf7, 0xea, 0xa9, 0xfa, 0xc1, 0x29, 0x58, 0xf4, 0xf5, 0x57, 0x8e, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xb0, 0x9d, 0x01, 0x1b, 0x71, 0x02, 0x00, 0x00,
}

func (m *SocketOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocketOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocketOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintSocketOption(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Name != 0 {
		i = encodeVarintSocketOption(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintSocketOption(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSocketOption(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SocketOption_IntValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocketOption_IntValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSocketOption(dAtA, i, uint64(m.IntValue))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *SocketOption_BufValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocketOption_BufValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BufValue != nil {
		i -= len(m.BufValue)
		copy(dAtA[i:], m.BufValue)
		i = encodeVarintSocketOption(dAtA, i, uint64(len(m.BufValue)))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintSocketOption(dAtA []byte, offset int, v uint64) int {
	offset -= sovSocketOption(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SocketOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSocketOption(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovSocketOption(uint64(m.Level))
	}
	if m.Name != 0 {
		n += 1 + sovSocketOption(uint64(m.Name))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.State != 0 {
		n += 1 + sovSocketOption(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocketOption_IntValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSocketOption(uint64(m.IntValue))
	return n
}
func (m *SocketOption_BufValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BufValue != nil {
		l = len(m.BufValue)
		n += 1 + l + sovSocketOption(uint64(l))
	}
	return n
}

func sovSocketOption(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSocketOption(x uint64) (n int) {
	return sovSocketOption(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SocketOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocketOption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocketOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocketOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocketOption
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocketOption
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &SocketOption_IntValue{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSocketOption
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSocketOption
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &SocketOption_BufValue{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SocketOption_SocketState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocketOption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocketOption
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocketOption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSocketOption(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSocketOption
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocketOption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSocketOption
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSocketOption
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSocketOption
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSocketOption        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSocketOption          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSocketOption = fmt.Errorf("proto: unexpected end of group")
)
