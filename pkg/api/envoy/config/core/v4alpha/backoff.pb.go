// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/core/v4alpha/backoff.proto

package envoy_config_core_v4alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configuration defining a jittered exponential back off strategy.
type BackoffStrategy struct {
	// The base interval to be used for the next back off computation. It should
	// be greater than zero and less than or equal to :ref:`max_interval
	// <envoy_api_field_config.core.v4alpha.BackoffStrategy.max_interval>`.
	BaseInterval *types.Duration `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	// Specifies the maximum interval between retries. This parameter is optional,
	// but must be greater than or equal to the :ref:`base_interval
	// <envoy_api_field_config.core.v4alpha.BackoffStrategy.base_interval>` if set. The default
	// is 10 times the :ref:`base_interval
	// <envoy_api_field_config.core.v4alpha.BackoffStrategy.base_interval>`.
	MaxInterval          *types.Duration `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BackoffStrategy) Reset()         { *m = BackoffStrategy{} }
func (m *BackoffStrategy) String() string { return proto.CompactTextString(m) }
func (*BackoffStrategy) ProtoMessage()    {}
func (*BackoffStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_23c98b4a4fab7963, []int{0}
}
func (m *BackoffStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackoffStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackoffStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackoffStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackoffStrategy.Merge(m, src)
}
func (m *BackoffStrategy) XXX_Size() int {
	return m.Size()
}
func (m *BackoffStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_BackoffStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_BackoffStrategy proto.InternalMessageInfo

func (m *BackoffStrategy) GetBaseInterval() *types.Duration {
	if m != nil {
		return m.BaseInterval
	}
	return nil
}

func (m *BackoffStrategy) GetMaxInterval() *types.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func init() {
	proto.RegisterType((*BackoffStrategy)(nil), "envoy.config.core.v4alpha.BackoffStrategy")
}

func init() {
	proto.RegisterFile("envoy/config/core/v4alpha/backoff.proto", fileDescriptor_23c98b4a4fab7963)
}

var fileDescriptor_23c98b4a4fab7963 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0xcd, 0x2b, 0xcb,
	0xaf, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x33,
	0x49, 0xcc, 0x29, 0xc8, 0x48, 0xd4, 0x4f, 0x4a, 0x4c, 0xce, 0xce, 0x4f, 0x4b, 0xd3, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x92, 0x04, 0x2b, 0xd4, 0x83, 0x28, 0xd4, 0x03, 0x29, 0xd4, 0x83, 0x2a,
	0x94, 0x92, 0x4b, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x2b, 0x4c, 0x2a, 0x4d, 0xd3, 0x4f,
	0x29, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x83, 0x68, 0x95, 0x92, 0x2d, 0x4d, 0x29, 0x48, 0xd4,
	0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x01, 0x0b, 0x17, 0xeb, 0x17, 0x97, 0x24, 0x96, 0x94, 0x16, 0x43,
	0xa5, 0x15, 0x31, 0xa4, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x32, 0xf3, 0xd2, 0xa1, 0x4a,
	0xc4, 0xcb, 0x12, 0x73, 0x32, 0x53, 0x12, 0x4b, 0x52, 0xf5, 0x61, 0x0c, 0x88, 0x84, 0xd2, 0x35,
	0x46, 0x2e, 0x7e, 0x27, 0x88, 0x3b, 0x83, 0x4b, 0x8a, 0x12, 0x4b, 0x52, 0xd3, 0x2b, 0x85, 0xfc,
	0xb8, 0x78, 0x93, 0x12, 0x8b, 0x53, 0xe3, 0x33, 0xf3, 0x4a, 0x52, 0x8b, 0xca, 0x12, 0x73, 0x24,
	0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x24, 0xf5, 0x20, 0xce, 0xd4, 0x83, 0x39, 0x53, 0xcf, 0x05,
	0xea, 0x4c, 0x27, 0xbe, 0x5f, 0x4e, 0xdc, 0xab, 0x18, 0x39, 0x38, 0x18, 0x8d, 0x58, 0x04, 0x0e,
	0xb4, 0xd8, 0x06, 0xf1, 0x80, 0xf4, 0x7b, 0x42, 0xb5, 0x0b, 0xb9, 0x71, 0xf1, 0xe4, 0x26, 0x56,
	0x20, 0x8c, 0x63, 0x22, 0x64, 0x1c, 0xc7, 0x2f, 0x27, 0xd6, 0x55, 0x8c, 0x4c, 0x5a, 0x0c, 0x41,
	0xdc, 0xb9, 0x89, 0x15, 0x30, 0x73, 0xac, 0xb4, 0x67, 0x1d, 0xed, 0x90, 0x53, 0xe3, 0x52, 0xc1,
	0x12, 0x90, 0xc6, 0x7a, 0x68, 0x9e, 0x70, 0xf2, 0x3d, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39,
	0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x77, 0x35, 0x9c, 0xb8, 0xc8, 0xc6, 0x24, 0xc0, 0xc4, 0xa5, 0x9e,
	0x99, 0xaf, 0x07, 0xd6, 0x5e, 0x50, 0x94, 0x5f, 0x51, 0xa9, 0x87, 0x33, 0x4a, 0x9c, 0x78, 0xa0,
	0xe6, 0x05, 0x80, 0x1c, 0x17, 0xc0, 0x98, 0xc4, 0x06, 0x76, 0xa5, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0x1a, 0xf3, 0x88, 0xef, 0x01, 0x00, 0x00,
}

func (m *BackoffStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackoffStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackoffStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxInterval != nil {
		{
			size, err := m.MaxInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBackoff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseInterval != nil {
		{
			size, err := m.BaseInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBackoff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBackoff(dAtA []byte, offset int, v uint64) int {
	offset -= sovBackoff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BackoffStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInterval != nil {
		l = m.BaseInterval.Size()
		n += 1 + l + sovBackoff(uint64(l))
	}
	if m.MaxInterval != nil {
		l = m.MaxInterval.Size()
		n += 1 + l + sovBackoff(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBackoff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBackoff(x uint64) (n int) {
	return sovBackoff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BackoffStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackoff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackoffStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackoffStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackoff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackoff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackoff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInterval == nil {
				m.BaseInterval = &types.Duration{}
			}
			if err := m.BaseInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackoff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackoff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackoff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxInterval == nil {
				m.MaxInterval = &types.Duration{}
			}
			if err := m.MaxInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackoff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackoff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBackoff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackoff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackoff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackoff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackoff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBackoff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBackoff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBackoff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBackoff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackoff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBackoff = fmt.Errorf("proto: unexpected end of group")
)
