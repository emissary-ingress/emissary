// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/trace/v3/xray.proto

package envoy_config_trace_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/datawire/ambassador/pkg/api/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type XRayConfig struct {
	// The UDP endpoint of the X-Ray Daemon where the spans will be sent.
	// If this value is not set, the default value of 127.0.0.1:2000 will be used.
	DaemonEndpoint *v3.SocketAddress `protobuf:"bytes,1,opt,name=daemon_endpoint,json=daemonEndpoint,proto3" json:"daemon_endpoint,omitempty"`
	// The name of the X-Ray segment. By default this will be set to the cluster name.
	SegmentName string `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	// The location of a local custom sampling rules JSON file.
	// For an example of the sampling rules see:
	// `X-Ray SDK documentation
	// <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-configuration.html#xray-sdk-go-configuration-sampling>`_
	SamplingRuleManifest *v3.DataSource `protobuf:"bytes,3,opt,name=sampling_rule_manifest,json=samplingRuleManifest,proto3" json:"sampling_rule_manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *XRayConfig) Reset()         { *m = XRayConfig{} }
func (m *XRayConfig) String() string { return proto.CompactTextString(m) }
func (*XRayConfig) ProtoMessage()    {}
func (*XRayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d491b3510a2e630, []int{0}
}
func (m *XRayConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XRayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XRayConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XRayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XRayConfig.Merge(m, src)
}
func (m *XRayConfig) XXX_Size() int {
	return m.Size()
}
func (m *XRayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_XRayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_XRayConfig proto.InternalMessageInfo

func (m *XRayConfig) GetDaemonEndpoint() *v3.SocketAddress {
	if m != nil {
		return m.DaemonEndpoint
	}
	return nil
}

func (m *XRayConfig) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

func (m *XRayConfig) GetSamplingRuleManifest() *v3.DataSource {
	if m != nil {
		return m.SamplingRuleManifest
	}
	return nil
}

func init() {
	proto.RegisterType((*XRayConfig)(nil), "envoy.config.trace.v3.XRayConfig")
}

func init() { proto.RegisterFile("envoy/config/trace/v3/xray.proto", fileDescriptor_6d491b3510a2e630) }

var fileDescriptor_6d491b3510a2e630 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x49, 0x05, 0xa1, 0x53, 0x51, 0x08, 0xfe, 0x94, 0x2e, 0x62, 0xda, 0x22, 0x76, 0x21,
	0x13, 0x68, 0x76, 0x2e, 0x04, 0xab, 0xee, 0x54, 0x4a, 0x0a, 0xd2, 0x5d, 0xb8, 0x4d, 0x6e, 0xe3,
	0x60, 0x32, 0x13, 0x66, 0x26, 0xa1, 0x59, 0xbb, 0xf1, 0x19, 0x7c, 0x1f, 0xc1, 0xa5, 0x8f, 0x20,
	0x7d, 0x12, 0x69, 0x92, 0x22, 0x85, 0xec, 0x42, 0xe6, 0xfb, 0xe6, 0xdc, 0x7b, 0x86, 0xd8, 0xc8,
	0x73, 0x51, 0x38, 0x81, 0xe0, 0x4b, 0x16, 0x39, 0x5a, 0x42, 0x80, 0x4e, 0xee, 0x3a, 0x2b, 0x09,
	0x05, 0x4d, 0xa5, 0xd0, 0xc2, 0x3c, 0x29, 0x09, 0x5a, 0x11, 0xb4, 0x24, 0x68, 0xee, 0xf6, 0x06,
	0x3b, 0x62, 0x20, 0x64, 0xe9, 0x41, 0x18, 0x4a, 0x54, 0xaa, 0x52, 0x7b, 0xe7, 0x8d, 0xcc, 0x02,
	0x14, 0xd6, 0x40, 0x3f, 0x0b, 0x53, 0x70, 0x80, 0x73, 0xa1, 0x41, 0x33, 0xc1, 0x95, 0x93, 0xa3,
	0x54, 0x4c, 0x70, 0xc6, 0xa3, 0x1a, 0x39, 0xcb, 0x21, 0x66, 0x21, 0x68, 0x74, 0xb6, 0x1f, 0xd5,
	0xc1, 0xe0, 0xbd, 0x45, 0xc8, 0xdc, 0x83, 0xe2, 0xae, 0xbc, 0xdd, 0x7c, 0x24, 0x47, 0x21, 0x60,
	0x22, 0xb8, 0x8f, 0x3c, 0x4c, 0x05, 0xe3, 0xba, 0x6b, 0xd8, 0xc6, 0xa8, 0x33, 0x1e, 0xd2, 0x9d,
	0x05, 0x36, 0x53, 0xd0, 0xdc, 0xa5, 0x33, 0x11, 0xbc, 0xa1, 0xbe, 0xad, 0xe6, 0xf5, 0x0e, 0x2b,
	0xf7, 0xa1, 0x56, 0xcd, 0x3e, 0x39, 0x50, 0x18, 0x25, 0xc8, 0xb5, 0xcf, 0x21, 0xc1, 0x6e, 0xcb,
	0x36, 0x46, 0x6d, 0xaf, 0x53, 0xff, 0x7b, 0x86, 0x04, 0xcd, 0x17, 0x72, 0xaa, 0x20, 0x49, 0x63,
	0xc6, 0x23, 0x5f, 0x66, 0x31, 0xfa, 0x09, 0x70, 0xb6, 0x44, 0xa5, 0xbb, 0x7b, 0x65, 0xae, 0xdd,
	0x9c, 0x7b, 0x0f, 0x1a, 0x66, 0x22, 0x93, 0x01, 0x7a, 0xc7, 0x5b, 0xdf, 0xcb, 0x62, 0x7c, 0xaa,
	0xed, 0xeb, 0xab, 0xcf, 0xaf, 0x0f, 0xeb, 0x92, 0x5c, 0x34, 0xd5, 0x3e, 0x86, 0x38, 0x7d, 0x05,
	0xfa, 0xbf, 0xf6, 0xe4, 0xe6, 0x7b, 0x6d, 0x19, 0x3f, 0x6b, 0xcb, 0xf8, 0x5d, 0x5b, 0x06, 0x19,
	0x32, 0x51, 0xa5, 0xa6, 0x52, 0xac, 0x0a, 0xda, 0xf8, 0x72, 0x93, 0xf6, 0x5c, 0x42, 0x31, 0xdd,
	0x74, 0x38, 0x35, 0x16, 0xfb, 0x65, 0x99, 0xee, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x8e,
	0xa7, 0xeb, 0x08, 0x02, 0x00, 0x00,
}

func (m *XRayConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XRayConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XRayConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SamplingRuleManifest != nil {
		{
			size, err := m.SamplingRuleManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXray(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SegmentName) > 0 {
		i -= len(m.SegmentName)
		copy(dAtA[i:], m.SegmentName)
		i = encodeVarintXray(dAtA, i, uint64(len(m.SegmentName)))
		i--
		dAtA[i] = 0x12
	}
	if m.DaemonEndpoint != nil {
		{
			size, err := m.DaemonEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXray(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintXray(dAtA []byte, offset int, v uint64) int {
	offset -= sovXray(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *XRayConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DaemonEndpoint != nil {
		l = m.DaemonEndpoint.Size()
		n += 1 + l + sovXray(uint64(l))
	}
	l = len(m.SegmentName)
	if l > 0 {
		n += 1 + l + sovXray(uint64(l))
	}
	if m.SamplingRuleManifest != nil {
		l = m.SamplingRuleManifest.Size()
		n += 1 + l + sovXray(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovXray(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXray(x uint64) (n int) {
	return sovXray(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XRayConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXray
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XRayConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XRayConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaemonEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXray
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXray
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DaemonEndpoint == nil {
				m.DaemonEndpoint = &v3.SocketAddress{}
			}
			if err := m.DaemonEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXray
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXray
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRuleManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXray
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXray
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SamplingRuleManifest == nil {
				m.SamplingRuleManifest = &v3.DataSource{}
			}
			if err := m.SamplingRuleManifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXray(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXray
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthXray
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXray(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXray
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXray
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXray
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXray
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXray        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXray          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXray = fmt.Errorf("proto: unexpected end of group")
)
