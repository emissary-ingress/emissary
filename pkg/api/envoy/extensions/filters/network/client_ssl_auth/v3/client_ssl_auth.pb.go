// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/extensions/filters/network/client_ssl_auth/v3/client_ssl_auth.proto

package envoy_extensions_filters_network_client_ssl_auth_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/datawire/ambassador/pkg/api/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientSSLAuth struct {
	// The :ref:`cluster manager <arch_overview_cluster_manager>` cluster that runs
	// the authentication service. The filter will connect to the service every 60s to fetch the list
	// of principals. The service must support the expected :ref:`REST API
	// <config_network_filters_client_ssl_auth_rest_api>`.
	AuthApiCluster string `protobuf:"bytes,1,opt,name=auth_api_cluster,json=authApiCluster,proto3" json:"auth_api_cluster,omitempty"`
	// The prefix to use when emitting :ref:`statistics
	// <config_network_filters_client_ssl_auth_stats>`.
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Time in milliseconds between principal refreshes from the
	// authentication service. Default is 60000 (60s). The actual fetch time
	// will be this value plus a random jittered value between
	// 0-refresh_delay_ms milliseconds.
	RefreshDelay *types.Duration `protobuf:"bytes,3,opt,name=refresh_delay,json=refreshDelay,proto3" json:"refresh_delay,omitempty"`
	// An optional list of IP address and subnet masks that should be white
	// listed for access by the filter. If no list is provided, there is no
	// IP white list.
	IpWhiteList          []*v3.CidrRange `protobuf:"bytes,4,rep,name=ip_white_list,json=ipWhiteList,proto3" json:"ip_white_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ClientSSLAuth) Reset()         { *m = ClientSSLAuth{} }
func (m *ClientSSLAuth) String() string { return proto.CompactTextString(m) }
func (*ClientSSLAuth) ProtoMessage()    {}
func (*ClientSSLAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ad74cf4e5256d1, []int{0}
}
func (m *ClientSSLAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSSLAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSSLAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSSLAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSSLAuth.Merge(m, src)
}
func (m *ClientSSLAuth) XXX_Size() int {
	return m.Size()
}
func (m *ClientSSLAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSSLAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSSLAuth proto.InternalMessageInfo

func (m *ClientSSLAuth) GetAuthApiCluster() string {
	if m != nil {
		return m.AuthApiCluster
	}
	return ""
}

func (m *ClientSSLAuth) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *ClientSSLAuth) GetRefreshDelay() *types.Duration {
	if m != nil {
		return m.RefreshDelay
	}
	return nil
}

func (m *ClientSSLAuth) GetIpWhiteList() []*v3.CidrRange {
	if m != nil {
		return m.IpWhiteList
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientSSLAuth)(nil), "envoy.extensions.filters.network.client_ssl_auth.v3.ClientSSLAuth")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/network/client_ssl_auth/v3/client_ssl_auth.proto", fileDescriptor_30ad74cf4e5256d1)
}

var fileDescriptor_30ad74cf4e5256d1 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x95, 0x73, 0x27, 0x10, 0x1b, 0x82, 0x90, 0x1b, 0xc2, 0x15, 0x26, 0x5c, 0x95, 0x6a, 0x57,
	0xc4, 0x1d, 0x42, 0x27, 0x25, 0xbe, 0x06, 0xe9, 0x8a, 0x28, 0x57, 0x50, 0x5a, 0x7b, 0xf1, 0xd8,
	0x19, 0xb1, 0xda, 0x5d, 0xed, 0x8e, 0x7d, 0xc9, 0x1f, 0xf0, 0x0d, 0x7c, 0x08, 0x7f, 0x80, 0x44,
	0xc9, 0x27, 0xa0, 0x7c, 0x06, 0x15, 0x5a, 0xaf, 0x4f, 0x28, 0x27, 0xd1, 0xd0, 0xd9, 0xf3, 0xde,
	0xbc, 0x79, 0xf3, 0x66, 0xd9, 0x47, 0xd0, 0x9d, 0x39, 0x08, 0xd8, 0x13, 0x68, 0x8f, 0x46, 0x7b,
	0x51, 0xa3, 0x22, 0x70, 0x5e, 0x68, 0xa0, 0x7b, 0xe3, 0x3e, 0x8b, 0xad, 0x42, 0xd0, 0x54, 0x7a,
	0xaf, 0x4a, 0xd9, 0xd2, 0x4e, 0x74, 0xf9, 0xe3, 0x12, 0xb7, 0xce, 0x90, 0x49, 0xf3, 0x5e, 0x8a,
	0xff, 0x95, 0xe2, 0x83, 0x14, 0x1f, 0xa4, 0xf8, 0xe3, 0xbe, 0x2e, 0xbf, 0xb8, 0x8c, 0xf3, 0xb7,
	0x46, 0xd7, 0xd8, 0x88, 0xad, 0x71, 0x10, 0x06, 0xc8, 0xaa, 0x72, 0xe0, 0x7d, 0x14, 0xbe, 0xc8,
	0x1a, 0x63, 0x1a, 0x05, 0xa2, 0xff, 0xbb, 0x6b, 0x6b, 0x51, 0xb5, 0x4e, 0x12, 0x1a, 0x3d, 0xe0,
	0x6f, 0xdb, 0xca, 0x4a, 0x21, 0xb5, 0x36, 0xd4, 0x97, 0xbd, 0xe8, 0xc0, 0x05, 0x07, 0xa8, 0x9b,
	0x81, 0xf2, 0xaa, 0x93, 0x0a, 0x2b, 0x49, 0x20, 0x1e, 0x3e, 0x22, 0x70, 0xf9, 0x6d, 0xc4, 0x26,
	0x45, 0x6f, 0xeb, 0xf6, 0xf6, 0x66, 0xd9, 0xd2, 0x2e, 0x7d, 0xc7, 0x5e, 0x06, 0x73, 0xa5, 0xb4,
	0x58, 0x6e, 0x55, 0xeb, 0x09, 0xdc, 0x34, 0x99, 0x25, 0xf3, 0x67, 0xab, 0xa7, 0xbf, 0x57, 0xe7,
	0x6e, 0x34, 0x4b, 0x36, 0x2f, 0x02, 0x61, 0x69, 0xb1, 0x88, 0x70, 0x3a, 0x67, 0x63, 0x4f, 0x92,
	0x4a, 0xeb, 0xa0, 0xc6, 0xfd, 0x74, 0x74, 0xca, 0x66, 0x01, 0x5b, 0xf7, 0x50, 0x7a, 0xc5, 0x26,
	0x0e, 0x6a, 0x07, 0x7e, 0x57, 0x56, 0xa0, 0xe4, 0x61, 0x7a, 0x36, 0x4b, 0xe6, 0xe3, 0xc5, 0x6b,
	0x1e, 0x57, 0xe4, 0x0f, 0x2b, 0xf2, 0xeb, 0x61, 0xc5, 0xcd, 0xf3, 0x81, 0x7f, 0x1d, 0xe8, 0x69,
	0xc1, 0x26, 0x68, 0xcb, 0xfb, 0x1d, 0x12, 0x94, 0x0a, 0x3d, 0x4d, 0xcf, 0x67, 0x67, 0xf3, 0xf1,
	0xe2, 0x0d, 0x8f, 0xd9, 0xc7, 0x18, 0x79, 0x88, 0x91, 0x77, 0x39, 0x2f, 0xb0, 0x72, 0x1b, 0xa9,
	0x1b, 0xd8, 0x8c, 0xd1, 0x7e, 0x0a, 0x4d, 0x37, 0xe8, 0xe9, 0x7d, 0xf1, 0xf5, 0xfb, 0x97, 0xec,
	0x8a, 0x7d, 0x38, 0xe9, 0x89, 0xb7, 0xfa, 0xf7, 0xa9, 0x16, 0xfc, 0x24, 0xa6, 0x15, 0xfc, 0x38,
	0x66, 0xc9, 0xcf, 0x63, 0x96, 0xfc, 0x3a, 0x66, 0x09, 0x5b, 0xa2, 0x89, 0x16, 0xac, 0x33, 0xfb,
	0x03, 0xff, 0x8f, 0x97, 0xb0, 0x4a, 0x07, 0x7d, 0xaf, 0x82, 0xfe, 0x3a, 0x04, 0xb1, 0x4e, 0xee,
	0x9e, 0xf4, 0x89, 0xe4, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x83, 0xf2, 0x9a, 0x3f, 0xa8, 0x02,
	0x00, 0x00,
}

func (m *ClientSSLAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSSLAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSSLAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IpWhiteList) > 0 {
		for iNdEx := len(m.IpWhiteList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IpWhiteList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientSslAuth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RefreshDelay != nil {
		{
			size, err := m.RefreshDelay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientSslAuth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StatPrefix) > 0 {
		i -= len(m.StatPrefix)
		copy(dAtA[i:], m.StatPrefix)
		i = encodeVarintClientSslAuth(dAtA, i, uint64(len(m.StatPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthApiCluster) > 0 {
		i -= len(m.AuthApiCluster)
		copy(dAtA[i:], m.AuthApiCluster)
		i = encodeVarintClientSslAuth(dAtA, i, uint64(len(m.AuthApiCluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientSslAuth(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientSslAuth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientSSLAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthApiCluster)
	if l > 0 {
		n += 1 + l + sovClientSslAuth(uint64(l))
	}
	l = len(m.StatPrefix)
	if l > 0 {
		n += 1 + l + sovClientSslAuth(uint64(l))
	}
	if m.RefreshDelay != nil {
		l = m.RefreshDelay.Size()
		n += 1 + l + sovClientSslAuth(uint64(l))
	}
	if len(m.IpWhiteList) > 0 {
		for _, e := range m.IpWhiteList {
			l = e.Size()
			n += 1 + l + sovClientSslAuth(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientSslAuth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientSslAuth(x uint64) (n int) {
	return sovClientSslAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientSSLAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientSslAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSSLAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSSLAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthApiCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthApiCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshDelay == nil {
				m.RefreshDelay = &types.Duration{}
			}
			if err := m.RefreshDelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpWhiteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpWhiteList = append(m.IpWhiteList, &v3.CidrRange{})
			if err := m.IpWhiteList[len(m.IpWhiteList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientSslAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientSslAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientSslAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientSslAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientSslAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientSslAuth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientSslAuth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientSslAuth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientSslAuth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientSslAuth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientSslAuth = fmt.Errorf("proto: unexpected end of group")
)
