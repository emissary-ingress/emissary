// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/extensions/filters/network/local_ratelimit/v3/local_rate_limit.proto

package envoy_extensions_filters_network_local_ratelimit_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v31 "github.com/datawire/ambassador/pkg/api/envoy/config/core/v3"
	v3 "github.com/datawire/ambassador/pkg/api/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LocalRateLimit struct {
	// The prefix to use when emitting :ref:`statistics
	// <config_network_filters_local_rate_limit_stats>`.
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// The token bucket configuration to use for rate limiting connections that are processed by the
	// filter's filter chain. Each incoming connection processed by the filter consumes a single
	// token. If the token is available, the connection will be allowed. If no tokens are available,
	// the connection will be immediately closed.
	//
	// .. note::
	//   In the current implementation each filter and filter chain has an independent rate limit.
	//
	// .. note::
	//   In the current implementation the token bucket's :ref:`fill_interval
	//   <envoy_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
	//   refills.
	TokenBucket *v3.TokenBucket `protobuf:"bytes,2,opt,name=token_bucket,json=tokenBucket,proto3" json:"token_bucket,omitempty"`
	// Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
	// to enabled.
	RuntimeEnabled       *v31.RuntimeFeatureFlag `protobuf:"bytes,3,opt,name=runtime_enabled,json=runtimeEnabled,proto3" json:"runtime_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LocalRateLimit) Reset()         { *m = LocalRateLimit{} }
func (m *LocalRateLimit) String() string { return proto.CompactTextString(m) }
func (*LocalRateLimit) ProtoMessage()    {}
func (*LocalRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffceb0cea724f411, []int{0}
}
func (m *LocalRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRateLimit.Merge(m, src)
}
func (m *LocalRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *LocalRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRateLimit proto.InternalMessageInfo

func (m *LocalRateLimit) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *LocalRateLimit) GetTokenBucket() *v3.TokenBucket {
	if m != nil {
		return m.TokenBucket
	}
	return nil
}

func (m *LocalRateLimit) GetRuntimeEnabled() *v31.RuntimeFeatureFlag {
	if m != nil {
		return m.RuntimeEnabled
	}
	return nil
}

func init() {
	proto.RegisterType((*LocalRateLimit)(nil), "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/network/local_ratelimit/v3/local_rate_limit.proto", fileDescriptor_ffceb0cea724f411)
}

var fileDescriptor_ffceb0cea724f411 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbd, 0x8e, 0xd4, 0x30,
	0x14, 0x85, 0xe5, 0xf0, 0xef, 0x41, 0x0b, 0x0a, 0x05, 0xa3, 0x14, 0x21, 0x50, 0xa5, 0xb2, 0xa5,
	0x4d, 0x47, 0x47, 0xd0, 0x2e, 0xd2, 0x6a, 0x8b, 0x21, 0xa2, 0x8f, 0x9c, 0xcc, 0xcd, 0x60, 0x8d,
	0xd7, 0x8e, 0x9c, 0x9b, 0x30, 0xf3, 0x06, 0x88, 0x47, 0xa0, 0xe4, 0x5d, 0x90, 0x28, 0x79, 0x04,
	0x34, 0x8f, 0xb1, 0x15, 0xb2, 0x1d, 0xb4, 0x3b, 0x88, 0x8a, 0x2e, 0xba, 0xf7, 0xf8, 0xbb, 0x27,
	0xe7, 0xd0, 0x0b, 0xd0, 0x93, 0xd9, 0x73, 0xd8, 0x21, 0xe8, 0x41, 0x1a, 0x3d, 0xf0, 0x4e, 0x2a,
	0x04, 0x3b, 0x70, 0x0d, 0xf8, 0xc9, 0xd8, 0x2d, 0x57, 0xa6, 0x15, 0xaa, 0xb6, 0x02, 0x41, 0xc9,
	0x2b, 0x89, 0x7c, 0x2a, 0x6e, 0x8d, 0x6a, 0x3f, 0x63, 0xbd, 0x35, 0x68, 0xe2, 0xc2, 0xb3, 0xd8,
	0x0d, 0x8b, 0xcd, 0x2c, 0x36, 0xb3, 0xd8, 0x5f, 0x2c, 0x36, 0x15, 0xc9, 0x8b, 0x60, 0xa0, 0x35,
	0xba, 0x93, 0x1b, 0xde, 0x1a, 0x0b, 0xee, 0x42, 0x23, 0x06, 0x08, 0xd4, 0x24, 0x0b, 0x02, 0xdc,
	0xf7, 0x7e, 0x83, 0x66, 0x0b, 0xba, 0x6e, 0xc6, 0x76, 0x0b, 0xf3, 0xdd, 0xe4, 0xe5, 0xb8, 0xee,
	0x05, 0x17, 0x5a, 0x1b, 0x14, 0xe8, 0xff, 0x61, 0x02, 0xeb, 0x0c, 0x48, 0xbd, 0x99, 0x25, 0xcf,
	0x27, 0xa1, 0xe4, 0x5a, 0x20, 0xf0, 0x3f, 0x1f, 0x61, 0xf1, 0xea, 0x5b, 0x44, 0x4f, 0x2e, 0x9d,
	0xab, 0x4a, 0x20, 0x5c, 0x3a, 0x53, 0x71, 0x4e, 0x17, 0x03, 0x0a, 0xac, 0x7b, 0x0b, 0x9d, 0xdc,
	0x2d, 0x49, 0x46, 0xf2, 0x47, 0xe5, 0x83, 0xeb, 0xf2, 0xae, 0x8d, 0x32, 0x52, 0x51, 0xb7, 0x5b,
	0xf9, 0x55, 0xfc, 0x8e, 0x3e, 0xbe, 0x6d, 0x67, 0x19, 0x65, 0x24, 0x5f, 0x9c, 0x26, 0x2c, 0xe4,
	0xe0, 0x1c, 0xb3, 0xa9, 0x60, 0x1f, 0x9c, 0xa4, 0xf4, 0x8a, 0xf2, 0xe1, 0x75, 0x79, 0xef, 0x0b,
	0x89, 0x9e, 0x92, 0x6a, 0x81, 0x37, 0xe3, 0xf8, 0x3d, 0x7d, 0x62, 0x47, 0x8d, 0xf2, 0x0a, 0x6a,
	0xd0, 0xa2, 0x51, 0xb0, 0x5e, 0xde, 0xf1, 0xac, 0x7c, 0x66, 0x85, 0x78, 0x98, 0x8b, 0xc7, 0x21,
	0xab, 0x20, 0x3e, 0x07, 0x81, 0xa3, 0x85, 0x73, 0x25, 0x36, 0xd5, 0xc9, 0x0c, 0x38, 0x0b, 0xef,
	0x5f, 0x5f, 0x7c, 0xfd, 0xfe, 0x39, 0x3d, 0xa3, 0x6f, 0x8f, 0xde, 0x87, 0x3e, 0xfe, 0x51, 0xc7,
	0xdc, 0xe3, 0x74, 0x2a, 0x54, 0xff, 0x51, 0xb0, 0xe3, 0x44, 0xca, 0xee, 0xc7, 0x21, 0x25, 0x3f,
	0x0f, 0x29, 0xf9, 0x75, 0x48, 0x09, 0x7d, 0x23, 0x4d, 0x70, 0xd5, 0x5b, 0xb3, 0xdb, 0xb3, 0xff,
	0x28, 0xbd, 0x7c, 0x76, 0x7c, 0x60, 0xe5, 0xaa, 0x58, 0x91, 0xe6, 0xbe, 0xef, 0xa4, 0xf8, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x50, 0x70, 0x7c, 0x75, 0x95, 0x02, 0x00, 0x00,
}

func (m *LocalRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RuntimeEnabled != nil {
		{
			size, err := m.RuntimeEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalRateLimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenBucket != nil {
		{
			size, err := m.TokenBucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalRateLimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StatPrefix) > 0 {
		i -= len(m.StatPrefix)
		copy(dAtA[i:], m.StatPrefix)
		i = encodeVarintLocalRateLimit(dAtA, i, uint64(len(m.StatPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocalRateLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalRateLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StatPrefix)
	if l > 0 {
		n += 1 + l + sovLocalRateLimit(uint64(l))
	}
	if m.TokenBucket != nil {
		l = m.TokenBucket.Size()
		n += 1 + l + sovLocalRateLimit(uint64(l))
	}
	if m.RuntimeEnabled != nil {
		l = m.RuntimeEnabled.Size()
		n += 1 + l + sovLocalRateLimit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLocalRateLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocalRateLimit(x uint64) (n int) {
	return sovLocalRateLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenBucket == nil {
				m.TokenBucket = &v3.TokenBucket{}
			}
			if err := m.TokenBucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeEnabled == nil {
				m.RuntimeEnabled = &v31.RuntimeFeatureFlag{}
			}
			if err := m.RuntimeEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLocalRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalRateLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalRateLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalRateLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalRateLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalRateLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalRateLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalRateLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalRateLimit = fmt.Errorf("proto: unexpected end of group")
)
