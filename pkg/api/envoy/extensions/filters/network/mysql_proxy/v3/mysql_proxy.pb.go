// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/extensions/filters/network/mysql_proxy/v3/mysql_proxy.proto

package envoy_extensions_filters_network_mysql_proxy_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MySQLProxy struct {
	// The human readable prefix to use when emitting :ref:`statistics
	// <config_network_filters_mysql_proxy_stats>`.
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// [#not-implemented-hide:] The optional path to use for writing MySQL access logs.
	// If the access log field is empty, access logs will not be written.
	AccessLog            string   `protobuf:"bytes,2,opt,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MySQLProxy) Reset()         { *m = MySQLProxy{} }
func (m *MySQLProxy) String() string { return proto.CompactTextString(m) }
func (*MySQLProxy) ProtoMessage()    {}
func (*MySQLProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8896af45b7c675fb, []int{0}
}
func (m *MySQLProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MySQLProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MySQLProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLProxy.Merge(m, src)
}
func (m *MySQLProxy) XXX_Size() int {
	return m.Size()
}
func (m *MySQLProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLProxy.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLProxy proto.InternalMessageInfo

func (m *MySQLProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *MySQLProxy) GetAccessLog() string {
	if m != nil {
		return m.AccessLog
	}
	return ""
}

func init() {
	proto.RegisterType((*MySQLProxy)(nil), "envoy.extensions.filters.network.mysql_proxy.v3.MySQLProxy")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/network/mysql_proxy/v3/mysql_proxy.proto", fileDescriptor_8896af45b7c675fb)
}

var fileDescriptor_8896af45b7c675fb = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe5, 0x0a, 0x15, 0xd5, 0x0c, 0xa0, 0x2e, 0x54, 0x95, 0x1a, 0x15, 0xa6, 0x4e, 0xb6,
	0xaa, 0x6c, 0xa0, 0x0e, 0x64, 0x6e, 0xa5, 0x50, 0x0e, 0x10, 0x99, 0xd4, 0x09, 0x16, 0xc1, 0x2f,
	0xd8, 0x6e, 0x48, 0x36, 0x46, 0xae, 0x00, 0x47, 0x61, 0x47, 0xea, 0x08, 0x37, 0x40, 0x39, 0x06,
	0x13, 0xb2, 0x13, 0xd4, 0x4a, 0xb0, 0xb0, 0xe5, 0xe5, 0x7f, 0xef, 0xfb, 0xfd, 0xff, 0xf8, 0x82,
	0xcb, 0x02, 0x2a, 0xca, 0x4b, 0xc3, 0xa5, 0x16, 0x20, 0x35, 0x4d, 0x44, 0x66, 0xb8, 0xd2, 0x54,
	0x72, 0xf3, 0x00, 0xea, 0x96, 0xde, 0x55, 0xfa, 0x3e, 0x8b, 0x72, 0x05, 0x65, 0x45, 0x0b, 0x7f,
	0x77, 0x24, 0xb9, 0x02, 0x03, 0x7d, 0xea, 0x10, 0x64, 0x8b, 0x20, 0x2d, 0x82, 0xb4, 0x08, 0xb2,
	0x7b, 0x53, 0xf8, 0xc3, 0xd1, 0x7a, 0x95, 0x33, 0xca, 0xa4, 0x04, 0xc3, 0x8c, 0xf3, 0xd4, 0x86,
	0x99, 0xb5, 0x6e, 0x78, 0xc3, 0x93, 0x5f, 0x72, 0xc1, 0x95, 0x05, 0x0b, 0x99, 0xb6, 0x2b, 0xc7,
	0x05, 0xcb, 0xc4, 0x8a, 0x19, 0x4e, 0x7f, 0x3e, 0x1a, 0xe1, 0xf4, 0x19, 0x61, 0xbc, 0xa8, 0xae,
	0x2e, 0xe7, 0xa1, 0x35, 0xeb, 0x4f, 0xf0, 0x81, 0x45, 0x47, 0xb9, 0xe2, 0x89, 0x28, 0x07, 0x68,
	0x8c, 0x26, 0xbd, 0x60, 0xff, 0x2b, 0xd8, 0x53, 0x9d, 0x31, 0x5a, 0x62, 0xab, 0x85, 0x4e, 0xea,
	0x8f, 0x30, 0x66, 0x71, 0xcc, 0xb5, 0x8e, 0x32, 0x48, 0x07, 0x1d, 0xbb, 0xb8, 0xec, 0x35, 0x7f,
	0xe6, 0x90, 0x9e, 0x05, 0x2f, 0x6f, 0x4f, 0xde, 0x0c, 0x9f, 0x37, 0x51, 0x63, 0x90, 0x89, 0x48,
	0xdb, 0x98, 0x7f, 0xa7, 0x9c, 0xb2, 0x2c, 0xbf, 0x61, 0x53, 0xb2, 0x7d, 0x4c, 0x90, 0x6c, 0x6a,
	0x0f, 0xbd, 0xd7, 0x1e, 0xfa, 0xac, 0x3d, 0xf4, 0xfa, 0xb8, 0xf9, 0xe8, 0x76, 0x8e, 0x10, 0x9e,
	0x09, 0x20, 0x8e, 0xda, 0x1c, 0xfe, 0xb3, 0xcb, 0xe0, 0x70, 0x61, 0x67, 0x67, 0x10, 0xda, 0x06,
	0x42, 0x74, 0xdd, 0x75, 0x55, 0xf8, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x76, 0xa3, 0x38, 0x60,
	0xdb, 0x01, 0x00, 0x00,
}

func (m *MySQLProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessLog) > 0 {
		i -= len(m.AccessLog)
		copy(dAtA[i:], m.AccessLog)
		i = encodeVarintMysqlProxy(dAtA, i, uint64(len(m.AccessLog)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StatPrefix) > 0 {
		i -= len(m.StatPrefix)
		copy(dAtA[i:], m.StatPrefix)
		i = encodeVarintMysqlProxy(dAtA, i, uint64(len(m.StatPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMysqlProxy(dAtA []byte, offset int, v uint64) int {
	offset -= sovMysqlProxy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MySQLProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StatPrefix)
	if l > 0 {
		n += 1 + l + sovMysqlProxy(uint64(l))
	}
	l = len(m.AccessLog)
	if l > 0 {
		n += 1 + l + sovMysqlProxy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMysqlProxy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMysqlProxy(x uint64) (n int) {
	return sovMysqlProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MySQLProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysqlProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMysqlProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMysqlProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMysqlProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMysqlProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysqlProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysqlProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMysqlProxy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMysqlProxy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMysqlProxy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMysqlProxy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMysqlProxy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMysqlProxy = fmt.Errorf("proto: unexpected end of group")
)
