// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/http/response_map/v3/response_map.proto

package envoy_extensions_filters_http_response_map_v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _response_map_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ResponseMapper with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResponseMapper) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFilter() == nil {
		return ResponseMapperValidationError{
			field:  "Filter",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetStatusCode(); wrapper != nil {

		if val := wrapper.GetValue(); val < 200 || val >= 600 {
			return ResponseMapperValidationError{
				field:  "StatusCode",
				reason: "value must be inside range [200, 600)",
			}
		}

	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBodyFormatOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "BodyFormatOverride",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResponseMapperValidationError is the validation error returned by
// ResponseMapper.Validate if the designated constraints aren't met.
type ResponseMapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapperValidationError) ErrorName() string { return "ResponseMapperValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapperValidationError{}

// Validate checks the field values on ResponseMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResponseMap) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMappers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseMapValidationError{
					field:  fmt.Sprintf("Mappers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetBodyFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapValidationError{
				field:  "BodyFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResponseMapValidationError is the validation error returned by
// ResponseMap.Validate if the designated constraints aren't met.
type ResponseMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapValidationError) ErrorName() string { return "ResponseMapValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapValidationError{}

// Validate checks the field values on ResponseMapPerRoute with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResponseMapPerRoute) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Override.(type) {

	case *ResponseMapPerRoute_Disabled:

		if m.GetDisabled() != true {
			return ResponseMapPerRouteValidationError{
				field:  "Disabled",
				reason: "value must equal true",
			}
		}

	case *ResponseMapPerRoute_ResponseMap:

		if m.GetResponseMap() == nil {
			return ResponseMapPerRouteValidationError{
				field:  "ResponseMap",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetResponseMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseMapPerRouteValidationError{
					field:  "ResponseMap",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ResponseMapPerRouteValidationError{
			field:  "Override",
			reason: "value is required",
		}

	}

	return nil
}

// ResponseMapPerRouteValidationError is the validation error returned by
// ResponseMapPerRoute.Validate if the designated constraints aren't met.
type ResponseMapPerRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapPerRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapPerRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapPerRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapPerRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapPerRouteValidationError) ErrorName() string {
	return "ResponseMapPerRouteValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseMapPerRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMapPerRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapPerRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapPerRouteValidationError{}
