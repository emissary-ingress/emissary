// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/extensions/filters/http/csrf/v3/csrf.proto

package envoy_extensions_filters_http_csrf_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/datawire/ambassador/pkg/api/envoy/config/core/v3"
	v31 "github.com/datawire/ambassador/pkg/api/envoy/type/matcher/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CSRF filter config.
type CsrfPolicy struct {
	// Specifies the % of requests for which the CSRF filter is enabled.
	//
	// If :ref:`runtime_key <envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
	// Envoy will lookup the runtime key to get the percentage of requests to filter.
	//
	// .. note::
	//
	//   This field defaults to 100/:ref:`HUNDRED
	//   <envoy_api_enum_type.v3.FractionalPercent.DenominatorType>`.
	FilterEnabled *v3.RuntimeFractionalPercent `protobuf:"bytes,1,opt,name=filter_enabled,json=filterEnabled,proto3" json:"filter_enabled,omitempty"`
	// Specifies that CSRF policies will be evaluated and tracked, but not enforced.
	//
	// This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
	//
	// If :ref:`runtime_key <envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
	// Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
	// and track the request's *Origin* and *Destination* to determine if it's valid, but will not
	// enforce any policies.
	ShadowEnabled *v3.RuntimeFractionalPercent `protobuf:"bytes,2,opt,name=shadow_enabled,json=shadowEnabled,proto3" json:"shadow_enabled,omitempty"`
	// Specifies additional source origins that will be allowed in addition to
	// the destination origin.
	//
	// More information on how this can be configured via runtime can be found
	// :ref:`here <csrf-configuration>`.
	AdditionalOrigins    []*v31.StringMatcher `protobuf:"bytes,3,rep,name=additional_origins,json=additionalOrigins,proto3" json:"additional_origins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CsrfPolicy) Reset()         { *m = CsrfPolicy{} }
func (m *CsrfPolicy) String() string { return proto.CompactTextString(m) }
func (*CsrfPolicy) ProtoMessage()    {}
func (*CsrfPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f774914a061d1c8b, []int{0}
}
func (m *CsrfPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CsrfPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CsrfPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CsrfPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CsrfPolicy.Merge(m, src)
}
func (m *CsrfPolicy) XXX_Size() int {
	return m.Size()
}
func (m *CsrfPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CsrfPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CsrfPolicy proto.InternalMessageInfo

func (m *CsrfPolicy) GetFilterEnabled() *v3.RuntimeFractionalPercent {
	if m != nil {
		return m.FilterEnabled
	}
	return nil
}

func (m *CsrfPolicy) GetShadowEnabled() *v3.RuntimeFractionalPercent {
	if m != nil {
		return m.ShadowEnabled
	}
	return nil
}

func (m *CsrfPolicy) GetAdditionalOrigins() []*v31.StringMatcher {
	if m != nil {
		return m.AdditionalOrigins
	}
	return nil
}

func init() {
	proto.RegisterType((*CsrfPolicy)(nil), "envoy.extensions.filters.http.csrf.v3.CsrfPolicy")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/http/csrf/v3/csrf.proto", fileDescriptor_f774914a061d1c8b)
}

var fileDescriptor_f774914a061d1c8b = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6b, 0xdb, 0x30,
	0x14, 0xc7, 0x91, 0xc3, 0xc2, 0xa6, 0x90, 0x90, 0xf9, 0xb2, 0x10, 0x98, 0x97, 0x85, 0x0d, 0x02,
	0x63, 0xd2, 0xb0, 0x6f, 0x3b, 0x7a, 0x6c, 0xb7, 0xb1, 0xe0, 0xb0, 0x5e, 0x83, 0x62, 0xcb, 0x89,
	0xc0, 0x91, 0x8c, 0xa4, 0xb8, 0xf1, 0xad, 0xc7, 0xd2, 0x8f, 0xd0, 0x8f, 0xd2, 0x7b, 0x21, 0x97,
	0x42, 0xfb, 0x0d, 0x4a, 0x3e, 0x46, 0x4f, 0x45, 0x96, 0x53, 0xb7, 0xf4, 0x52, 0x7a, 0xb2, 0xf1,
	0xfb, 0xff, 0x7f, 0xef, 0xfd, 0xdf, 0x33, 0xfc, 0x41, 0x79, 0x21, 0x4a, 0x4c, 0xb7, 0x9a, 0x72,
	0xc5, 0x04, 0x57, 0x38, 0x65, 0x99, 0xa6, 0x52, 0xe1, 0x95, 0xd6, 0x39, 0x8e, 0x95, 0x4c, 0x71,
	0x11, 0x54, 0x4f, 0x94, 0x4b, 0xa1, 0x85, 0xfb, 0xb5, 0x72, 0xa0, 0xc6, 0x81, 0x6a, 0x07, 0x32,
	0x0e, 0x54, 0x29, 0x8b, 0x60, 0xf8, 0xc9, 0x82, 0x63, 0xc1, 0x53, 0xb6, 0xc4, 0xb1, 0x90, 0xd4,
	0x70, 0x16, 0x44, 0x51, 0xcb, 0x19, 0x8e, 0xad, 0x40, 0x97, 0x39, 0xc5, 0x6b, 0xa2, 0xe3, 0x15,
	0x95, 0x46, 0xa1, 0xb4, 0x64, 0x7c, 0x59, 0x6b, 0x3e, 0x6e, 0x92, 0x9c, 0x60, 0xc2, 0xb9, 0xd0,
	0x44, 0x57, 0xd3, 0x29, 0x4d, 0xf4, 0x46, 0xd5, 0xe5, 0xcf, 0xcf, 0xca, 0x05, 0x95, 0x66, 0xa6,
	0x86, 0xf0, 0xa1, 0x20, 0x19, 0x4b, 0x88, 0xa6, 0xf8, 0xf0, 0x62, 0x0b, 0xe3, 0x2b, 0x07, 0xc2,
	0x5f, 0x4a, 0xa6, 0x53, 0x91, 0xb1, 0xb8, 0x74, 0xe7, 0xb0, 0x67, 0x63, 0xcc, 0x29, 0x27, 0x8b,
	0x8c, 0x26, 0x03, 0x30, 0x02, 0x93, 0x8e, 0x8f, 0x90, 0x8d, 0x6b, 0x73, 0x20, 0x93, 0x03, 0x15,
	0x01, 0x8a, 0x36, 0x5c, 0xb3, 0x35, 0xfd, 0x23, 0x49, 0x6c, 0x1a, 0x93, 0x6c, 0x4a, 0x65, 0x4c,
	0xb9, 0x0e, 0xdf, 0xde, 0x85, 0x6f, 0xce, 0x80, 0xd3, 0x07, 0x51, 0xd7, 0xf2, 0x7e, 0x5b, 0x9c,
	0xfb, 0x1f, 0xf6, 0xd4, 0x8a, 0x24, 0xe2, 0xf8, 0xa1, 0x81, 0xf3, 0x9a, 0x06, 0x51, 0xd7, 0x52,
	0x0e, 0xd8, 0x19, 0x74, 0x49, 0x92, 0x30, 0xab, 0x99, 0x0b, 0xc9, 0x96, 0x8c, 0xab, 0x41, 0x6b,
	0xd4, 0x9a, 0x74, 0xfc, 0x2f, 0x35, 0xda, 0xac, 0x18, 0xd5, 0x2b, 0x36, 0xec, 0x59, 0xb5, 0xe2,
	0xbf, 0xf6, 0x43, 0xf4, 0xbe, 0xf1, 0xff, 0xb3, 0xf6, 0x9f, 0xfe, 0xf9, 0xe5, 0xa9, 0xf7, 0x1d,
	0x7e, 0x7b, 0x32, 0x99, 0x8d, 0xf3, 0xf8, 0xc8, 0x3e, 0x6a, 0x16, 0x18, 0x1e, 0xed, 0xf6, 0x1e,
	0xb8, 0xde, 0x7b, 0xe0, 0x76, 0xef, 0x81, 0x8b, 0x93, 0xdd, 0x4d, 0xdb, 0xe9, 0x03, 0x18, 0x30,
	0x61, 0x87, 0xc8, 0xa5, 0xd8, 0x96, 0xe8, 0x45, 0xbf, 0x4e, 0xf8, 0xae, 0xc2, 0x9a, 0x2b, 0x4d,
	0xc1, 0xa2, 0x5d, 0x9d, 0x2b, 0xb8, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x3f, 0x97, 0x06, 0xa9,
	0x02, 0x00, 0x00,
}

func (m *CsrfPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CsrfPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CsrfPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdditionalOrigins) > 0 {
		for iNdEx := len(m.AdditionalOrigins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalOrigins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCsrf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ShadowEnabled != nil {
		{
			size, err := m.ShadowEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCsrf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FilterEnabled != nil {
		{
			size, err := m.FilterEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCsrf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCsrf(dAtA []byte, offset int, v uint64) int {
	offset -= sovCsrf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CsrfPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterEnabled != nil {
		l = m.FilterEnabled.Size()
		n += 1 + l + sovCsrf(uint64(l))
	}
	if m.ShadowEnabled != nil {
		l = m.ShadowEnabled.Size()
		n += 1 + l + sovCsrf(uint64(l))
	}
	if len(m.AdditionalOrigins) > 0 {
		for _, e := range m.AdditionalOrigins {
			l = e.Size()
			n += 1 + l + sovCsrf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCsrf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCsrf(x uint64) (n int) {
	return sovCsrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CsrfPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCsrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CsrfPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CsrfPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCsrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCsrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilterEnabled == nil {
				m.FilterEnabled = &v3.RuntimeFractionalPercent{}
			}
			if err := m.FilterEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCsrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCsrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShadowEnabled == nil {
				m.ShadowEnabled = &v3.RuntimeFractionalPercent{}
			}
			if err := m.ShadowEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalOrigins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCsrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCsrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCsrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalOrigins = append(m.AdditionalOrigins, &v31.StringMatcher{})
			if err := m.AdditionalOrigins[len(m.AdditionalOrigins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCsrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCsrf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCsrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCsrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCsrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCsrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCsrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCsrf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCsrf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCsrf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCsrf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCsrf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCsrf = fmt.Errorf("proto: unexpected end of group")
)
