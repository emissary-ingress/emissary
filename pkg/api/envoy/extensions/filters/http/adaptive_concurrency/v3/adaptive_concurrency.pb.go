// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto

package envoy_extensions_filters_http_adaptive_concurrency_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v31 "github.com/datawire/ambassador/pkg/api/envoy/config/core/v3"
	v3 "github.com/datawire/ambassador/pkg/api/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configuration parameters for the gradient controller.
type GradientControllerConfig struct {
	// The percentile to use when summarizing aggregated samples. Defaults to p50.
	SampleAggregatePercentile *v3.Percent                                                 `protobuf:"bytes,1,opt,name=sample_aggregate_percentile,json=sampleAggregatePercentile,proto3" json:"sample_aggregate_percentile,omitempty"`
	ConcurrencyLimitParams    *GradientControllerConfig_ConcurrencyLimitCalculationParams `protobuf:"bytes,2,opt,name=concurrency_limit_params,json=concurrencyLimitParams,proto3" json:"concurrency_limit_params,omitempty"`
	MinRttCalcParams          *GradientControllerConfig_MinimumRTTCalculationParams       `protobuf:"bytes,3,opt,name=min_rtt_calc_params,json=minRttCalcParams,proto3" json:"min_rtt_calc_params,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                                    `json:"-"`
	XXX_unrecognized          []byte                                                      `json:"-"`
	XXX_sizecache             int32                                                       `json:"-"`
}

func (m *GradientControllerConfig) Reset()         { *m = GradientControllerConfig{} }
func (m *GradientControllerConfig) String() string { return proto.CompactTextString(m) }
func (*GradientControllerConfig) ProtoMessage()    {}
func (*GradientControllerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6af5b2d621e04b, []int{0}
}
func (m *GradientControllerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradientControllerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradientControllerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GradientControllerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradientControllerConfig.Merge(m, src)
}
func (m *GradientControllerConfig) XXX_Size() int {
	return m.Size()
}
func (m *GradientControllerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GradientControllerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GradientControllerConfig proto.InternalMessageInfo

func (m *GradientControllerConfig) GetSampleAggregatePercentile() *v3.Percent {
	if m != nil {
		return m.SampleAggregatePercentile
	}
	return nil
}

func (m *GradientControllerConfig) GetConcurrencyLimitParams() *GradientControllerConfig_ConcurrencyLimitCalculationParams {
	if m != nil {
		return m.ConcurrencyLimitParams
	}
	return nil
}

func (m *GradientControllerConfig) GetMinRttCalcParams() *GradientControllerConfig_MinimumRTTCalculationParams {
	if m != nil {
		return m.MinRttCalcParams
	}
	return nil
}

// Parameters controlling the periodic recalculation of the concurrency limit from sampled request
// latencies.
type GradientControllerConfig_ConcurrencyLimitCalculationParams struct {
	// The allowed upper-bound on the calculated concurrency limit. Defaults to 1000.
	MaxConcurrencyLimit *types.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrency_limit,json=maxConcurrencyLimit,proto3" json:"max_concurrency_limit,omitempty"`
	// The period of time samples are taken to recalculate the concurrency limit.
	ConcurrencyUpdateInterval *types.Duration `protobuf:"bytes,3,opt,name=concurrency_update_interval,json=concurrencyUpdateInterval,proto3" json:"concurrency_update_interval,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}        `json:"-"`
	XXX_unrecognized          []byte          `json:"-"`
	XXX_sizecache             int32           `json:"-"`
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) Reset() {
	*m = GradientControllerConfig_ConcurrencyLimitCalculationParams{}
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) String() string {
	return proto.CompactTextString(m)
}
func (*GradientControllerConfig_ConcurrencyLimitCalculationParams) ProtoMessage() {}
func (*GradientControllerConfig_ConcurrencyLimitCalculationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6af5b2d621e04b, []int{0, 0}
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradientControllerConfig_ConcurrencyLimitCalculationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradientControllerConfig_ConcurrencyLimitCalculationParams.Merge(m, src)
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) XXX_Size() int {
	return m.Size()
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GradientControllerConfig_ConcurrencyLimitCalculationParams.DiscardUnknown(m)
}

var xxx_messageInfo_GradientControllerConfig_ConcurrencyLimitCalculationParams proto.InternalMessageInfo

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) GetMaxConcurrencyLimit() *types.UInt32Value {
	if m != nil {
		return m.MaxConcurrencyLimit
	}
	return nil
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) GetConcurrencyUpdateInterval() *types.Duration {
	if m != nil {
		return m.ConcurrencyUpdateInterval
	}
	return nil
}

// Parameters controlling the periodic minRTT recalculation.
// [#next-free-field: 6]
type GradientControllerConfig_MinimumRTTCalculationParams struct {
	// The time interval between recalculating the minimum request round-trip time.
	Interval *types.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The number of requests to aggregate/sample during the minRTT recalculation window before
	// updating. Defaults to 50.
	RequestCount *types.UInt32Value `protobuf:"bytes,2,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// Randomized time delta that will be introduced to the start of the minRTT calculation window.
	// This is represented as a percentage of the interval duration. Defaults to 15%.
	//
	// Example: If the interval is 10s and the jitter is 15%, the next window will begin
	// somewhere in the range (10s - 11.5s).
	Jitter *v3.Percent `protobuf:"bytes,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// The concurrency limit set while measuring the minRTT. Defaults to 3.
	MinConcurrency *types.UInt32Value `protobuf:"bytes,4,opt,name=min_concurrency,json=minConcurrency,proto3" json:"min_concurrency,omitempty"`
	// Amount added to the measured minRTT to add stability to the concurrency limit during natural
	// variability in latency. This is expressed as a percentage of the measured value and can be
	// adjusted to allow more or less tolerance to the sampled latency values.
	//
	// Defaults to 25%.
	Buffer               *v3.Percent `protobuf:"bytes,5,opt,name=buffer,proto3" json:"buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) Reset() {
	*m = GradientControllerConfig_MinimumRTTCalculationParams{}
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) String() string {
	return proto.CompactTextString(m)
}
func (*GradientControllerConfig_MinimumRTTCalculationParams) ProtoMessage() {}
func (*GradientControllerConfig_MinimumRTTCalculationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6af5b2d621e04b, []int{0, 1}
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradientControllerConfig_MinimumRTTCalculationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradientControllerConfig_MinimumRTTCalculationParams.Merge(m, src)
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) XXX_Size() int {
	return m.Size()
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GradientControllerConfig_MinimumRTTCalculationParams.DiscardUnknown(m)
}

var xxx_messageInfo_GradientControllerConfig_MinimumRTTCalculationParams proto.InternalMessageInfo

func (m *GradientControllerConfig_MinimumRTTCalculationParams) GetInterval() *types.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) GetRequestCount() *types.UInt32Value {
	if m != nil {
		return m.RequestCount
	}
	return nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) GetJitter() *v3.Percent {
	if m != nil {
		return m.Jitter
	}
	return nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) GetMinConcurrency() *types.UInt32Value {
	if m != nil {
		return m.MinConcurrency
	}
	return nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) GetBuffer() *v3.Percent {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type AdaptiveConcurrency struct {
	// Types that are valid to be assigned to ConcurrencyControllerConfig:
	//	*AdaptiveConcurrency_GradientControllerConfig
	ConcurrencyControllerConfig isAdaptiveConcurrency_ConcurrencyControllerConfig `protobuf_oneof:"concurrency_controller_config"`
	// If set to false, the adaptive concurrency filter will operate as a pass-through filter. If the
	// message is unspecified, the filter will be enabled.
	Enabled              *v31.RuntimeFeatureFlag `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AdaptiveConcurrency) Reset()         { *m = AdaptiveConcurrency{} }
func (m *AdaptiveConcurrency) String() string { return proto.CompactTextString(m) }
func (*AdaptiveConcurrency) ProtoMessage()    {}
func (*AdaptiveConcurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6af5b2d621e04b, []int{1}
}
func (m *AdaptiveConcurrency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdaptiveConcurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdaptiveConcurrency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdaptiveConcurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdaptiveConcurrency.Merge(m, src)
}
func (m *AdaptiveConcurrency) XXX_Size() int {
	return m.Size()
}
func (m *AdaptiveConcurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_AdaptiveConcurrency.DiscardUnknown(m)
}

var xxx_messageInfo_AdaptiveConcurrency proto.InternalMessageInfo

type isAdaptiveConcurrency_ConcurrencyControllerConfig interface {
	isAdaptiveConcurrency_ConcurrencyControllerConfig()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdaptiveConcurrency_GradientControllerConfig struct {
	GradientControllerConfig *GradientControllerConfig `protobuf:"bytes,1,opt,name=gradient_controller_config,json=gradientControllerConfig,proto3,oneof" json:"gradient_controller_config,omitempty"`
}

func (*AdaptiveConcurrency_GradientControllerConfig) isAdaptiveConcurrency_ConcurrencyControllerConfig() {
}

func (m *AdaptiveConcurrency) GetConcurrencyControllerConfig() isAdaptiveConcurrency_ConcurrencyControllerConfig {
	if m != nil {
		return m.ConcurrencyControllerConfig
	}
	return nil
}

func (m *AdaptiveConcurrency) GetGradientControllerConfig() *GradientControllerConfig {
	if x, ok := m.GetConcurrencyControllerConfig().(*AdaptiveConcurrency_GradientControllerConfig); ok {
		return x.GradientControllerConfig
	}
	return nil
}

func (m *AdaptiveConcurrency) GetEnabled() *v31.RuntimeFeatureFlag {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AdaptiveConcurrency) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AdaptiveConcurrency_GradientControllerConfig)(nil),
	}
}

func init() {
	proto.RegisterType((*GradientControllerConfig)(nil), "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig")
	proto.RegisterType((*GradientControllerConfig_ConcurrencyLimitCalculationParams)(nil), "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams")
	proto.RegisterType((*GradientControllerConfig_MinimumRTTCalculationParams)(nil), "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams")
	proto.RegisterType((*AdaptiveConcurrency)(nil), "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto", fileDescriptor_0f6af5b2d621e04b)
}

var fileDescriptor_0f6af5b2d621e04b = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xae, 0xd3, 0x4f, 0xed, 0xfb, 0x55, 0xb9, 0x7a, 0x8b, 0x9b, 0x94, 0xd0, 0x56, 0x1c, 0xaa,
	0x1e, 0xd6, 0x52, 0x23, 0x2e, 0xb9, 0xd5, 0x41, 0x85, 0xf2, 0x51, 0x2c, 0xab, 0xad, 0xc4, 0xc9,
	0xda, 0x38, 0x1b, 0x77, 0xcb, 0x7a, 0xed, 0x6e, 0xd6, 0x6e, 0xf2, 0x0f, 0x10, 0xff, 0x00, 0xce,
	0x9c, 0xb8, 0xf3, 0x13, 0x90, 0xb8, 0xc1, 0x1d, 0x09, 0xa1, 0xde, 0xb9, 0xa3, 0x9e, 0xd0, 0x7a,
	0x37, 0xad, 0x69, 0x93, 0xa0, 0x96, 0xdc, 0x92, 0xcc, 0x3c, 0xcf, 0x33, 0xf3, 0xcc, 0xec, 0x04,
	0xb8, 0x98, 0x65, 0x71, 0xcf, 0xc6, 0x5d, 0x81, 0x59, 0x87, 0xc4, 0xac, 0x63, 0xb7, 0x09, 0x15,
	0x98, 0x77, 0xec, 0x43, 0x21, 0x12, 0x1b, 0xb5, 0x50, 0x22, 0x48, 0x86, 0xfd, 0x20, 0x66, 0x41,
	0xca, 0x39, 0x66, 0x41, 0xcf, 0xce, 0x6a, 0x03, 0x7f, 0x87, 0x09, 0x8f, 0x45, 0x6c, 0xde, 0xcb,
	0x19, 0xe1, 0x05, 0x23, 0xd4, 0x8c, 0x50, 0x32, 0xc2, 0x81, 0xc8, 0xac, 0x56, 0xbe, 0xa3, 0x0a,
	0x09, 0x62, 0xd6, 0x26, 0xa1, 0x1d, 0xc4, 0x1c, 0x4b, 0x9d, 0x26, 0xea, 0x60, 0xc5, 0x5b, 0xae,
	0xa8, 0x04, 0xd1, 0x4b, 0xf2, 0x48, 0x82, 0x79, 0x80, 0x99, 0xd0, 0xc1, 0xe5, 0x30, 0x8e, 0x43,
	0x8a, 0x6d, 0x94, 0x10, 0x1b, 0x31, 0x16, 0x0b, 0x24, 0x72, 0x69, 0x15, 0xad, 0xea, 0x68, 0xfe,
	0xad, 0x99, 0xb6, 0xed, 0x56, 0xca, 0xf3, 0x84, 0x61, 0xf1, 0x13, 0x8e, 0x92, 0x44, 0x96, 0xac,
	0xe2, 0xab, 0x69, 0x2b, 0x41, 0x45, 0x5e, 0x3b, 0xc3, 0x5c, 0xf6, 0x46, 0x58, 0xa8, 0x53, 0x6e,
	0x65, 0x88, 0x92, 0x16, 0x12, 0xd8, 0xee, 0x7f, 0x50, 0x81, 0xb5, 0x2f, 0x00, 0x58, 0x0f, 0x38,
	0x6a, 0x11, 0xcc, 0x44, 0x23, 0x66, 0x82, 0xc7, 0x94, 0x62, 0xde, 0xc8, 0xdb, 0x34, 0x0f, 0x40,
	0xa5, 0x83, 0xa2, 0x84, 0x62, 0x1f, 0x85, 0x21, 0xc7, 0x21, 0x12, 0xd8, 0xd7, 0x8d, 0x11, 0x8a,
	0x2d, 0x63, 0xc5, 0x58, 0xff, 0x6b, 0x73, 0x11, 0x2a, 0x47, 0x65, 0xe7, 0x30, 0xab, 0x41, 0x57,
	0x25, 0x78, 0x4b, 0x0a, 0xba, 0xd5, 0x47, 0xba, 0xe7, 0x40, 0xf3, 0xbd, 0x01, 0xac, 0x82, 0xbf,
	0x3e, 0x25, 0x11, 0x11, 0x7e, 0x82, 0x38, 0x8a, 0x3a, 0x56, 0x29, 0x67, 0x3d, 0x86, 0x37, 0x9a,
	0x13, 0x1c, 0xd6, 0x0b, 0x6c, 0x5c, 0xe4, 0x3d, 0x91, 0x72, 0x0d, 0x44, 0x83, 0x94, 0xe6, 0x7e,
	0xb9, 0xb9, 0xb0, 0x33, 0x77, 0xe6, 0x4c, 0xbf, 0x32, 0x4a, 0xf3, 0x86, 0xb7, 0x18, 0x5c, 0x4a,
	0x56, 0x19, 0xe6, 0x5b, 0x03, 0x2c, 0x44, 0x84, 0xf9, 0x5c, 0x08, 0x3f, 0x40, 0x34, 0xe8, 0x97,
	0x3c, 0x99, 0x97, 0xfc, 0x62, 0xdc, 0x25, 0x3f, 0x25, 0x8c, 0x44, 0x69, 0xe4, 0xed, 0xed, 0x8d,
	0x2a, 0x76, 0x3e, 0x22, 0xcc, 0x13, 0x79, 0x3f, 0x2a, 0x56, 0xfe, 0x5a, 0x02, 0xab, 0xbf, 0x6d,
	0xd7, 0x7c, 0x0e, 0xfe, 0x8f, 0x50, 0xd7, 0xbf, 0x32, 0x07, 0x3d, 0x80, 0x65, 0xa8, 0xb6, 0x0e,
	0xf6, 0xb7, 0x0e, 0xee, 0xef, 0x30, 0x51, 0xdb, 0x3c, 0x40, 0x34, 0xc5, 0xce, 0xec, 0x99, 0x33,
	0xb5, 0x51, 0x5a, 0x99, 0xf0, 0x16, 0x22, 0xd4, 0xbd, 0xac, 0x65, 0x62, 0x50, 0x29, 0xd2, 0xa6,
	0x89, 0x5c, 0x38, 0x9f, 0x30, 0x81, 0x79, 0x86, 0xa8, 0xb6, 0x6b, 0xe9, 0x8a, 0xc0, 0x7d, 0xbd,
	0xf6, 0x0e, 0x38, 0x73, 0x66, 0xdf, 0x19, 0x53, 0x73, 0xc6, 0xc6, 0x84, 0xb7, 0x54, 0x60, 0xda,
	0xcf, 0x89, 0x76, 0x34, 0x4f, 0xfd, 0xe4, 0xcd, 0x87, 0x97, 0x55, 0x0e, 0x12, 0x65, 0xbb, 0x7a,
	0x9a, 0xda, 0xf2, 0x51, 0x8e, 0x6f, 0x22, 0x9a, 0x1c, 0xa2, 0x3f, 0xd8, 0x94, 0xf2, 0xa7, 0x49,
	0x50, 0x19, 0x31, 0x1c, 0x73, 0x0b, 0xcc, 0x9d, 0x37, 0x6b, 0x5c, 0xa7, 0xd9, 0x73, 0x98, 0xf9,
	0x08, 0xfc, 0xc3, 0xf1, 0x71, 0x8a, 0x3b, 0xc2, 0x0f, 0xe2, 0x94, 0x5d, 0x73, 0x2a, 0x7f, 0x6b,
	0x6c, 0x43, 0x42, 0x4d, 0x08, 0x66, 0x8e, 0x88, 0x10, 0x98, 0x6b, 0xe7, 0x87, 0xbd, 0x58, 0x9d,
	0x65, 0xee, 0x82, 0xff, 0xe4, 0x96, 0x17, 0x4c, 0xb3, 0xa6, 0xae, 0xa3, 0xfe, 0x6f, 0x44, 0x58,
	0xc1, 0x44, 0xa9, 0xdf, 0x4c, 0xdb, 0x6d, 0xcc, 0xad, 0xe9, 0xd1, 0xfa, 0x2a, 0xab, 0x7e, 0x2c,
	0xe7, 0x4a, 0xc1, 0xd1, 0x98, 0xe7, 0x3a, 0x62, 0x62, 0xf5, 0x7d, 0x29, 0xe9, 0x82, 0xdd, 0xf1,
	0x4a, 0xae, 0x7d, 0x2f, 0x81, 0x85, 0x2d, 0x8d, 0x2c, 0x3a, 0xf2, 0xda, 0x00, 0xe5, 0x50, 0x83,
	0x24, 0xa3, 0x46, 0xf9, 0x4a, 0x58, 0xef, 0xcc, 0xb3, 0x31, 0xdf, 0x93, 0x8b, 0x9b, 0xf1, 0x70,
	0xc2, 0xb3, 0xc2, 0x61, 0x47, 0xdf, 0x01, 0xb3, 0x98, 0xa1, 0x26, 0xc5, 0x2d, 0xbd, 0x73, 0xeb,
	0xf0, 0x17, 0x57, 0xe4, 0x7f, 0x9f, 0x94, 0xf1, 0x52, 0x26, 0x48, 0x84, 0xb7, 0x31, 0x12, 0x29,
	0xc7, 0xdb, 0x14, 0x85, 0x5e, 0x1f, 0x58, 0x77, 0xa5, 0x9d, 0x8f, 0xc1, 0xce, 0xcd, 0xec, 0x1c,
	0xe0, 0x98, 0x73, 0x17, 0xdc, 0x2e, 0x9e, 0x94, 0x2b, 0x9e, 0x99, 0x93, 0x3f, 0x1c, 0xc3, 0x89,
	0x3e, 0x9e, 0x56, 0x8d, 0xcf, 0xa7, 0x55, 0xe3, 0xdb, 0x69, 0xd5, 0x00, 0x0d, 0x12, 0xab, 0xd2,
	0x13, 0x1e, 0x77, 0x7b, 0x37, 0x73, 0xd3, 0xb1, 0x06, 0x54, 0xe3, 0xca, 0xf5, 0x77, 0x8d, 0xe6,
	0x4c, 0xfe, 0x0e, 0x6a, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xef, 0xdc, 0x78, 0xa6, 0x08,
	0x00, 0x00,
}

func (m *GradientControllerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradientControllerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GradientControllerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinRttCalcParams != nil {
		{
			size, err := m.MinRttCalcParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConcurrencyLimitParams != nil {
		{
			size, err := m.ConcurrencyLimitParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SampleAggregatePercentile != nil {
		{
			size, err := m.SampleAggregatePercentile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConcurrencyUpdateInterval != nil {
		{
			size, err := m.ConcurrencyUpdateInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxConcurrencyLimit != nil {
		{
			size, err := m.MaxConcurrencyLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Buffer != nil {
		{
			size, err := m.Buffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MinConcurrency != nil {
		{
			size, err := m.MinConcurrency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Jitter != nil {
		{
			size, err := m.Jitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestCount != nil {
		{
			size, err := m.RequestCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdaptiveConcurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdaptiveConcurrency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdaptiveConcurrency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConcurrencyControllerConfig != nil {
		{
			size := m.ConcurrencyControllerConfig.Size()
			i -= size
			if _, err := m.ConcurrencyControllerConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdaptiveConcurrency_GradientControllerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdaptiveConcurrency_GradientControllerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GradientControllerConfig != nil {
		{
			size, err := m.GradientControllerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdaptiveConcurrency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintAdaptiveConcurrency(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdaptiveConcurrency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GradientControllerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SampleAggregatePercentile != nil {
		l = m.SampleAggregatePercentile.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.ConcurrencyLimitParams != nil {
		l = m.ConcurrencyLimitParams.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.MinRttCalcParams != nil {
		l = m.MinRttCalcParams.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxConcurrencyLimit != nil {
		l = m.MaxConcurrencyLimit.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.ConcurrencyUpdateInterval != nil {
		l = m.ConcurrencyUpdateInterval.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GradientControllerConfig_MinimumRTTCalculationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.RequestCount != nil {
		l = m.RequestCount.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.Jitter != nil {
		l = m.Jitter.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.MinConcurrency != nil {
		l = m.MinConcurrency.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.Buffer != nil {
		l = m.Buffer.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdaptiveConcurrency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConcurrencyControllerConfig != nil {
		n += m.ConcurrencyControllerConfig.Size()
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdaptiveConcurrency_GradientControllerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GradientControllerConfig != nil {
		l = m.GradientControllerConfig.Size()
		n += 1 + l + sovAdaptiveConcurrency(uint64(l))
	}
	return n
}

func sovAdaptiveConcurrency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdaptiveConcurrency(x uint64) (n int) {
	return sovAdaptiveConcurrency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GradientControllerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdaptiveConcurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradientControllerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradientControllerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleAggregatePercentile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SampleAggregatePercentile == nil {
				m.SampleAggregatePercentile = &v3.Percent{}
			}
			if err := m.SampleAggregatePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcurrencyLimitParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConcurrencyLimitParams == nil {
				m.ConcurrencyLimitParams = &GradientControllerConfig_ConcurrencyLimitCalculationParams{}
			}
			if err := m.ConcurrencyLimitParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRttCalcParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinRttCalcParams == nil {
				m.MinRttCalcParams = &GradientControllerConfig_MinimumRTTCalculationParams{}
			}
			if err := m.MinRttCalcParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdaptiveConcurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradientControllerConfig_ConcurrencyLimitCalculationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdaptiveConcurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcurrencyLimitCalculationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcurrencyLimitCalculationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrencyLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxConcurrencyLimit == nil {
				m.MaxConcurrencyLimit = &types.UInt32Value{}
			}
			if err := m.MaxConcurrencyLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcurrencyUpdateInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConcurrencyUpdateInterval == nil {
				m.ConcurrencyUpdateInterval = &types.Duration{}
			}
			if err := m.ConcurrencyUpdateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdaptiveConcurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradientControllerConfig_MinimumRTTCalculationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdaptiveConcurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinimumRTTCalculationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinimumRTTCalculationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &types.Duration{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCount == nil {
				m.RequestCount = &types.UInt32Value{}
			}
			if err := m.RequestCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jitter == nil {
				m.Jitter = &v3.Percent{}
			}
			if err := m.Jitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinConcurrency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinConcurrency == nil {
				m.MinConcurrency = &types.UInt32Value{}
			}
			if err := m.MinConcurrency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffer == nil {
				m.Buffer = &v3.Percent{}
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdaptiveConcurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdaptiveConcurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdaptiveConcurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdaptiveConcurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdaptiveConcurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradientControllerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GradientControllerConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConcurrencyControllerConfig = &AdaptiveConcurrency_GradientControllerConfig{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &v31.RuntimeFeatureFlag{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdaptiveConcurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdaptiveConcurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdaptiveConcurrency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdaptiveConcurrency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdaptiveConcurrency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdaptiveConcurrency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdaptiveConcurrency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdaptiveConcurrency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdaptiveConcurrency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdaptiveConcurrency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdaptiveConcurrency = fmt.Errorf("proto: unexpected end of group")
)
