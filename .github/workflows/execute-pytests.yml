name: pytest
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'releng/**'
      - 'charts/**'
      - 'manifests/**'
      - 'k8s-config/**'
      - 'docs/**'
      - '*.md$'
  pull_request:
    paths-ignore:
      - 'releng/**'
      - 'charts/**'
      - 'manifests/**'
      - 'k8s-config/**'
      - 'docs/**'
      - '*.md$'

jobs:
  execute-pytests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # NOTES:
        # legacy mode does not do fast reconfigure - never test state true, true
        # on master/release branch (legacy + reconfigure testing)
        #   - legacy + no reconfigure (true, false)
        #   -  no legacy + reconfigure (false, true)
        #   - no legacy + no reconfigure (false, false)
        # other branches (no legacy testing)
        #   - no legacy + no reconfigure (false, true)
        #   - no legacy + reconfigure (false, false)
        pytest-settings:
          - {legacy-mode: true, fast-reconfigure: false}
          - {legacy-mode: false, fast-reconfigure: true}
          - {legacy-mode: false, fast-reconfigure: false}
        test: [integration, unit]
        isMasterOrRelease:
          # is this close enough to release branch being /^rel\/v[0-9]+\.[0-9]+\.[0-9]+(-ea)?$/ ?
          - ${{ contains(github.ref, 'master') || startsWith(github.ref, 'refs/heads/rel/v') }}
        exclude:
          - isMasterOrRelease: false # if we are not master/release then we exclude legacy mode
            pytest-settings: {legacy-mode: true, fast-reconfigure: false}
    name: pytest-${{ matrix.test }} (legacy-mode:${{ matrix.pytest-settings.legacy-mode }}, fast-reconfigure:${{ matrix.pytest-settings.fast-reconfigure }})
    steps:
      - run: echo "PREFIX=pytest-${{ matrix.test }}-legacy-mode.${{ matrix.pytest-settings.legacy-mode }}-fast-reconfigure.${{ matrix.pytest-settings.fast-reconfigure }}" >> $GITHUB_ENV
        name: Set Unique Test prefix ${{ env.PREFIX }}
      - run: echo "USE_LOCAL_K3S_CLUSTER=1" >> $GITHUB_ENV
        if: ${{ matrix.test != 'unit' }}
        name: "Set USE_LOCAL_K3S_CLUSTER=1"
      - run: |
          sudo sysctl -w fs.file-max=1600000
          sudo sysctl -w fs.inotify.max_user_instances=4096
        name: "Configure system file and inotify maximums (1600000/4096)"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: '^3.9.5'
        name: "Install Python (^3.9.5)"
      - run: python --version
        name: "Check python installed"
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            awscli
            packaging
        name: "Install Python requirements with pip"
      - uses: azure/setup-kubectl@v1
        if: ${{ matrix.test != 'unit' }}
        id: install
        with:
          version: 'v1.19.12'
        name: "Install kubectl (v1.19.12)" # maybe not?
      - name: "Install/Setup K3d/K3s"
        if: ${{ matrix.test != 'unit' }}
        uses: nolar/setup-k3d-k3s@v1.0.7
      - name: "Docker Login"
        if: ${{ matrix.test != 'unit' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.DOCKER_BUILD_PASSWORD }}
      - name: "Configure Kubernetes cluster and Docker registry"
        if: ${{ matrix.test != 'unit' }}
        run: |
          ./.ci/cluster-claim
          rm -f ~/.kube/config
          cp ~/.kube/kubeception.yaml ~/.kube/config

          if test -e ~/.kube/kubeception.yaml; then
            echo 'DEV_KUBECONFIG=~/.kube/kubeception.yaml' >> $GITHUB_ENV
          fi
      - name: make pytest-${{ matrix.test }} (legacy-mode:${{ matrix.pytest-settings.legacy-mode }}, fast-reconfigure:${{ matrix.pytest-settings.fast-reconfigure }} )
        timeout-minutes: 30
        run: |
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=900
          export AMBASSADOR_LEGACY_MODE=${{ matrix.pytest-settings.legacy-mode }}
          export AMBASSADOR_FAST_RECONFIGURE=${{ matrix.pytest-settings.fast-reconfigure }}
          export TEST_XML_DIR=/tmp/test-logs/xml/
          export DEV_KUBECONFIG=~/.kube/kubeception.yaml
          export DEV_REGISTRY=${{ secrets.DEV_REGISTRY }}
          mkdir -p ${TEST_XML_DIR}
          make pytest-${{ matrix.test }}

      # teardown
      - run: |
          ./.ci/cluster-unclaim
        if: always() && ${{ matrix.test != 'unit' }}
        name: "Teardown Kubernetes cluster"
      # collect logs
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
      # upload artifacts
      - name: "Upload Test Logs (test-logs)"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PREFIX }}--test-logs
          path: /tmp/test-logs
      - name: "Upload Cov Logs (cov_html)"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PREFIX }}--cov_html
          path: /tmp/cov_html
      - name: "Upload Pod Logs (pod-logs)"
        if: ${{ matrix.test != 'unit' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PREFIX }}--pod-logs
          path: /tmp/pod-logs
      - name: "Upload XML Logs (xml)"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PREFIX }}--xml
          path: /tmp/test-logs/xml/
      - uses: ./.github/actions/git-dirty-check
        if: always()
        name: "Check git not dirty from testing"
