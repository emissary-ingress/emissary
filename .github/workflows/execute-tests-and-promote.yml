name: job-promote-to-passed

"on":
  push:
    branches:
      - master
      - release/v*
  pull_request: {}

jobs:

  lint: ########################################################################
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - shell: bash
        run: |
          make lint

  generate: ####################################################################
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_RELEASE_USERNAME }}
          password: ${{ secrets.GH_DOCKER_RELEASE_TOKEN }}
      - name: "'make generate'"
        shell: bash
        run: |
          make generate
      - uses: ./.github/actions/git-dirty-check
        name: "Check Git not dirty from 'make generate'"
      - name: "'make generate' (again!)"
        shell: bash
        run: |
          make generate
      - uses: ./.github/actions/git-dirty-check
        name: "Check Git not dirty from 'make generate' (again!)"

  check-envoy-version: #########################################################
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - run: make check-envoy-version

  # Tests ######################################################################
  check-gotest:
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - name: make gotest
        shell: bash
        run: |
          export PREFIX=gotests
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=900
          export TEST_XML_DIR=/tmp/test-logs/xml/
          mkdir -p ${TEST_XML_DIR}
          make gotest
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  check-pytest:
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    strategy:
      fail-fast: false
      matrix:
        test:
          - integration
          - kat-envoy2-g1
          - kat-envoy2-g2
          - kat-envoy2-g3
          - kat-envoy3-g1
          - kat-envoy3-g2
          - kat-envoy3-g3
          # FIXME(lukeshu): KAT_RUN_MODE=local is disabled because it
          # needs fixed for a world where annotations are already
          # unfolded in the snapshot.
          #
          #- kat-local
    name: pytest-${{ matrix.test }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - name: make pytest-${{ matrix.test }}
        uses: nick-invision/retry@v2.4.0
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: |
            export PREFIX=pytest-${{ matrix.test }}
            export USE_LOCAL_K3S_CLUSTER=1
            sudo sysctl -w fs.file-max=1600000
            sudo sysctl -w fs.inotify.max_user_instances=4096

            make ci/setup-k3d K3D_CLUSTER_NAME=amb-ci

            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export TEST_XML_DIR=/tmp/test-logs/xml/
            export DEV_KUBECONFIG=~/.kube/config
            export DEV_REGISTRY=${{ secrets.DEV_REGISTRY }}
            mkdir -p ${TEST_XML_DIR}
            make pytest-${{ matrix.test }}
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  check-pytest-unit:
    # pytest-unit is separate from pytests (above) because we know for certain that no cluster is needed.
    # XXX This is pretty much a crock.
    runs-on: ubuntu-latest
    env:
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    strategy:
      matrix:
        test:
          - unit
    name: pytest-${{ matrix.test }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - name: make pytest-${{ matrix.test }}
        uses: nick-invision/retry@v2.4.0
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: |
            export PREFIX=pytest-${{ matrix.test }}
            sudo sysctl -w fs.file-max=1600000
            sudo sysctl -w fs.inotify.max_user_instances=4096

            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export TEST_XML_DIR=/tmp/test-logs/xml/
            export DEV_KUBECONFIG=~/.kube/config
            export DEV_REGISTRY=${{ secrets.DEV_REGISTRY }}
            mkdir -p ${TEST_XML_DIR}
            make pytest-${{ matrix.test }}
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  check-chart:
    runs-on: ubuntu-latest
    name: chart-test
    env:
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: make test-chart
        run: |
          make test-chart
      - name: make release/promote-chart-passed
        run: |
          make release/promote-chart-passed

  build: #######################################################################
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      # See docker/base-python.docker.gen
      BASE_PYTHON_REPO: ${{ secrets.BASE_PYTHON_REPO }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - name: "make push"
        shell: bash
        run: |
          make push
      - name: "make push-dev"
        shell: bash
        run: |
          make push-dev
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty (from make push + make push-dev)"

  ##############################################################################
  pass:
    name: "job-promote-to-passed" # This is the job name that the branch protection looks for
    needs:
      - lint
      - build
      - generate
      - check-envoy-version
      - check-gotest
      - check-pytest
      - check-pytest-unit
      - check-chart
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "promote build to passed"
        run: |
          make release/promote-oss/dev-to-passed-ci
