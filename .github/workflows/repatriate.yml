name: repatriate
"on":
  push:
    branches:
      - release/v*

jobs:
  repatriate:
    runs-on: ubuntu-latest
    name: repatriate
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Log in to GitHub
        shell: bash
        run: |
          git config --global user.name '${{ secrets.GH_AUTO_USER }}'
          git config --global user.email '${{ secrets.GH_AUTO_EMAIL }}'
          git config --global 'url.https://${{ secrets.GH_GITHUB_API_KEY }}@github.com.insteadof' https://github.com
          echo '${{ secrets.GH_GITHUB_API_KEY }}' | gh auth login --with-token
      - name: Create PR
        id: step-create-pr
        shell: bash
        run: |
          set -e

          this_ver=${GITHUB_REF##*/}
          this_branch=release/${this_ver}
          echo "::set-output name=this_branch::${this_branch}"

          next_ver=$(git for-each-ref --format='%(refname:lstrip=4)' 'refs/remotes/origin/release/v*' | sort --version-sort | grep -A1 -Fx "$this_ver" | sed 1d)
          if test -n "$next_ver"; then
            case "$next_ver" in
              v2.0)
                next_ver=v2.4
                next_branch="release/${next_ver}"
                ;;
              v3.0)
                next_ver=v3.2
                next_branch="release/${next_ver}"
                if ! git rev-parse "origin/${next_branch}" &>/dev/null; then
                  next_branch='master'
                fi
                ;;
              *)
                next_branch="release/${next_ver}"
                ;;
            esac
          else
            next_ver="${this_ver%.*}.$((${this_ver##*.}+1))"
            next_branch='master'
          fi
          echo "::set-output name=next_branch::${next_branch}"

          merge_branch="ci/repatriate/from-${this_ver}-to-${next_ver}"
          if git checkout "$merge_branch"; then
            # branch already exists; update it.
            git merge "$this_branch"
            git push origin "$merge_branch"
          else
            # branch does not yet exist.
            git checkout -b "$merge_branch"
            git push --set-upstream origin "$merge_branch"
            # Go ahead and try to merge in the target branch; this is
            # necessary for the check-branch-version.yml checks to
            # pass on the PR.  But merging fails, don't sweat it; a
            # human having to fix the PR is still less work than a
            # human having to create the PR.
            git merge "origin/$next_branch" || git merge --abort || true
          fi

          url=$(gh pr list --limit=1 --head="$merge_branch" --state=open --json=url --jq='.[0].url')
          if [[ -n "$url" ]]; then
            echo "::set-output name=verb::Updated"
          else
            gh pr create \
              --title="[${next_ver}] Repatriate from ${this_ver}" \
              --body="This PR merges ${this_branch} in to ${next_branch}." \
              --base="$next_branch"
            url=$(gh pr list --limit=1 --head="$merge_branch" --state=open --json=url --jq='.[0].url')
            echo "::set-output name=verb::Created"
          fi
          echo "::set-output name=pr_url::${url}"
      - id: check-slack-webhook
        name: Assign slack webhook variable
        if: always()
        run: echo '::set-output name=slack_webhook_url::${{secrets.SLACK_WEBHOOK_URL}}'
      - name: Slack notification
        if: steps.check-slack-webhook.outputs.slack_webhook_url && always()
        uses: edge/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          success_text: "${{ steps.step-create-pr.outputs.verb }} repatriation PR merging ${{ steps.step-create-pr.outputs.this_branch }} in to ${{ steps.step-create-pr.outputs.next_branch }}"
          failure_text: "Creation of repatriation PR failed"
          fields: |
            [{ "title": "Repository", "value": "${{ github.repository }}", "short": true },
             { "title": "Branch", "value": "${{ github.ref }}", "short": true},
             { "title": "Pull Request", "value": "${{ steps.step-create-pr.outputs.pr_url }}"}]
      - uses: ./.github/actions/after-job
        if: always()
