package jwks_test

import (
	"crypto/rsa"
	"io/ioutil"
	"math/big"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/datawire/apro/lib/jwks"
	"github.com/datawire/apro/lib/testutil"
)

var jwksBytes, _ = ioutil.ReadFile("testdata/jwks.json")

func newBigIntFromBytes(bs []byte) *big.Int {
	ret := big.NewInt(0)
	ret.SetBytes(bs)
	return ret
}

//nolint:dupl
var jwksData = map[string]*rsa.PublicKey{
	"u4OfNFPHwEBosHjtrauObV84LnY": {
		N: newBigIntFromBytes([]byte{0xa1, 0x14, 0x50, 0x1b, 0xe8, 0x9b, 0xdf, 0x4c, 0x74, 0xf5, 0xe5, 0xad, 0xe, 0x92, 0xf4, 0xc1, 0x66, 0xa1, 0x3, 0xe8, 0x60, 0x8d, 0xcd, 0x25, 0x5a, 0x84, 0x14, 0xe2, 0x5c, 0x1, 0x16, 0x35, 0xd5, 0xd8, 0xf7, 0xcf, 0x22, 0x68, 0x80, 0xbf, 0xc, 0x4e, 0xc4, 0xd1, 0xb7, 0xe0, 0xc8, 0x27, 0xc3, 0x72, 0xbd, 0x86, 0xe0, 0x58, 0x2e, 0xca, 0xef, 0x39, 0x0, 0x1b, 0x31, 0xd0, 0x66, 0x13, 0xc9, 0x70, 0xcf, 0xc0, 0xc5, 0x28, 0xc5, 0xaa, 0x1e, 0xaa, 0x7, 0xdf, 0x14, 0xaa, 0xc, 0x68, 0x48, 0x60, 0x5a, 0x1b, 0x40, 0x38, 0x95, 0x46, 0x49, 0x1e, 0x72, 0x96, 0xde, 0xac, 0x7e, 0x61, 0xa8, 0x96, 0xae, 0x48, 0x3e, 0xcf, 0x8b, 0x0, 0xc1, 0x49, 0xf, 0xd1, 0x8, 0x32, 0x23, 0x6f, 0x44, 0x8e, 0x99, 0x24, 0xe9, 0x65, 0x1f, 0x7b, 0x5a, 0xce, 0x24, 0xd7, 0x3f, 0x75, 0xe7, 0xc5, 0x51, 0x7f, 0x80, 0x54, 0x6c, 0x68, 0xf3, 0x56, 0xde, 0x2d, 0x50, 0xc, 0xff, 0xcb, 0x67, 0x8, 0xe4, 0x9b, 0x17, 0x41, 0xf7, 0x20, 0x0, 0xf0, 0x77, 0xbe, 0x83, 0xfc, 0x7a, 0xe9, 0xf1, 0x1b, 0x6, 0x7f, 0x88, 0xcf, 0x1e, 0xbf, 0xd, 0xe1, 0x50, 0xec, 0x3b, 0xfa, 0x7b, 0xa2, 0x3f, 0x2b, 0x6c, 0xec, 0x74, 0xa4, 0xbd, 0x5e, 0x86, 0x33, 0xa, 0xd7, 0x7c, 0xec, 0xa6, 0x63, 0xfc, 0x34, 0xee, 0x66, 0x31, 0xc3, 0xfd, 0x8b, 0x9c, 0xa2, 0x27, 0x7e, 0xc5, 0x81, 0xb5, 0xc4, 0x48, 0xc, 0x6f, 0x8d, 0xae, 0xc8, 0xf6, 0xdf, 0xb2, 0xe0, 0xb4, 0x18, 0x4a, 0xed, 0x39, 0x33, 0xb9, 0x5a, 0xe0, 0xba, 0xaf, 0xff, 0xf9, 0xb9, 0x3, 0xc3, 0x1, 0x77, 0xa9, 0x34, 0x57, 0x18, 0x5, 0xfd, 0x2a, 0xbc, 0x18, 0xe2, 0x1b, 0x91, 0xc4, 0x34, 0x6c, 0x94, 0xc2, 0x20, 0xdf, 0x41, 0xea, 0x83}),
		E: int(newBigIntFromBytes([]byte{0x1, 0x0, 0x1}).Int64()),
	},
	"ie_qWCXhXxt1zIEsu4c7acQVGn4": {
		N: newBigIntFromBytes([]byte{0xeb, 0xcb, 0x71, 0xd9, 0xc9, 0xce, 0x7e, 0x4b, 0xc7, 0x7f, 0xbd, 0x39, 0x73, 0xe6, 0x48, 0x65, 0xf5, 0xe2, 0xcb, 0x11, 0x3a, 0x73, 0xd2, 0xea, 0xc5, 0x54, 0x3, 0x8c, 0x8b, 0x3e, 0xf4, 0x36, 0xef, 0xc, 0x42, 0x3b, 0xe3, 0x9d, 0xe4, 0x66, 0x2f, 0x6d, 0xbd, 0x6, 0x33, 0xb2, 0x42, 0x45, 0x74, 0x19, 0x43, 0xf0, 0xc6, 0x2e, 0x56, 0x15, 0xfc, 0x6, 0x98, 0xbf, 0x61, 0x41, 0x45, 0xf1, 0xea, 0x9, 0xd4, 0xf1, 0x42, 0xdb, 0xff, 0x36, 0xb0, 0x38, 0x45, 0xfa, 0x63, 0x49, 0xee, 0xc3, 0xeb, 0x62, 0xc8, 0xc, 0x24, 0x2, 0xf7, 0xad, 0xfc, 0xce, 0x29, 0x6, 0xa9, 0xc7, 0x79, 0xbd, 0x44, 0xf4, 0xbe, 0xd7, 0xc2, 0x80, 0x64, 0xe8, 0x3e, 0x48, 0x80, 0xf0, 0x6c, 0xd7, 0x2b, 0xe, 0x6e, 0x6b, 0x63, 0xe, 0x68, 0x5e, 0x2d, 0xa3, 0x6c, 0xee, 0x1c, 0xb4, 0xac, 0xd1, 0x28, 0xfd, 0xe3, 0xce, 0x7b, 0xc7, 0xd, 0xe2, 0xe7, 0x2c, 0x24, 0xdc, 0x9c, 0x31, 0xa4, 0x30, 0x24, 0x41, 0xb8, 0x43, 0x49, 0xba, 0xc, 0x21, 0xee, 0x81, 0xe3, 0xb4, 0x6a, 0x61, 0xd4, 0xbd, 0xef, 0x36, 0x92, 0x36, 0x96, 0xba, 0x1, 0xdc, 0x72, 0xb6, 0x4d, 0xc0, 0xf5, 0x32, 0xbe, 0x5c, 0x61, 0x37, 0x2b, 0x77, 0xe8, 0xfa, 0x6e, 0x69, 0x3c, 0x2d, 0x17, 0xb0, 0x2c, 0x22, 0x63, 0x8a, 0x96, 0x70, 0x9a, 0xed, 0xc3, 0x89, 0x6e, 0x3f, 0x91, 0x19, 0xe2, 0x83, 0xf, 0xe, 0xe4, 0x19, 0x98, 0x80, 0xc6, 0x24, 0x59, 0x9e, 0xc6, 0x97, 0x4e, 0x3c, 0x28, 0x16, 0x4b, 0xfb, 0xb3, 0xf2, 0x1d, 0x30, 0x17, 0x6f, 0xbb, 0x4c, 0xa7, 0xd1, 0x5d, 0x25, 0xf5, 0x98, 0xf9, 0x7b, 0xbd, 0x28, 0x1f, 0x5a, 0xc8, 0x5, 0xbc, 0xe0, 0x66, 0xc2, 0x30, 0x9e, 0xea, 0xa2, 0x88, 0xf0, 0xa0, 0x20, 0xdb, 0xdd}),
		E: int(newBigIntFromBytes([]byte{0x1, 0x0, 0x1}).Int64()),
	},
	"M6pX7RHoraLsprfJeRCjSxuURhc": {
		N: newBigIntFromBytes([]byte{0xc4, 0x74, 0x9c, 0x64, 0xc3, 0xe8, 0xf0, 0x58, 0x9f, 0xa0, 0x37, 0x2b, 0x82, 0x77, 0x16, 0x43, 0xb9, 0x86, 0x26, 0xd8, 0x8a, 0x86, 0xbb, 0x21, 0xa3, 0x4f, 0xae, 0x14, 0xf5, 0xe0, 0xf8, 0xe7, 0x67, 0x44, 0xa6, 0x2e, 0x75, 0x30, 0xfb, 0xf8, 0x1a, 0xb5, 0x30, 0x38, 0xdc, 0xa9, 0x64, 0x5f, 0xdc, 0x87, 0xc3, 0x56, 0x31, 0x49, 0x8b, 0x14, 0x12, 0xeb, 0x53, 0x3b, 0xc2, 0x6f, 0x70, 0x0, 0xb0, 0xe3, 0xfb, 0xe9, 0x4b, 0xb8, 0x92, 0x7d, 0x8c, 0x35, 0x0, 0x59, 0x30, 0x37, 0xc5, 0x6b, 0xd0, 0x2d, 0xb8, 0x81, 0x33, 0xe8, 0x2a, 0x53, 0x4b, 0x23, 0xe2, 0x67, 0x36, 0x95, 0x69, 0xba, 0x9c, 0xf7, 0xea, 0x97, 0x26, 0x1e, 0x5a, 0xd4, 0x1c, 0x48, 0x2d, 0x2c, 0x62, 0x42, 0xe5, 0x6b, 0x23, 0x60, 0x5f, 0x89, 0xe8, 0x28, 0x36, 0x97, 0x8a, 0xf8, 0x55, 0x3a, 0x9e, 0xdb, 0xc0, 0x65, 0xea, 0xef, 0xb3, 0x11, 0xcd, 0xe2, 0xf8, 0xfb, 0xda, 0xab, 0x45, 0x82, 0xa3, 0xbb, 0x31, 0xdf, 0x64, 0xbe, 0xe4, 0x34, 0x10, 0xac, 0xa8, 0xed, 0x7c, 0xe4, 0xfd, 0xd, 0x23, 0x62, 0x6d, 0x9b, 0xf, 0x84, 0xb2, 0xa6, 0x2c, 0xac, 0x26, 0x87, 0xb1, 0xf3, 0x51, 0x19, 0x1a, 0xd3, 0xbd, 0x41, 0xd4, 0xab, 0x78, 0x56, 0x6b, 0xce, 0x7d, 0x90, 0xaf, 0xf9, 0xb8, 0xd7, 0x7b, 0x4d, 0xe6, 0x36, 0x64, 0x4c, 0xa, 0x54, 0x3f, 0x1e, 0xcc, 0x29, 0x92, 0x7d, 0x1e, 0x7d, 0x67, 0x3c, 0xb1, 0x4e, 0xdb, 0x8f, 0xa6, 0x40, 0x92, 0x1d, 0x2f, 0x4e, 0xb5, 0x4b, 0xd2, 0xde, 0x6a, 0x93, 0x62, 0x2b, 0x7b, 0xde, 0xa7, 0x2f, 0xa6, 0xb8, 0xe5, 0xdd, 0x1f, 0x21, 0xa6, 0x35, 0xcb, 0x6f, 0xca, 0x1f, 0xb5, 0xfa, 0x56, 0xaf, 0x78, 0x45, 0x45, 0xda, 0x71, 0xaf, 0xb, 0xa8, 0x40, 0x43, 0xb8, 0x41}),
		E: int(newBigIntFromBytes([]byte{0x1, 0x0, 0x1}).Int64()),
	},
}

func TestJWKS(t *testing.T) {
	assert := &testutil.Assert{T: t}

	testIDP := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Write(jwksBytes)
	}))

	jwksParsed, err := jwks.FetchJWKS(testIDP.Client(), testIDP.URL+"/jwks.json")
	assert.NotError(err)

	for kid, pubkey := range jwksData {
		t.Run("kid="+kid, func(kid string, pubkey *rsa.PublicKey) func(*testing.T) {
			return func(t *testing.T) {
				assert := &testutil.Assert{T: t}
				key, err := jwksParsed.GetKey(kid)
				assert.NotError(err)
				assert.BigIntEQ(pubkey.N, key.N)
				assert.IntEQ(pubkey.E, key.E)
			}
		}(kid, pubkey))
	}
}
