linters:
  enable-all: true
  disable:
    - dupl # phil: raises false positives for non-duplicate code
    - gochecknoglobals
    - gochecknoinits
    - interfacer # author says it's deprecated, gives very subjective advice
    - prealloc
linters-settings:
  goconst:
    min-len: 5
  maligned:
    suggest-new: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/datawire/teleproxy
  depguard:
    list-type: blacklist
    include-go-root: true
    packages:
      - errors # use "github.com/pkg/errors"
      - golang.org/x/net/context # use "context"
      - github.com/datawire/kat-backend/xds/ # use "github.com/datawire/ambassador/go/"
      - github.com/lyft/ratelimit/proto/ # use "github.com/datawire/ambassador/go/"
issues:
  exclude-use-default: false
  new-from-rev: 61cc8815bf172110171836581439d1822c161b42
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
    # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    # gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited
    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)
    # gosec: Duplicated errcheck checks
    - G104
    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable
    # unparam: Some things need to return error even when that's always nil
    - result 0 [(]error[)] is always nil
  exclude-rules:
    # scopelint seems to be buggy and says things that don't syntactically make sense.
    - linters: [scopelint]
      text: "^Using the variable on range scope `.*` in function literal$"
