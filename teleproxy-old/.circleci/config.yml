version: 2.1

commands:

  "brew-install":
    parameters:
      "packages":
        type: string
    steps:
      - restore_cache:
          name: "Restore brew cache"
          keys:
            - brew-{{ arch }}
      - run: brew install << parameters.packages >>
      - save_cache:
          name: "Save brew cache"
          key: brew-{{ arch }}
          paths:
            - "/usr/local/Homebrew"

  "pip-install":
    parameters:
      "packages":
        type: string
    steps:
      - run: sudo pip install << parameters.packages >>

  "install-go":
    parameters:
      "version":
        type: string
        default: "1.13"
    steps:
      - run:
          name: "Install Go << parameters.version >>"
          command: |
            curl -L --fail -o /tmp/go.tar.gz https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz
            tar -C /tmp -xzf /tmp/go.tar.gz
            echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
            if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
              echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
            fi

  "install-kubectl":
    parameters:
      "version":
        type: string
        default: "1.12.2"
    steps:
      - run:
          name: "Install kubectl << parameters.version >>"
          command: |
            curl -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
            sudo install /tmp/kubectl /usr/local/bin/kubectl

  "with-go-mod-cache":
    parameters:
      "steps":
        type: steps
    steps:
      - restore_cache:
          name: "Restore Go module cache"
          keys:
            - go-mod-cache-{{ arch }}-{{ checksum "go.mod" }}-
            - go-mod-cache-{{ arch }}-
      - run: |
          echo 'export GOPROXY=file://$HOME/goproxy,$(go env GOPROXY)' >> "${BASH_ENV}"

      - steps: << parameters.steps >>

      - run:
          name: "Prepare to save Go module cache"
          command: |
            mkdir -p "$(go env GOPATH)/pkg/mod/cache/download/"
            rsync -av --delete "$(go env GOPATH)/pkg/mod/cache/download/" ~/goproxy
          when: always
      - save_cache:
          # Use {{arch}} as a proxy for
          # {{.Environment.HOME}}... because despite what the CircleCI
          # docs say, {{.Environment.HOME}} evaluates to "<no value>".
          #
          # Why put it in $HOME, instead of /tmp or something, and be
          # able to share the cache?  Because /tmp is a symlink to
          # /private/tmp on macOS, and CircleCI is broken on macOS
          # whenever symlinks are involved.
          name: "Save Go module cache"
          key: go-mod-cache-{{ arch }}-{{ checksum "go.mod" }}-{{ .BuildNum }}
          paths: "~/goproxy"
          when: always

  "with-docker-machine":
    parameters:
      "steps":
        type: steps
    steps:
      - restore_cache:
          name: "Restore docker-machine cache"
          keys:
            - docker-machine-{{ arch }}
      - run:
          name: "Launch docker-machine"
          command: |
            docker-machine create default --xhyve-boot2docker-url https://github.com/boot2docker/boot2docker/releases/download/v19.03.2/boot2docker.iso --driver xhyve
            # docker-machine backgrounded itself, but because Circle
            # CI will kill the process group if the 'command' returns,
            # so we now sleep forever.
            while true; do sleep 7200; done
          background: true
      - run:
          name: Wait for docker-machine to become ready
          command: until docker-machine env; do sleep 3; done && docker-machine env >> ${BASH_ENV}
      - run: docker system info

      - steps: << parameters.steps >>

      - save_cache:
          name: "Save docker-machine cache"
          key: docker-machine-{{ arch }}
          paths: "~/.docker"

  "docker-machine-port-forward":
    parameters:
      "port-name":
        type: string
        default: "UNDEFINED"
      "port-number":
        type: integer
        default: 1
    steps:
      - run:
          name: "docker-machine port-forward: << parameters.port-name >> (IPv4)"
          command: "socat tcp4-listen:<< parameters.port-number >>,reuseaddr,fork tcp:$(docker-machine ip):<< parameters.port-number >>"
          background: true
      - run:
          name: "docker-machine port-forward: << parameters.port-name >> (IPv6)"
          command: "socat tcp6-listen:<< parameters.port-number >>,reuseaddr,fork tcp:$(docker-machine ip):<< parameters.port-number >>"
          background: true

  "main":
    steps:
      - checkout
      - with-go-mod-cache:
          steps:
            - run: make build
            - run:
                # Use a ridiculously-long timeout because macOS CI is slow and
                # teleproxy/edgectl tests serialize on the machine lock.
                command: GOFLAGS=-timeout=30m make check
                no_output_timeout: 30m
      - run:
          name: "Gather logs"
          when: always
          command: |
            cp /tmp/edgectl.log . || true
            rsync -ma --include='*/' --include='*.tap' --include='*.log' --exclude='*' . /tmp/test-logs
            grep "Acquiring machine lock" build-aux/go-test.tap | sed 'sX.*teleproxy/XX' | uniq || true
      - store_artifacts:
          path: /tmp/test-logs
          destination: test-logs
      - run: |
          if test -n "$CIRCLE_TAG"; then
              export AWS_ACCESS_KEY_ID=$DEPLOY_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$DEPLOY_KEY
              make release
          fi

jobs:

  "macOS":
    macos:
      # macOS 10.12 (Sierra)
      xcode: "9.0"
    steps:
      - brew-install:
          packages: socat docker-machine-driver-xhyve docker jq
      - run: |
          sudo chown root:wheel /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve &&
          sudo chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
      - pip-install:
          packages: awscli
      - install-go
      - install-kubectl
      - with-docker-machine:
          steps:
            - docker-machine-port-forward:
                port-name: "Docker Registry"
                port-number: 5000
            - docker-machine-port-forward:
                port-name: "k3s"
                port-number: 6443
            - main

  "Ubuntu":
    machine:
      image: "ubuntu-1604:201903-01"
    steps:
      - pip-install:
          packages: awscli
      - install-go
      - install-kubectl
      - main

workflows:
  "ETK CI":
    jobs:
      - "macOS":
          filters:
            tags:
              only: /.*/
      - "Ubuntu":
          filters:
            tags:
              only: /.*/
