##############################################################################
# Ambassador-specific granular commands and utilities                        #
##############################################################################

version: 2.1

executors:

  "oss-linux":
    machine:
      # If you bump this, be sure to bump it in the "aes-linux"
      # executor below, and to bump "install-python.executor-key" in
      # the "amb-linux-install" command below.
      image: "ubuntu-2004:202008-01"
    working_directory: ~/project/ambassador

  "aes-linux":
    machine:
      # If you bump this, be sure to bump it in the "oss-linux"
      # executor above, and to bump "install-python.executor-key" in
      # the "amb-linux-install" command below.
      image: "ubuntu-2004:202008-01"
    working_directory: ~/project

commands:

  "amb-linux-install":
    steps:
      - install-python:
          executor-key: "202008-01"
      - pip-install:
          packages: awscli packaging
      - install-go
      - install-kubectl
      - install-node

  "amb-save-workspace":
    steps:
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - "."

  "amb-attach-workspace":
    steps:
      - attach_workspace:
          at: /home/circleci/project

  "amb-skip-if-no-code-changes":
    steps:
      - skip-if-only-changes:
          to: (charts/ambassador\|docs/\|*.md)

  "amb-checkout":
    steps:
      - when:
          condition:
            or:
            - equal: [ "https://github.com/datawire/ambassador", << pipeline.project.git_url >> ]
            - equal: [ "https://github.com/datawire/ambassador-private", << pipeline.project.git_url >> ]
          steps:
            - checkout:
                path: ~/project/ambassador
      - when:
          condition:
            or:
            - equal: [ "https://github.com/datawire/apro", << pipeline.project.git_url >> ]
            - equal: [ "https://github.com/datawire/apro-private", << pipeline.project.git_url >> ]
          steps:
            - run:
                working_directory: ~/project
                command: "rmdir ~/project/ambassador || true"
            - checkout:
                path: ~/project

  "amb-login-registry":
    steps:
      - run:
          name: "Docker login"
          command: |
            if [[ -n "$DOCKER_BUILD_USERNAME" && -n "DOCKER_BUILD_PASSWORD" ]]; then
              tries=0
              while true; do
                if [ "$tries" -gt 10 ] ; then
                  circleci step halt
                fi

                fail=0
                out=$(docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY%%/*}") || fail=1
                if [ "$fail" == "0" ] ; then
                  break
                fi

                echo $out
                if echo "$out" | grep "503 Service Unavailable" ; then
                  ((tries++))
                  sleep 30
                else
                  circleci step halt
                fi
              done
            fi

  "amb-config-registry":
    steps:
      - amb-login-registry
      - run:
          name: "Configure Docker registry"
          command: |
            if [[ -z "$DEV_REGISTRY" ]]; then
              echo >>"$BASH_ENV" 'export DEV_REGISTRY=127.0.0.1:31000'
              echo >>"$BASH_ENV" 'export BASE_REGISTRY=docker.io/datawiredev'
            fi

            echo >>"$BASH_ENV" 'unset BASH_ENV'

  "amb-config-cluster-and-registry":
    steps:
      - amb-login-registry
      - run:
          name: "Configure Kubernetes cluster and Docker registry"
          working_directory: ~/project/ambassador
          command: |
            if [[ -z "$DEV_REGISTRY" ]]; then
              echo >>"$BASH_ENV" 'export DEV_REGISTRY=127.0.0.1:31000'
              echo >>"$BASH_ENV" 'export BASE_REGISTRY=docker.io/datawiredev'
            fi

            ./.ci/cluster-claim
            rm -f ~/.kube/config
            cp ~/.kube/kubeception.yaml ~/.kube/config

            echo >>"$BASH_ENV" 'if test -e ~/.kube/kubeception.yaml; then'
            echo >>"$BASH_ENV" '  export DEV_KUBECONFIG=~/.kube/kubeception.yaml'
            echo >>"$BASH_ENV" '  if [[ "$DEV_REGISTRY" == 127.0.0.1:31000 ]]; then'
            echo >>"$BASH_ENV" '    KUBECONFIG=$DEV_KUBECONFIG go run ./cmd/k8sregistryctl up --storage=hostPath'
            echo >>"$BASH_ENV" '  fi'
            echo >>"$BASH_ENV" 'fi'

            echo >>"$BASH_ENV" 'unset BASH_ENV'

  "amb-teardown-cluster":
    steps:
      - run:
          working_directory: ~/project/ambassador
          command: "./.ci/cluster-unclaim"
          when: "always"

  "amb-save-logs":
    steps:
      - run:
          name: "Gather logs"
          when: always
          command: |
            rsync \
              --prune-empty-dirs --archive --include='*/' \
              --include='*.xml' \
              --include='*.tap' \
              --include='*.log' \
              --include='Test*.webm' \
              --exclude='*' \
              . \
              /tmp/test-logs
            if test -d ~/.cache/telepresence/logs; then
              rsync \
                --archive \
                ~/.cache/telepresence/logs \
                /tmp/test-logs/telepresence-logs
            fi
            if [ -f docker/container.txt ] && docker inspect $(cat docker/container.txt) >/dev/null; then
              docker exec $(cat docker/container.txt) /bin/bash -c 'mkdir -p /tmp/build-container-logs && (cp -r /tmp/*.txt /tmp/*.json /tmp/*.log /tmp/*.yaml /tmp/build-container-logs || true) && ((test -d ~/.cache/telepresence/logs && cp -r ~/.cache/telepresence/logs /tmp/build-container-logs/telepresence-logs) || true)'
              docker cp $(cat docker/container.txt):/tmp/build-container-logs /tmp/test-logs/build-container-logs || true
            fi
      - store_artifacts:
          name: "Store logs"
          path: /tmp/test-logs
          destination: test-logs
      - run:
          name: "Gather coverage"
          when: always
          command: |
              if [ -f docker/container.txt ] && docker inspect $(cat docker/container.txt) >/dev/null; then
                docker cp $(cat docker/container.txt):/tmp/cov_html /tmp/cov_html || true
              fi
      - store_artifacts:
          name: "Store coverage"
          path: /tmp/cov_html
          destination: coverage
      - run:
          name: "Gather pod logs"
          when: always
          command: |
              if ! test -f ~/.kube/kubeception.yaml ; then
                exit 0
              fi

              export KUBECONFIG=~/.kube/kubeception.yaml
              mkdir -p /tmp/pod-logs
              podsfile=/tmp/pod-logs/all-pods.txt
              (kubectl get pods --all-namespaces -ocustom-columns="name:.metadata.name,namespace:.metadata.namespace" --no-headers || true) > $podsfile
              (kubectl describe pods --all-namespaces || true) > /tmp/pod-logs/all-pods-described.txt

              cat $podsfile | while IFS= read -r line; do
                name=$(echo $line | awk '{print $1}')
                ns=$(echo $line | awk '{print $2}')
                nsdir=/tmp/pod-logs/${ns}/
                mkdir -p $nsdir
                outfile=${nsdir}/${name}-pod.log
                (kubectl logs -n $ns $name > $outfile || echo "FAILED, status $ret, continuing...") || true
              done
      - store_artifacts:
          name: "Store pod logs"
          path: /tmp/pod-logs
          destination: pod-logs

  "amb-skip-if-bad-chart-version":
    steps:
      - run:
          name: "Diff changes"
          command: |
            thisversion=$(grep version: charts/ambassador/Chart.yaml | awk ' { print $2 }')

            if [[ "<< pipeline.git.tag >>" != "chart-v${thisversion}" ]]; then
              echo "Chart version ${thisversion} doesn't match tag << pipeline.git.tag >>; aborting"
              exit 1
            fi
