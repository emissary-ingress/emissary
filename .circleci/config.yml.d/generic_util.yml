##############################################################################
# Generic reusable commands                                                  #
##############################################################################

version: 2.1

commands:
  "install-gotestsum":
    steps:
    - run:
        name: "Install gotestsum"
        command: |
          go get gotest.tools/gotestsum
  "install-redis":
    steps:
    - run:
        name: "Install Redis"
        command: |
          sudo apt update -y
          sudo apt install -y redis-server

  "install-k3d":
    parameters:
      "version":
        type: string
        default: "v3.4.0"
    steps:
      - run:
          name: "Install K3D << parameters.version >>"
          command: |
            curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=<< parameters.version >>  bash

  "pip-install":
    parameters:
      "packages":
        type: string
    steps:
      - run: |
          if [[ "$(which pip3)" == *pyenv* ]]; then
            pip3 install << parameters.packages >>
          else
            sudo pip3 install << parameters.packages >>
          fi

  "install-node":
    parameters:
      "version":
        type: string
        default: "14"
    steps:
      - run:
          name: "Install Node << parameters.version >>"
          command: |
            echo 'export NVM_DIR=/opt/circleci/.nvm' >> ${BASH_ENV}
            echo 'source $NVM_DIR/nvm.sh' >> ${BASH_ENV}

            export NVM_DIR=/opt/circleci/.nvm
            source $NVM_DIR/nvm.sh
            if ! nvm ls << parameters.version >> > /dev/null; then nvm install << parameters.version >>; fi
            nvm alias default << parameters.version >>
  "install-helm":
    parameters:
      "version":
        type: string
        default: "v3.4.1"
    steps:
      - run:
          name: "Install Helm << parameters.version >>"
          command: |
            set -x
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh --version << parameters.version >>
            rm ./get_helm.sh

  "install-go":
    parameters:
      "version":
        type: string
        default: "1.15"
    steps:
      - run:
          name: "Install Go << parameters.version >>"
          command: |
            set -x
            if [[ $OS == Windows_NT ]]; then
              curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
              mv /c/go /c/go-112
              unzip -q /tmp/go.zip -d /c/
            else
              curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
              tar -C /tmp -xzf /tmp/go.tar.gz
              echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
              if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
                echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
              fi
              . "$BASH_ENV"
            fi
            go version

  "install-kubectl":
    parameters:
      "version":
        type: string
        default: "1.14.0"
    steps:
      - run:
          name: "Install kubectl << parameters.version >>"
          command: |
            curl --retry 5 --retry-delay 5 -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
            sudo install /tmp/kubectl /usr/local/bin/kubectl

  "install-yarn":
    steps:
      - run:
          name: "Install Yarn"
          command: |
            curl --retry 5 --retry-delay 5 -o- -L https://yarnpkg.com/install.sh | bash
            echo 'PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> "$BASH_ENV"

  "install-python":
    parameters:
      "version":
        type: string
        default: "3.8.5"
      "pip-version":
        type: string
        default: "20.1.1"
      "executor-key":
        type: string
    steps:
      - restore_cache:
          name: "Restore Python install cache"
          key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version >>"
      - run:
          name: "Install Python << parameters.version >>"
          command: |
            set -x
            pyenv versions
            pyenv install --skip-existing << parameters.version >>
            pyenv global 2.7.18 << parameters.version >>
            pyenv versions
            pip3 install pip==<< parameters.pip-version>>
      - save_cache:
          name: "Save Python install cache"
          key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version >>"
          paths:
            - "/opt/circleci/.pyenv"

  "dirty-check":
    steps:
      - run:
          name: "Dirty check"
          command: |
            # On Windows, `git status` doesn't record no-op
            # line-ending changes in to the index, so things show as
            # dirty even if they aren't.  Trying to `add` them does
            # trigger the appropriate index update.  So do a `git add`
            # *before* the `git status --porcelain` to work around
            # Windows being terrible; we'd otherwise put the `git add`
            # inside of the `if` block to help generate better output
            # for `git diff`.
            git add .
            if [[ -n "$(git status --porcelain)" ]]; then
               PAGER= git diff --cached
               exit 1
            fi

  "skip-if-no-new-chart":
    steps:
      - run:
          name: "Diff chart changes"
          command: |
            if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
              echo "There is no base_revision, therefore no changes"
              exit 0
            fi
            COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
            echo "Commit range: " $COMMIT_RANGE
            git --no-pager diff $COMMIT_RANGE charts/ambassador/Chart.yaml
            if ! git --no-pager diff $COMMIT_RANGE charts/ambassador/Chart.yaml | grep -q +version; then
              echo "Halting this CircleCI job because the version was not changed in Chart.yaml"
              circleci step halt
            fi

  "skip-if-no-changes":
    parameters:
      "to":
        description: A POSIX ERE (grep -E regex) that matches which filenames to check for changes in
        type: string
    steps:
      - run:
          name: "Diff changes"
          command: |
            if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
              echo "There is no base_revision, therefore no changes"
              exit 0
            fi

            COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
            echo "Commit range: " $COMMIT_RANGE
            git --no-pager diff $COMMIT_RANGE --name-only

            if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -E "<< parameters.to >>") == "" ]]; then
              echo "Halting this CircleCI job because code in the following paths have not changed:"
              echo "<< parameters.to >>"
              circleci step halt
            fi

  "skip-if-only-changes":
    parameters:
      "to":
        description: A POSIX ERE (grep -E regex) that matches which filenames to check for changes in
        type: string
    steps:
      - run:
          name: "Diff changes"
          command: |
            if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
              echo "There is no base_revision, therefore no changes"
              exit 0
            fi

            COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
            echo "Commit range: " $COMMIT_RANGE
            git --no-pager diff $COMMIT_RANGE --name-only

            if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -v -E "<< parameters.to >>") == "" ]]; then
              echo "Halting this CircleCI job because only code in the following paths has changed:"
              echo "<< parameters.to >>"
              circleci step halt
            fi
