version: 2.1

# Secure environment variables set from the Web UI:
#
# - AWS_ACCESS_KEY_ID (AWS S3)
# - AWS_SECRET_ACCESS_KEY (AWS S3)
#
# - DEV_REGISTRY (DockerHub)
# - DOCKER_BUILD_USERNAME (DockerHub)
# - DOCKER_BUILD_PASSWORD (DockerHub)
#
# - RELEASE_REGISTRY (DockerHub)
# - DOCKER_RELEASE_USERNAME (DockerHub)
# - DOCKER_RELEASE_PASSWORD (DockerHub)
#
# - KUBECEPTION_TOKEN

commands:

  ######################################################################
  # Commands that are complete jobs                                    #
  #                                                                    #
  # (factored out to be commands so that they can be shared between    #
  # "oss-linux" and "aes-linux" executors)                             #
  ######################################################################

  "job-chart":
    steps:
      - amb-linux-install
      - amb-checkout
      - amb-skip-if-no-changes-not-release:
          to: charts/ambassador
      - install-k3d
      # We might need to be logged in the registry to pull the Envoy
      # image or the builder-base image.
      - amb-config-registry
      # main
      - run: make test-chart

  "job-chart-changelog":
    steps:
      - amb-linux-install
      - amb-checkout
      - skip-if-no-new-chart
      - run: |
          CHART_NAME=ambassador ./charts/scripts/check_updated_changelog.sh

  "job-chart-publish":
    steps:
      - amb-linux-install
      - amb-checkout
      - amb-skip-if-bad-chart-version
      - run: |
          CHART_NAME=ambassador ./charts/scripts/check_updated_changelog.sh
      - install-k3d
      # We might need to be logged in the registry to pull the Envoy
      # image or the builder-base image.
      - amb-config-registry
      # main
      #- run: make test-chart
      - run: make test-chart
      - run: make release/ga/chart-push

  "job-manifests-publish":
    steps:
      - amb-linux-install
      - amb-checkout
      - amb-config-registry
      - run:
          name: "Publishing manifests"
          command: |
            make push-manifests
            make publish-docs-yaml

  "job-generate":
    steps:
      # setup
      - amb-linux-install
      - install-helm
      - amb-checkout
      # We might need to be logged in the registry to pull the Envoy
      # image or the builder-base image.
      - amb-config-registry

      # main
      - run: make generate
      - dirty-check
      # Run it again to make sure that it is possible to run it twice
      # in a row.
      - run: make generate
      - dirty-check

  "job-yaml-publish-s3":
    parameters:
      "update-stable":
        type: boolean
        default: false
    steps:
      # setup
      - amb-linux-install
      - amb-checkout
      - amb-config-registry
      # main
      - run:
          name: "Publish to S3"
          command: |
            export BUMP_STABLE=<< parameters.update-stable >>
            make publish-docs-yaml

  "job-lint":
    steps:
      # setup
      - amb-linux-install
      - amb-checkout
      # We might need to be logged in the registry to pull the
      # builder-base image.
      - amb-config-registry

      # main
      - run: make lint

  "job-promote-passed-ci-build":
    steps:
      - amb-linux-install
      - amb-attach-workspace
      - amb-skip-if-not-master-or-release
      - run:
          name: "promote build to passed"
          command: |
            make release/promote-oss/dev-to-passed-ci

  "job-images":
    parameters:
      "release":
        type: boolean
        default: false
      "save_images_to_workspace":
        type: boolean
        default: false
      "push_nightly":
        type: boolean
        default: false
    steps:
      # setup
      - amb-linux-install
      - amb-checkout
      - amb-save-workspace
      - amb-skip-if-no-code-changes-not-release
      - amb-config-registry

      # main
      - run: make push
      - when:
          condition:
            not: << parameters.release >>
          steps:
            - run:
                name: "Push dev images"
                command: |
                  make push-dev
            - run:
                name: "Clean up dirty chart stuff"
                command: |
                  make chart-clean
            - run:
                name: "Print RC promote info"
                command: |
                  echo "To start the release process, you can checkout the following sha"
                  echo "Then run 'make release/prep-rc'"
                  echo "See notion page for more details: https://www.notion.so/datawire/X-Y-Z-Emissary-Checklist-eef145314ce4496c8424d15f35595a18"
                  echo "Commit SHA:"
                  git rev-parse HEAD

      - when:
          condition: << parameters.release >>
          steps:
            - run:
                name: "Release"
                command: |
                  docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
                  DEV_KUBECONFIG="-skip-for-release-" make release/bits
      - when:
          condition: << parameters.push_nightly >>
          steps:
            - run:
                name: "Push nightly images"
                command: |
                  make push-nightly
            - run:
                name: "Clean up dirty chart stuff"
                command: |
                  make chart-clean

      # teardown
      - dirty-check
      - amb-save-workspace

  "job-gotest":
    parameters:
      "fast-reconfigure":
        type: boolean
        default: false
      "legacy-mode":
        type: boolean
        default: false
    steps:
      # setup
      - amb-linux-install
      - install-gotestsum
      - amb-checkout
      - amb-skip-if-no-code-changes-not-release
      - amb-config-registry
      - run:
          name: "Test"
          no_output_timeout: "30m"
          command: |
            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export AMBASSADOR_LEGACY_MODE=<< parameters.legacy-mode >> # ParseBool
            export AMBASSADOR_FAST_RECONFIGURE=<< parameters.fast-reconfigure >> # ParseBool
            export TEST_XML_DIR=/tmp/test-logs/xml/
            mkdir -p ${TEST_XML_DIR}
            make gotest

      # teardown
      - amb-save-logs
      - store_test_results:
          path: /tmp/test-logs/xml/
      - dirty-check

  "job-test":
    parameters:
      "test":
        type: enum
        enum:
          - "test" # everything but pytest-envoy
          - "ingresstest"
          - "pytest"
          - "pytest-envoy"
          - "pytest-envoy-v3"
        default: "test"
      "fast-reconfigure":
        type: boolean
        default: false
      "legacy-mode":
        type: boolean
        default: false
    steps:
      # setup
      - amb-linux-install
      - amb-attach-workspace
      - amb-skip-if-no-code-changes-not-release
      # pytest-envoy can be skipped unless the envoy.mk file changes, or the ambex control
      # plane changes, or the gold files change.
      - when:
          condition:
            or:
              - equal: [ "pytest-envoy", << parameters.test >> ]
              - equal: [ "pytest-envoy-v3", << parameters.test >> ]
          steps:
            - amb-skip-if-no-changes-not-release:
                to: "(/envoy\\.mk$|/python/tests/gold/|/pytest/gold/|/cmd/ambex/)"
            - run: |
                if [[ -z "$KUBECEPTION_TOKEN" ]]; then
                  circleci step halt
                fi
      - run:
          name: "Set USE_LOCAL_K3S_CLUSTER=1"
          command:
            echo >>"$BASH_ENV" 'export USE_LOCAL_K3S_CLUSTER=1'
      - run:
          name: "Configure system file and inotify maximums"
          command: |
            sudo sysctl -w fs.file-max=1600000
            sudo sysctl -w fs.inotify.max_user_instances=4096
      - install-helm
      - install-k3d
      - amb-config-cluster-and-registry
      # main
      - run:
          name: "Ensure CI configuration is up-to-date"
          command: |
            set -x
            expected=$(printf '%s\n' ingresstest gotest pytest e2etest | LC_COLLATE=C sort -u | xargs echo)
            actual=$(make -n noop --print-data-base 2>/dev/null | sed -n 's/^test://p' | xargs printf '%s\n' | LC_COLLATE=C sort -u | xargs echo)
            if [[ "$actual" != "$expected" ]]; then
              echo "Makefile 'test' target has changed to $actual, you need to update '.circleci/config.yml.d/amb_jobs.yml'" >&2
              exit 1
            fi

      - run:
          name: "Test"
          no_output_timeout: "30m"
          command: |
            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export AMBASSADOR_LEGACY_MODE=<< parameters.legacy-mode >> # ParseBool
            export AMBASSADOR_FAST_RECONFIGURE=<< parameters.fast-reconfigure >> # ParseBool
            export TEST_XML_DIR=/tmp/test-logs/xml/
            export DEV_KUBECONFIG=~/.kube/kubeception.yaml
            mkdir -p ${TEST_XML_DIR}
            make << parameters.test >>

      # teardown
      - amb-save-logs
      - store_test_results:
          path: /tmp/test-logs/xml/
      - dirty-check
      - amb-teardown-cluster

  "job-promote-to-rc-latest":
    parameters:
      "channel":
        type: enum
        enum: ["oss", "aes"]
    steps:
      - run: "true" # Always run a no-op step so that this config has non-zero steps even for -private repos
      - when:
          condition: # Don't do this in the -private repos
            or:
            - equal: [ "https://github.com/emissary-ingress/emissary", << pipeline.project.git_url >> ]
          steps:
            - amb-linux-install
            - amb-checkout
            - run:
                name: "Promote to dev build to RC"
                command: |
                  docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
                  DEV_KUBECONFIG="-skip-for-release-" make release/promote-<< parameters.channel >>/dev-to-rc
            - run:
                name: "Print RC artifact info"
                command: |
                  make release/print-test-artifacts

  "job-promote-to-ga":
    parameters:
      "channel":
        type: enum
        enum: ["oss", "aes"]
    steps:
      - amb-linux-install
      - amb-checkout
      - run:
          name: "Promote to GA"
          command: |
            docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
            DEV_KUBECONFIG="-skip-for-release-" make release/promote-<< parameters.channel >>/to-ga
