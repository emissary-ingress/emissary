version: 2.1
orbs:
  win: circleci/windows@1.0.0

# Secure environement variables set from the Web UI:
# - DEPLOY_KEY_ID (AWS S3)
# - DEPLOY_KEY (AWS S3)
#
# - DEV_REGISTRY (Quay)
# - DOCKER_BUILD_USERNAME (Quay)
# - DOCKER_BUILD_PASSWORD (Quay)
#
# - RELEASE_REGISTRY (Quay)
# - DOCKER_RELEASE_USERNAME (Quay) (optional)
# - DOCKER_RELEASE_PASSWORD (Quay) (optional)
#
# - KUBERNAUT_TOKEN (Kubernaut)

commands:

  ##############################################################################
  # Generic reusable commands                                                  #
  ##############################################################################

  "pip-install":
    parameters:
      "packages":
        type: string
    steps:
      - run: sudo pip install << parameters.packages >>

  "install-node":
    parameters:
      "version":
        type: string
        default: "10"
    steps:
      - run:
          name: "Install Node << parameters.version >>"
          command: |
            echo 'export NVM_DIR=/opt/circleci/.nvm' >> ${BASH_ENV}
            echo 'source $NVM_DIR/nvm.sh' >> ${BASH_ENV}

            export NVM_DIR=/opt/circleci/.nvm
            source $NVM_DIR/nvm.sh
            nvm alias default << parameters.version >>

  "install-go":
    parameters:
      "version":
        type: string
        default: "1.13"
    steps:
      - run:
          name: "Install Go << parameters.version >>"
          command: |
            set -x
            if [[ $OS == Windows_NT ]]; then
              curl https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
              mv /c/go /c/go-112
              unzip -q /tmp/go.zip -d /c/
            else
              curl https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
              tar -C /tmp -xzf /tmp/go.tar.gz
              echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
              if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
                echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
              fi
              . "$BASH_ENV"
            fi
            go version

  "install-kubectl":
    parameters:
      "version":
        type: string
        default: "1.14.0"
    steps:
      - run:
          name: "Install kubectl << parameters.version >>"
          command: |
            curl -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
            sudo install /tmp/kubectl /usr/local/bin/kubectl

  "install-python":
    parameters:
      "version":
        type: string
        default: "3.6.3"
      "executor-key":
        type: string
    steps:
      - restore_cache:
          name: "Restore Python install cache"
          key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>"
      - run:
          name: "Install Python << parameters.version >>"
          command: |
            pyenv versions
            pyenv install --skip-existing << parameters.version >>
            pyenv global 2.7.12 << parameters.version >>
            pyenv versions
      - save_cache:
          name: "Save Python install cache"
          key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>"
          paths:
            - "/opt/circleci/.pyenv"

  ##############################################################################
  # AES-specific granular commands                                             #
  ##############################################################################

  "aes-checkout":
    steps:
      - checkout
      - run: "./get-amb-repo.sh && ln -s project/ambassador ../ambassador"

  "aes-save-logs":
    steps:
      - run:
          name: "Gather logs"
          when: always
          command: |
            rsync -ma --include='*/' --include='*.tap' --include='*.log' --include='Test*.webm' --exclude='*' . /tmp/test-logs
      - store_artifacts:
          name: "Store logs"
          path: /tmp/test-logs
          destination: test-logs

  "aes-dirty-check":
    steps:
      - run:
          name: "Dirty check"
          command: |
            # On Windows, `git status` doesn't record no-op
            # line-ending changes in to the index, so things show as
            # dirty even if they aren't.  Trying to `add` them does
            # trigger the appropriate index update.  So do a `git add`
            # *before* the `git status --porcelain` to work around
            # Windows being terrible; we'd otherwise put the `git add`
            # inside of the `if` block to help generate better output
            # for `git diff`.
            git add .
            if [[ -n "$(git status --porcelain)" ]]; then
               PAGER= git diff --cached
               exit 1
            fi
            git -C ambassador add .
            if [[ -n "$(git -C ambassador status --porcelain)" ]]; then
               PAGER= git -C ambassador diff --cached
               exit 1
            fi

  ##############################################################################
  # AES-specific workflow commands                                             #
  ##############################################################################

  "aes-main":
    steps:
      - aes-checkout
      - run:
          name: "Check Make Test"
          command: |
            set -x
            set +o pipefail # Our make invocation below will always "fail", so clear pipefail.
            test_targets=$(make -n noop --print-data-base 2>/dev/null | egrep '^test:' | sed -e s'/^test: *//' | tr ' ' '\n' | sort | tr '\n' ' ' | sed -e 's/ $//')
            if [ "$test_targets" != "e2etest gotest pytest" ]; then
              echo "Test target has changed to $test_targets, you need to update Circle" >&2
              exit 1
            fi
      - run:
          name: "Build"
          command: |
            docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY}"
            .circleci/kubernaut-claim.sh
            export DEV_KUBECONFIG=~/.kube/$(cat ~/kubernaut-claim.txt).yaml
            make push
      - run:
          name: "Go Tests"
          command: |
            export DEV_KUBECONFIG=~/.kube/$(cat ~/kubernaut-claim.txt).yaml
            make gotest GOTEST_PKGS=github.com/datawire/apro/...
      - run:
          name: "KAT"
          command: |
            export DEV_KUBECONFIG=~/.kube/$(cat ~/kubernaut-claim.txt).yaml
            export DEV_KUBE110=yes
            export KAT_REQ_LIMIT=600
            make pytest-only
      - run:
          name: "E2E Tests"
          command: |
            export DEV_KUBECONFIG=~/.kube/$(cat ~/kubernaut-claim.txt).yaml
            make e2etest
      - run:
          command: ".circleci/kubernaut-unclaim.sh"
          when: "always"
      - aes-dirty-check
      - run:
          name: "Release"
          command: |
            if [[ -z "$CIRCLE_TAG" ]]; then
                echo 'Skipping for non-tagged build'
                exit 0
            fi
            export AWS_ACCESS_KEY_ID=$DEPLOY_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$DEPLOY_KEY
            if [[ -n "${DOCKER_RELEASE_USERNAME:-}" ]]; then
                docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY}"
            fi
            DEV_KUBECONFIG="-skip-for-release-" make release/bits
      - aes-save-logs

  "aes-promote":
    steps:
      - aes-checkout
      - run: |
          export AWS_ACCESS_KEY_ID=$DEPLOY_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$DEPLOY_KEY
          docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY}"
          if [[ -n "${DOCKER_RELEASE_USERNAME:-}" ]]; then
              docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY}"
          fi
          DEV_KUBECONFIG="-skip-for-release-" make release/promote-aes/to-ga

  "aes-cli-tools":
    steps:
      - aes-checkout
      - run: ./build-aux-local/module_version.sh apro
      - run:
          name: "Build"
          command: |
            set -x

            time ./build-aux-local/build_push_cli.sh build edgectl
            time ./build-aux-local/build_push_cli.sh build aes-plugin-runner
            time ./build-aux-local/build_push_cli.sh build apictl-key

            ~/bin/edgectl version || true
            ~/bin/aes-plugin-runner --version || true
            ~/bin/apictl-key version || true
      - store_artifacts:
          path: ~/bin
      - aes-dirty-check
      - run:
          name: "Release"
          # This only runs for pre-release tags; for GA tags the
          # "aes-main" command promotes the pre-release artifacts.
          command: |
            if [[ -z "$CIRCLE_TAG" ]]; then
                echo 'Skipping for non-tagged build'
                exit 0
            fi
            export AWS_ACCESS_KEY_ID=$DEPLOY_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$DEPLOY_KEY
            ./build-aux-local/build_push_cli.sh push edgectl
            ./build-aux-local/build_push_cli.sh push aes-plugin-runner
            ./build-aux-local/build_push_cli.sh push-private apictl-key

jobs:
  "main":
    machine:
      # If you bump this, be sure to bump install-python.executor-key
      # below.
      image: "ubuntu-1604:201903-01"
    steps:
      - pip-install:
          packages: awscli
      - install-go
      - install-kubectl
      - install-node
      - install-python:
          executor-key: "201903-01"
      - aes-main

  "macOS-cli-tools":
    macos:
      xcode: "10.1.0"
    steps:
      - pip-install:
          packages: awscli
      - install-go
      - aes-cli-tools

  "Linux-cli-tools":
    machine:
      image: "ubuntu-1604:201903-01"
    steps:
      - pip-install:
          packages: awscli
      - install-go
      - aes-cli-tools

  "Windows-cli-tools":
    executor:
      name: win/vs2019
      shell: bash
    steps:
      - run:
          name: "Environment"
          command: env
      - install-go
      - aes-cli-tools

  "promote":
    machine:
      # If you bump this, be sure to bump install-python.executor-key
      # below.
      image: "ubuntu-1604:201903-01"
    steps:
      - pip-install:
          packages: awscli
      - install-go
      - install-kubectl
      - install-node
      - install-python:
          executor-key: "201903-01"
      - aes-promote

workflows:
  "AES Build and Test":
    # Run these on all branches, and on prerelease tags.  Do not run
    # them on unrecognized tags (do nothing) or GA tags (there's a
    # separate GA workflow).
    jobs:
      - "Windows-cli-tools":
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
      - "Linux-cli-tools":
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
      - "macOS-cli-tools":
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
      - "main":
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
  "AES Promote to GA":
    jobs:
      - "promote":
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
