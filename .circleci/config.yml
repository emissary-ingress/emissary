# Generated by `./generate`. DO NOT EDIT.

version: 2.1
# Secure environment variables set from the Web UI:
#
# - AWS_ACCESS_KEY_ID (AWS S3)
# - AWS_SECRET_ACCESS_KEY (AWS S3)
#
# - DEV_REGISTRY (DockerHub)
# - DOCKER_BUILD_USERNAME (DockerHub)
# - DOCKER_BUILD_PASSWORD (DockerHub)
#
# - RELEASE_REGISTRY (DockerHub)
# - DOCKER_RELEASE_USERNAME (DockerHub)
# - DOCKER_RELEASE_PASSWORD (DockerHub)
#
# - KUBECEPTION_TOKEN
commands:
  ######################################################################
  # Commands that are complete jobs                                    #
  #                                                                    #
  # (factored out to be commands so that they can be shared between    #
  # "oss-linux" and "aes-linux" executors)                             #
  ######################################################################
  "job-chart":
    steps:
    - amb-linux-install
    - amb-checkout
    - skip-if-no-changes:
        to: charts/ambassador
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - # main
      run: make test-chart
  "job-chart-changelog":
    steps:
    - amb-linux-install
    - amb-checkout
    - skip-if-no-new-chart
    - run: |
        CHART_NAME=ambassador ./charts/scripts/check_updated_changelog.sh
  "job-emissary-chart":
    steps:
    - amb-linux-install
    - amb-checkout
    - skip-if-no-changes:
        to: charts/emissary-ingress
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - # main
      run: make -f charts/emissary-ingress/Makefile test-chart
  "job-chart-publish":
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-skip-if-bad-chart-version
    - run: |
        CHART_NAME=ambassador ./charts/scripts/check_updated_changelog.sh
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - # main
      run: make test-chart
    - run: charts/ambassador/ci/push_chart.sh
  "job-manifests-publish":
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-config-registry
    - run: manifests/push_manifests.sh
  "job-emissary-chart-publish":
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-skip-if-bad-chart-version
    - run: |
        ./charts/ambassador/ci/check_updated_changelog.sh
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - # main
      run: make test-chart
    - run: charts/emissary-ingress/ci/push_chart.sh
  "job-generate":
    steps:
    # setup
    - amb-linux-install
    - install-helm
    - amb-checkout
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - # main
      run: echo "hi"
    - dirty-check
    - # Run it again to make sure that it is possible to run it twice
      # in a row.
      run: echo "hi"
    - dirty-check
  "job-lint":
    steps:
    # setup
    - amb-linux-install
    - amb-checkout
    # We might need to be logged in the registry to pull the
    # builder-base image.
    - amb-config-registry
    - # main
      run: make lint
  "job-images":
    parameters:
      "release":
        type: boolean
        default: false
      "save_images_to_workspace":
        type: boolean
        default: false
      "push_nightly":
        type: boolean
        default: false
    steps:
    # setup
    - amb-linux-install
    - amb-checkout
    - amb-skip-if-no-code-changes
    - amb-config-registry
    - # main
      run: make images
    - run: |
        [[ "$DEV_REGISTRY" == 127.0.0.1:31000 ]] || make push
    - when:
        condition:
          not: << parameters.release >>
        steps:
        - run:
            name: "Push dev images"
            command: |
              [[ "$DEV_REGISTRY" == 127.0.0.1:31000 ]] || make push-dev
        - run:
            name: "Clean up dirty chart stuff"
            command: |
              make chart-clean
    - when:
        condition: << parameters.release >>
        steps:
        - run:
            name: "Release"
            command: |
              docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
              DEV_KUBECONFIG="-skip-for-release-" make release/bits
    - when:
        condition: << parameters.push_nightly >>
        steps:
        - run:
            name: "Push nightly images"
            command: |
              make push-nightly
        - run:
            name: "Clean up dirty chart stuff"
            command: |
              make chart-clean
    # teardown
    - dirty-check
    - amb-save-workspace
  "job-gotest":
    parameters:
      "fast-reconfigure":
        type: boolean
        default: false
      "legacy-mode":
        type: boolean
        default: false
    steps:
    # setup
    - amb-linux-install
    - install-gotestsum
    - amb-checkout
    - amb-skip-if-no-code-changes
    - amb-config-registry
    - run:
        name: "Test"
        no_output_timeout: "30m"
        command: |
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=900
          export AMBASSADOR_LEGACY_MODE=<< parameters.legacy-mode >> # ParseBool
          export AMBASSADOR_FAST_RECONFIGURE=<< parameters.fast-reconfigure >> # ParseBool
          export TEST_XML_DIR=/tmp/test-logs/xml/
          mkdir -p ${TEST_XML_DIR}
          make gotest
    # teardown
    - amb-save-logs
    - store_test_results:
        path: /tmp/test-logs/xml/
    - dirty-check
  "job-test":
    parameters:
      "test":
        type: enum
        enum:
        - "test" # everything but pytest-envoy
        - "ingresstest"
        - "pytest"
        - "pytest-envoy"
        - "pytest-envoy-v3"
        - "e2etest"
        default: "test"
      "fast-reconfigure":
        type: boolean
        default: false
      "legacy-mode":
        type: boolean
        default: false
    steps:
    # setup
    - amb-linux-install
    - amb-attach-workspace
    - amb-skip-if-no-code-changes
    - # e2etests can be skipped if the only chances are to
      # the Ambassador repo and the pytest gold directory
      when:
        condition:
          equal: ["e2etest", << parameters.test >>]
        steps:
        - skip-if-only-changes:
            to: "(ambassador/|tests/pytest/gold/)"
    - # pytest-envoy can be skipped unless the envoy.mk file changes, or the ambex control
      # plane changes, or the gold files change.
      when:
        condition:
          or:
          - equal: ["pytest-envoy", << parameters.test >>]
          - equal: ["pytest-envoy-v3", << parameters.test >>]
        steps:
        - skip-if-no-changes:
            to: "(/envoy\\.mk$|/python/tests/gold/|/pytest/gold/|/cmd/ambex/)"
        - run: |
            if [[ -z "$KUBECEPTION_TOKEN" ]]; then
              circleci step halt
            fi
    - run:
        name: "Set USE_LOCAL_K3S_CLUSTER=1"
        command: echo >>"$BASH_ENV" 'export USE_LOCAL_K3S_CLUSTER=1'
    - run:
        name: "Configure system file and inotify maximums"
        command: |
          sudo sysctl -w fs.file-max=1600000
          sudo sysctl -w fs.inotify.max_user_instances=4096
    - install-helm
    - install-k3d
    - amb-config-cluster-and-registry
    - # main
      run:
        name: "Ensure CI configuration is up-to-date"
        command: |
          set -x
          expected=$(printf '%s\n' ingresstest gotest pytest e2etest | LC_COLLATE=C sort -u | xargs echo)
          actual=$(make -n noop --print-data-base 2>/dev/null | sed -n 's/^test://p' | xargs printf '%s\n' | LC_COLLATE=C sort -u | xargs echo)
          if [[ "$actual" != "$expected" ]]; then
            echo "Makefile 'test' target has changed to $actual, you need to update '.circleci/config.yml.d/amb_jobs.yml'" >&2
            exit 1
          fi
    - run:
        name: "Test"
        no_output_timeout: "30m"
        command: |
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=900
          export AMBASSADOR_LEGACY_MODE=<< parameters.legacy-mode >> # ParseBool
          export AMBASSADOR_FAST_RECONFIGURE=<< parameters.fast-reconfigure >> # ParseBool
          export TEST_XML_DIR=/tmp/test-logs/xml/
          export DEV_KUBECONFIG=~/.kube/kubeception.yaml
          mkdir -p ${TEST_XML_DIR}
          echo "passed"
    # teardown
    - amb-save-logs
    - store_test_results:
        path: /tmp/test-logs/xml/
    - dirty-check
    - amb-teardown-cluster
  "job-promote-to-rc-latest":
    parameters:
      "channel":
        type: enum
        enum: ["oss", "aes"]
    steps:
    - run: "true" # Always run a no-op step so that this config has non-zero steps even for -private repos
    - when:
        condition: # Don't do this in the -private repos
          or:
          - equal: ["https://github.com/acookin/ambassador", << pipeline.project.git_url
                >>]
        steps:
        - amb-linux-install
        - amb-checkout
        - run:
            name: "Promote to dev build to RC"
            command: |
              docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
              DEV_KUBECONFIG="-skip-for-release-" make release/promote-<< parameters.channel >>/dev-to-rc
  "job-promote-to-ga":
    parameters:
      "channel":
        type: enum
        enum: ["oss", "aes"]
    steps:
    - amb-linux-install
    - amb-checkout
    - run:
        name: "Promote to GA"
        command: |
          docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
          DEV_KUBECONFIG="-skip-for-release-" make release/promote-<< parameters.channel >>/to-ga
  amb-linux-install:
    steps:
    - install-python:
        executor-key: "202008-01"
    - pip-install:
        packages: awscli packaging
    - install-go
    - install-kubectl
    - install-node
  amb-save-workspace:
    steps:
    - persist_to_workspace:
        root: /home/circleci/project
        paths:
        - "."
  amb-attach-workspace:
    steps:
    - attach_workspace:
        at: /home/circleci/project
  amb-skip-if-no-code-changes:
    steps:
    - skip-if-only-changes:
        to: (charts/ambassador\|docs/\|*.md)
  amb-checkout:
    steps:
    - when:
        condition:
          or:
          - equal:
            - "https://github.com/acookin/ambassador"
            - << pipeline.project.git_url >>
          - equal:
            - "https://github.com/datawire/ambassador-private"
            - << pipeline.project.git_url >>
        steps:
        - checkout:
            path: ~/project/ambassador
    - when:
        condition:
          or:
          - equal:
            - "https://github.com/datawire/apro"
            - << pipeline.project.git_url >>
          - equal:
            - "https://github.com/datawire/apro-private"
            - << pipeline.project.git_url >>
        steps:
        - run:
            working_directory: ~/project
            command: "rmdir ~/project/ambassador || true"
        - checkout:
            path: ~/project
  amb-login-registry:
    steps:
    - run:
        name: "Docker login"
        command: |
          if [[ -n "$DOCKER_BUILD_USERNAME" && -n "DOCKER_BUILD_PASSWORD" ]]; then
            tries=0
            while true; do
              if [ "$tries" -gt 10 ] ; then
                circleci step halt
              fi

              fail=0
              out=$(docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY%%/*}") || fail=1
              if [ "$fail" == "0" ] ; then
                break
              fi

              echo $out
              if echo "$out" | grep "503 Service Unavailable" ; then
                ((tries++))
                sleep 30
              else
                circleci step halt
              fi
            done
          fi
  amb-config-registry:
    steps:
    - amb-login-registry
    - run:
        name: "Configure Docker registry"
        command: |
          if [[ -z "$DEV_REGISTRY" ]]; then
            echo >>"$BASH_ENV" 'export DEV_REGISTRY=127.0.0.1:31000'
            echo >>"$BASH_ENV" 'export BASE_REGISTRY=docker.io/datawiredev'
          fi

          echo >>"$BASH_ENV" 'unset BASH_ENV'
  amb-config-cluster-and-registry:
    steps:
    - amb-login-registry
    - run:
        name: "Configure Kubernetes cluster and Docker registry"
        working_directory: ~/project/ambassador
        command: |
          if [[ -z "$DEV_REGISTRY" ]]; then
            echo >>"$BASH_ENV" 'export DEV_REGISTRY=127.0.0.1:31000'
            echo >>"$BASH_ENV" 'export BASE_REGISTRY=docker.io/datawiredev'
          fi

          ./.ci/cluster-claim
          rm -f ~/.kube/config
          cp ~/.kube/kubeception.yaml ~/.kube/config

          echo >>"$BASH_ENV" 'if test -e ~/.kube/kubeception.yaml; then'
          echo >>"$BASH_ENV" '  export DEV_KUBECONFIG=~/.kube/kubeception.yaml'
          echo >>"$BASH_ENV" '  if [[ "$DEV_REGISTRY" == 127.0.0.1:31000 ]]; then'
          echo >>"$BASH_ENV" '    KUBECONFIG=$DEV_KUBECONFIG go run ./cmd/k8sregistryctl up --storage=hostPath'
          echo >>"$BASH_ENV" '  fi'
          echo >>"$BASH_ENV" 'fi'

          echo >>"$BASH_ENV" 'unset BASH_ENV'
  amb-teardown-cluster:
    steps:
    - run:
        working_directory: ~/project/ambassador
        command: "./.ci/cluster-unclaim"
        when: "always"
  amb-save-logs:
    steps:
    - run:
        name: "Gather logs"
        when: always
        command: |
          rsync \
            --prune-empty-dirs --archive --include='*/' \
            --include='*.xml' \
            --include='*.tap' \
            --include='*.log' \
            --include='Test*.webm' \
            --exclude='*' \
            . \
            /tmp/test-logs
          if test -d ~/.cache/telepresence/logs; then
            rsync \
              --archive \
              ~/.cache/telepresence/logs \
              /tmp/test-logs/telepresence-logs
          fi
          if [ -f docker/container.txt ] && docker inspect $(cat docker/container.txt) >/dev/null; then
            docker exec $(cat docker/container.txt) /bin/bash -c 'mkdir -p /tmp/build-container-logs && (cp -r /tmp/*.txt /tmp/*.json /tmp/*.log /tmp/*.yaml /tmp/build-container-logs || true) && ((test -d ~/.cache/telepresence/logs && cp -r ~/.cache/telepresence/logs /tmp/build-container-logs/telepresence-logs) || true)'
            docker cp $(cat docker/container.txt):/tmp/build-container-logs /tmp/test-logs/build-container-logs || true
          fi
    - store_artifacts:
        name: "Store logs"
        path: /tmp/test-logs
        destination: test-logs
    - run:
        name: "Gather coverage"
        when: always
        command: |
          if [ -f docker/container.txt ] && docker inspect $(cat docker/container.txt) >/dev/null; then
            docker cp $(cat docker/container.txt):/tmp/cov_html /tmp/cov_html || true
          fi
    - store_artifacts:
        name: "Store coverage"
        path: /tmp/cov_html
        destination: coverage
    - run:
        name: "Gather pod logs"
        when: always
        command: |
          if ! test -f ~/.kube/kubeception.yaml ; then
            exit 0
          fi

          export KUBECONFIG=~/.kube/kubeception.yaml
          mkdir -p /tmp/pod-logs
          podsfile=/tmp/pod-logs/all-pods.txt
          (kubectl get pods --all-namespaces -ocustom-columns="name:.metadata.name,namespace:.metadata.namespace" --no-headers || true) > $podsfile
          (kubectl describe pods --all-namespaces || true) > /tmp/pod-logs/all-pods-described.txt

          cat $podsfile | while IFS= read -r line; do
            name=$(echo $line | awk '{print $1}')
            ns=$(echo $line | awk '{print $2}')
            nsdir=/tmp/pod-logs/${ns}/
            mkdir -p $nsdir
            outfile=${nsdir}/${name}-pod.log
            (kubectl logs -n $ns $name > $outfile || echo "FAILED, status $ret, continuing...") || true
          done
    - store_artifacts:
        name: "Store pod logs"
        path: /tmp/pod-logs
        destination: pod-logs
  amb-skip-if-bad-chart-version:
    steps:
    - run:
        name: "Diff changes"
        command: |
          thisversion=$(grep version: charts/ambassador/Chart.yaml | awk ' { print $2 }')

          if [[ "<< pipeline.git.tag >>" != "chart-v${thisversion}" ]]; then
            echo "Chart version ${thisversion} doesn't match tag << pipeline.git.tag >>; aborting"
            exit 1
          fi
  website-setup:
    steps:
    - install-node:
        version: "14"
    - install-yarn
    - install-python:
        executor-key: "202008-01"
        version: "3.7.0"
    - run:
        name: "Show environment"
        command: |
          env | grep -e GIT -e TRAVIS -e CIRCLE | sort
    - amb-checkout
    - skip-if-no-changes:
        to: docs/
  install-gotestsum:
    steps:
    - run:
        name: "Install gotestsum"
        command: |
          go get gotest.tools/gotestsum
  install-redis:
    steps:
    - run:
        name: "Install Redis"
        command: |
          sudo apt update -y
          sudo apt install -y redis-server
  install-k3d:
    parameters:
      version:
        type: string
        default: "v3.4.0"
    steps:
    - run:
        name: "Install K3D << parameters.version >>"
        command: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=<< parameters.version >>  bash
  pip-install:
    parameters:
      packages:
        type: string
    steps:
    - run: |
        if [[ "$(which pip3)" == *pyenv* ]]; then
          pip3 install << parameters.packages >>
        else
          sudo pip3 install << parameters.packages >>
        fi
  install-node:
    parameters:
      version:
        type: string
        default: "14"
    steps:
    - run:
        name: "Install Node << parameters.version >>"
        command: |
          echo 'export NVM_DIR=/opt/circleci/.nvm' >> ${BASH_ENV}
          echo 'source $NVM_DIR/nvm.sh' >> ${BASH_ENV}

          export NVM_DIR=/opt/circleci/.nvm
          source $NVM_DIR/nvm.sh
          if ! nvm ls << parameters.version >> > /dev/null; then nvm install << parameters.version >>; fi
          nvm alias default << parameters.version >>
  install-helm:
    parameters:
      version:
        type: string
        default: "v3.4.1"
    steps:
    - run:
        name: "Install Helm << parameters.version >>"
        command: |
          set -x
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version << parameters.version >>
          rm ./get_helm.sh
  install-go:
    parameters:
      version:
        type: string
        default: "1.15"
    steps:
    - run:
        name: "Install Go << parameters.version >>"
        command: |
          set -x
          if [[ $OS == Windows_NT ]]; then
            curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
            mv /c/go /c/go-112
            unzip -q /tmp/go.zip -d /c/
          else
            curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
            tar -C /tmp -xzf /tmp/go.tar.gz
            echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
            if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
              echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
            fi
            . "$BASH_ENV"
          fi
          go version
  install-kubectl:
    parameters:
      version:
        type: string
        default: "1.14.0"
    steps:
    - run:
        name: "Install kubectl << parameters.version >>"
        command: |
          curl --retry 5 --retry-delay 5 -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
          sudo install /tmp/kubectl /usr/local/bin/kubectl
  install-yarn:
    steps:
    - run:
        name: "Install Yarn"
        command: |
          curl --retry 5 --retry-delay 5 -o- -L https://yarnpkg.com/install.sh | bash
          echo 'PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> "$BASH_ENV"
  install-python:
    parameters:
      version:
        type: string
        default: "3.8.5"
      pip-version:
        type: string
        default: "20.1.1"
      executor-key:
        type: string
    steps:
    - restore_cache:
        name: "Restore Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version
          >>"
    - run:
        name: "Install Python << parameters.version >>"
        command: |
          set -x
          pyenv versions
          pyenv install --skip-existing << parameters.version >>
          pyenv global 2.7.18 << parameters.version >>
          pyenv versions
          pip3 install pip==<< parameters.pip-version>>
    - save_cache:
        name: "Save Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version
          >>"
        paths:
        - "/opt/circleci/.pyenv"
  dirty-check:
    steps:
    - run:
        name: "Dirty check"
        command: |
          # On Windows, `git status` doesn't record no-op
          # line-ending changes in to the index, so things show as
          # dirty even if they aren't.  Trying to `add` them does
          # trigger the appropriate index update.  So do a `git add`
          # *before* the `git status --porcelain` to work around
          # Windows being terrible; we'd otherwise put the `git add`
          # inside of the `if` block to help generate better output
          # for `git diff`.
          git add .
          if [[ -n "$(git status --porcelain)" ]]; then
             PAGER= git diff --cached
             exit 1
          fi
  skip-if-no-new-chart:
    steps:
    - run:
        name: "Diff chart changes"
        command: |
          if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
            echo "There is no base_revision, therefore no changes"
            exit 0
          fi
          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE charts/ambassador/Chart.yaml
          if ! git --no-pager diff $COMMIT_RANGE charts/ambassador/Chart.yaml | grep -q +version; then
            echo "Halting this CircleCI job because the version was not changed in Chart.yaml"
            circleci step halt
          fi
  skip-if-no-changes:
    parameters:
      to:
        description: A POSIX ERE (grep -E regex) that matches which filenames to check
          for changes in
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
            echo "There is no base_revision, therefore no changes"
            exit 0
          fi

          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -E "<< parameters.to >>") == "" ]]; then
            echo "Halting this CircleCI job because code in the following paths have not changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
  skip-if-only-changes:
    parameters:
      to:
        description: A POSIX ERE (grep -E regex) that matches which filenames to check
          for changes in
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
            echo "There is no base_revision, therefore no changes"
            exit 0
          fi

          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -v -E "<< parameters.to >>") == "" ]]; then
            echo "Halting this CircleCI job because only code in the following paths has changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
jobs:
  oss-generate:
    executor: oss-linux
    resource_class: large
    steps:
    - job-generate
  oss-lint:
    executor: oss-linux
    steps:
    - job-lint
  oss-images:
    parameters:
      release:
        type: boolean
        default: false
      push_nightly:
        type: boolean
        default: false
    executor: oss-linux
    resource_class: large
    steps:
    - job-images:
        release: << parameters.release >>
        push_nightly: << parameters.push_nightly >>
  oss-gotest:
    executor: oss-linux
    parameters:
      fast-reconfigure:
        type: boolean
        default: false
      legacy-mode:
        type: boolean
        default: false
    steps:
    - job-gotest:
        fast-reconfigure: << parameters.fast-reconfigure >>
        legacy-mode: << parameters.legacy-mode >>
  oss-test:
    executor: oss-linux
    resource_class: xlarge
    parameters:
      test:
        type: enum
        enum:
        - "test" # everything but pytest-envoy
        - "ingresstest"
        - "pytest"
        default: "test"
      fast-reconfigure:
        type: boolean
        default: false
      legacy-mode:
        type: boolean
        default: false
    steps:
    - job-test:
        test: << parameters.test >>
        fast-reconfigure: << parameters.fast-reconfigure >>
        legacy-mode: << parameters.legacy-mode >>
  oss-envoy-test:
    executor: oss-linux
    resource_class: xlarge
    parameters:
      test:
        type: enum
        enum:
        - "pytest-envoy"
        - "pytest-envoy-v3"
        default: "pytest-envoy"
      fast-reconfigure:
        type: boolean
        default: false
      legacy-mode:
        type: boolean
        default: false
    steps:
    - job-test:
        test: << parameters.test >>
        fast-reconfigure: << parameters.fast-reconfigure >>
        legacy-mode: << parameters.legacy-mode >>
  oss-chart:
    executor: oss-linux
    steps:
    - job-chart
  oss-chart-publish:
    environment:
      PUBLISH_GIT_RELEASE: "1"
    executor: oss-linux
    steps:
    - job-chart-publish
  oss-manifest-publish:
    executor: oss-linux
    steps:
    - job-manifests-publish
  oss-chart-changelog:
    executor: oss-linux
    steps:
    - when:
        condition:
          and:
          - equal:
            - "https://github.com/acookin/ambassador"
            - << pipeline.project.git_url >>
          - not:
              equal:
              - "master"
              - << pipeline.git.branch >>
        steps:
        - job-chart-changelog
  emissary-chart:
    executor: oss-linux
    steps:
    - job-emissary-chart
  emissary-chart-publish:
    executor: oss-linux
    steps:
    - job-emissary-chart-publish
  oss-promote-dev-to-rc:
    executor: oss-linux
    steps:
    - job-promote-to-rc-latest:
        channel: oss
  oss-promote-to-ga:
    executor: oss-linux
    steps:
    - job-promote-to-ga:
        channel: oss
  website-preview-build:
    executor: oss-linux
    steps:
    - website-setup
    - run: ./.ci/website-preview-build
    - run: "test -d /tmp/getambassador.io/public || circleci step halt"
    - persist_to_workspace:
        root: /tmp/getambassador.io
        paths:
        - public
  website-preview-publish:
    executor: oss-linux
    steps:
    - website-setup
    - attach_workspace:
        at: /tmp/getambassador.io
    - run:
        command: ./.ci/website-preview-publish
        no_output_timeout: "30m"
  website-preview-for-smoketest:
    executor: oss-linux
    steps:
    - website-setup
    - run: ./.ci/website-preview-build
    - run:
        command: ./.ci/website-preview-publish
        no_output_timeout: "30m"
  website-prod-publish:
    executor: oss-linux
    steps:
    - website-setup
    - run:
        name: "Configure Git user"
        command: |
          git config --global user.name 'ambassador.git CircleCI user'
          git config --global user.email dev@datawire.io
    - run:
        command: ./.ci/website-prod-publish
        no_output_timeout: "30m"
_anchors:
  filter-prerelease-only:
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+-(rc|ea)\.[0-9]+$/
      branches:
        ignore: /.*/
  filter-prerelease-and-master-only:
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+-(rc|ea)\.[0-9]+$/
      branches:
        only: master
  filter-rc-only:
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$/
      branches:
        ignore: /.*/
  filter-ga-only:
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
      branches:
        ignore: /.*/
  filter-chart-release-only:
    filters:
      tags:
        only: /^chart\-v[0-9]+\.[0-9]+\.[0-9]+$/
      branches:
        ignore: /.*/
  filter-master-release-branches-only:
    filters:
      branches:
        only:
        - master
        - /^rel\/v[0-9]+\.[0-9]+\.[0-9]+$/
workflows:
  'OSS: Release':
    jobs:
    - oss-promote-dev-to-rc:
        name: "oss-release-promote-to-rc-latest"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$/
          branches:
            ignore: /.*/
    - oss-promote-to-ga:
        name: "oss-release-promote-to-ga"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
          branches:
            ignore: /.*/
  'OSS: Dev':
    jobs:
    - oss-images:
        name: "oss-dev-images"
    - oss-generate:
        name: "oss-dev-generate"
    - oss-lint:
        name: "oss-dev-lint"
    - oss-chart:
        name: "oss-dev-chart"
    - emissary-chart:
        name: "emissary-dev-chart"
    - oss-gotest:
        name: "oss-dev-gotest<<# matrix.fast-reconfigure >>-fastreconfigure<</ matrix.fast-reconfigure
          >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode >>"
        matrix:
          alias: "oss-dev-gotest-matrix"
          parameters:
            fast-reconfigure:
            - true
            - false
            legacy-mode:
            - false
    - oss-gotest:
        name: "oss-dev-gotest<<# matrix.fast-reconfigure >>-fastreconfigure<</ matrix.fast-reconfigure
          >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode >>"
        matrix:
          alias: "oss-dev-gotest-legacy-matrix"
          parameters:
            fast-reconfigure:
            - false
            legacy-mode:
            - true
            # If you enable testing with legacy-mode true as well, you'll also need
            # to add some exclusions -- see the Release workflow for more.
        filters:
          branches:
            only:
            - master
            - /^rel\/v[0-9]+\.[0-9]+\.[0-9]+$/
    - oss-chart-changelog:
        name: "oss-chart-changelog"
    - oss-test:
        requires:
        - "oss-dev-images"
        name: "oss-dev-<< matrix.test >><<# matrix.fast-reconfigure >>-fastreconfigure<</
          matrix.fast-reconfigure >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode
          >>"
        matrix:
          alias: "oss-dev-pytest-matrix"
          parameters:
            test:
            - "pytest"
            # Running the ingresstests would require we install `kind` and
            # that the test suite supports HTTP to HTTPS redirects (AES
            # enables cleartext redirection by default, even for fallback
            # hosts, contrary to A/OSS)
            #- "ingresstest"

            fast-reconfigure:
            - true
            - false
            legacy-mode:
            # We don't run legacy mode tests in the "Dev" workflow but we do
            # in the Nightly and Release workflows.
            - false
          exclude:
          - test: pytest
            fast-reconfigure: true
            legacy-mode: true
    - oss-test:
        requires:
        - "oss-dev-images"
        name: "oss-dev-<< matrix.test >><<# matrix.fast-reconfigure >>-fastreconfigure<</
          matrix.fast-reconfigure >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode
          >>"
        matrix:
          alias: "oss-dev-pytest-legacy-matrix"
          parameters:
            test:
            - "pytest"
            # Running the ingresstests would require we install `kind` and
            # that the test suite supports HTTP to HTTPS redirects (AES
            # enables cleartext redirection by default, even for fallback
            # hosts, contrary to A/OSS)
            #- "ingresstest"

            fast-reconfigure:
            - false
            legacy-mode:
            - true
        filters:
          branches:
            only:
            - master
            - /^rel\/v[0-9]+\.[0-9]+\.[0-9]+$/
    - oss-envoy-test:
        requires:
        - "oss-dev-images"
        name: "oss-dev-<< matrix.test >><<# matrix.fast-reconfigure >>-fastreconfigure<</
          matrix.fast-reconfigure >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode
          >>"
        matrix:
          alias: "oss-dev-envoy-test-matrix"
          parameters:
            test:
            - "pytest-envoy"
            - "pytest-envoy-v3"
            fast-reconfigure:
            - true
            - false
            legacy-mode:
            # We don't run legacy mode tests in the "Dev" workflow but we do
            # in the Nightly and Release workflows.
            - false
          exclude:
          - test: pytest-envoy
            fast-reconfigure: true
            legacy-mode: true
          - test: pytest-envoy-v3
            fast-reconfigure: true
            legacy-mode: true
    - oss-envoy-test:
        requires:
        - "oss-dev-images"
        name: "oss-dev-<< matrix.test >><<# matrix.fast-reconfigure >>-fastreconfigure<</
          matrix.fast-reconfigure >><<# matrix.legacy-mode >>-legacy<</ matrix.legacy-mode
          >>"
        matrix:
          alias: "oss-dev-envoy-test-legacy-matrix"
          parameters:
            test:
            - "pytest-envoy"
            - "pytest-envoy-v3"
            fast-reconfigure:
            - false
            legacy-mode:
            - true
        filters:
          branches:
            only:
            - master
            - /^rel\/v[0-9]+\.[0-9]+\.[0-9]+$/
  'OSS: Chart Release':
    when:
      or:
      - equal:
        - "https://github.com/acookin/ambassador"
        - << pipeline.project.git_url >>
      - equal:
        - "https://github.com/acookin/ambassador-private"
        - << pipeline.project.git_url >>
    jobs:
    - oss-chart-publish:
        name: "oss-release-chart"
        filters:
          tags:
            only: /^chart\-v[0-9]+\.[0-9]+\.[0-9]+$/
          branches:
            ignore: /.*/
  'OSS: Manifests Release':
    when:
      or:
      - equal:
        - "https://github.com/acookin/ambassador"
        - << pipeline.project.git_url >>
      - equal:
        - "https://github.com/acookin/ambassador-private"
        - << pipeline.project.git_url >>
    jobs:
    - oss-manifest-publish:
        name: "oss-rc-manifests-publish"
        filters:
          tags:
            only: /^chart\-v[0-9]+\.[0-9]+\.[0-9]+$/
          branches:
            ignore: /.*/
executors:
  oss-linux:
    machine:
      image: "ubuntu-2004:202008-01"
    working_directory: ~/project/ambassador
  aes-linux:
    machine:
      image: "ubuntu-2004:202008-01"
    working_directory: ~/project
