package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_initial_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x6b\xc3\x30\x10\x46\x77\xff\x8a\x23\x53\x02\xed\xd6\xad\x93\x9a\x5c\xa8\xa8\x2d\x07\xf9\x44\x9d\x2e\x42\x58\x47\xd1\x10\x3b\x95\xe4\xfe\xfe\x52\xbb\x35\x21\x81\x68\x13\xbc\xef\xdd\xdb\x6a\x14\x84\x80\x2d\xa1\x6a\x64\xad\x40\xee\x41\xd5\x04\xd8\xca\x86\x1a\x58\x8d\x63\xf0\x8f\x43\x4a\xe7\xd5\x73\x51\xfc\xc1\x24\x5e\x4a\x04\xc7\xc9\xfa\xe1\xe4\x42\x9f\x60\x5d\x00\x00\x04\x0f\xb7\xcf\x18\xb9\x83\x83\x96\x95\xd0\x47\x78\xc3\x23\xec\x70\x2f\x4c\x49\xf0\x6b\xb6\x9f\xdc\x73\x74\x99\xed\xf7\xd3\x7a\xf3\x30\x59\xba\xc8\x2e\x87\xa1\xb7\x39\x9c\xf8\xdf\x42\xb2\xc2\x86\x44\x75\x80\x77\x49\xaf\xd3\x17\x3e\x6a\x85\x53\xab\x32\x65\xb9\x68\xb7\x46\x6b\x54\x64\x97\xc5\x6c\x9d\x4b\xaf\xda\x08\x5b\x5a\x0c\x33\x17\xce\xd6\x79\x1f\x39\xa5\x0b\x4e\x2a\xbc\xe6\x22\x7f\x8d\x9c\x32\x47\x7b\xb1\xb8\xcb\x75\x43\x9f\x5d\x97\x6f\xee\x16\x9b\xe2\x27\x00\x00\xff\xff\xa0\xbb\xc6\x4b\x85\x01\x00\x00")

func _1_initial_up_sql() ([]byte, error) {
	return bindata_read(
		__1_initial_up_sql,
		"1_initial.up.sql",
	)
}

var __2_domains_hostname_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\x31\x6a\xc4\x30\x10\x46\xe1\xde\xa7\xf8\x0f\x90\xcd\x05\xb6\x72\xd6\x2a\x02\x5a\x79\x31\x32\xa4\x33\x43\x34\xb1\xa7\xf0\x8c\xd1\x08\x72\xfd\x10\x4c\x52\x6e\xfb\xe0\xf1\x5d\x2e\x70\xdb\x19\xc5\x76\x12\x45\xe5\x55\xbc\x55\x6a\x62\x0a\xaa\xbf\x5d\x19\xdf\xd2\x36\xdc\x52\x7f\x0f\xa8\xfc\x69\xb5\xf8\x0b\x0e\x13\x6d\xa2\x2b\x9a\x81\xb0\x99\x37\xa5\x9d\x21\xea\x8d\xa9\xc0\xbe\x40\x8a\xf7\xc7\x6b\xd7\xf5\x31\x87\x09\xb9\x7f\x8b\x01\xc4\xbe\x9c\x94\xe3\xec\xb7\x31\xce\xf7\x04\x39\x16\x2a\xa5\xb2\x3b\x86\x69\x7c\x20\x8d\x19\x69\x8e\xf1\xfa\xe4\x1f\x86\xbf\xfb\x9f\xcf\xe1\x23\x5f\xbb\x9f\x00\x00\x00\xff\xff\xa2\xec\x24\x7d\xd5\x00\x00\x00")

func _2_domains_hostname_up_sql() ([]byte, error) {
	return bindata_read(
		__2_domains_hostname_up_sql,
		"2_domains_hostname.up.sql",
	)
}

var __3_install_id_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4e\xc3\x40\x0c\x45\xf7\x39\xc5\x3f\x00\xe1\x02\xac\x42\x93\x05\x52\xa0\x12\x9d\x4a\xec\x22\xb7\x71\xa7\x23\x1c\xbb\xf2\x4c\x9a\xeb\x23\x88\x10\x02\xb1\xe8\xd6\xf2\x7b\xfa\xff\xd7\x35\x78\x8c\x7c\x2c\x32\x24\xcd\x85\x44\x86\x34\x82\x74\x04\x71\xfe\x75\x72\x86\xce\x22\x74\x10\xc6\x81\x8f\x34\x67\x86\x5a\x01\x89\xe0\xca\x9e\x93\x69\x86\x9d\xbe\x75\x58\x92\x08\x9c\x2f\xe6\x05\xa4\xf8\x51\x55\x75\x8d\xe5\xcc\x8a\xc8\xca\x4e\x25\x69\x04\x41\x79\xc1\x68\x13\x25\xbd\x83\x39\x76\x9b\xed\x3e\x0c\xed\xd3\xae\x79\xec\x3b\x4c\x29\x9e\x0b\x2e\xce\x57\xd6\x82\x39\xe3\xe4\x36\xe1\x5d\x6d\x49\x1a\xef\xab\xaa\xe9\x43\xf7\x8a\xf0\xf5\xfb\x99\x7b\x15\x65\x34\x6d\x8b\xcd\xb6\xdf\x3f\xbf\xfc\xd7\x32\x74\x6f\xe1\xe1\x16\xf6\xcf\x14\x2b\xf7\x11\x00\x00\xff\xff\x08\xa2\x35\x78\x3a\x01\x00\x00")

func _3_install_id_up_sql() ([]byte, error) {
	return bindata_read(
		__3_install_id_up_sql,
		"3_install_id.up.sql",
	)
}

var __4_crash_report_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xc1\x4a\x03\x31\x10\x06\xe0\xfb\x3e\xc5\x7f\xab\x82\x4f\xd0\x5b\xda\x8e\x18\xcd\x66\x4b\x3a\x41\xea\x25\x84\x66\xc0\x1c\xd6\x5d\x93\x78\x12\xdf\x5d\x58\x61\x41\xed\xdc\x86\xe1\x9b\xff\xdf\x3b\x52\x4c\x60\xb5\x33\x84\x4b\x89\xf5\x35\x14\x99\xa7\xd2\x70\xd3\x01\x40\x4e\xb8\x32\xde\xeb\x03\x8e\x4e\xf7\xca\x9d\xf1\x44\x67\xd8\x81\x61\xbd\x31\x77\x0b\xba\x14\x89\x2d\x4f\x6f\xa1\xe5\x51\x56\xc4\xba\xa7\x13\xab\xfe\x88\x67\xcd\x0f\xcb\x8a\x97\xc1\xd2\x8a\x71\xa0\x7b\xe5\x0d\x63\xef\x9d\x23\xcb\x61\x15\x3f\x6f\x8b\xbc\x7f\x48\x6d\x52\x42\x9e\x43\x4c\xa9\x48\xad\x80\xb6\xc4\x7f\xf2\x47\x69\x31\xc5\x16\x7f\x97\x7e\x3c\x0d\x76\xf7\x3f\x6c\xf3\xf9\xb5\xd9\x6e\x97\x63\x77\xdb\x7d\x07\x00\x00\xff\xff\xf8\x83\x0d\x27\x10\x01\x00\x00")

func _4_crash_report_up_sql() ([]byte, error) {
	return bindata_read(
		__4_crash_report_up_sql,
		"4_crash-report.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_initial.up.sql":          _1_initial_up_sql,
	"2_domains_hostname.up.sql": _2_domains_hostname_up_sql,
	"3_install_id.up.sql":       _3_install_id_up_sql,
	"4_crash-report.up.sql":     _4_crash_report_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_initial.up.sql":          &_bintree_t{_1_initial_up_sql, map[string]*_bintree_t{}},
	"2_domains_hostname.up.sql": &_bintree_t{_2_domains_hostname_up_sql, map[string]*_bintree_t{}},
	"3_install_id.up.sql":       &_bintree_t{_3_install_id_up_sql, map[string]*_bintree_t{}},
	"4_crash-report.up.sql":     &_bintree_t{_4_crash_report_up_sql, map[string]*_bintree_t{}},
}}
