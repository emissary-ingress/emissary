// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x61\x6f\xe3\x36\x12\xfd\xac\xfc\x8a\x59\x1d\x8a\x38\x87\x58\x4a" +
	"\x17\x3d\xa0\x50\x24\x03\xc1\x5e\xee\x5a\x20\x8b\x0b\x9c\xcd\x5d\x8b\x43\x51\x50\xd2\xc8\x62\x43\x91\x0a\x39\x72" +
	"\xe2\x4b\xfd\xdf\x0f\x24\x25\x5b\x76\xec\xec\xb6\xfd\xd2\xc5\x22\x96\xc8\x99\x37\xc3\x37\x8f\x43\x42\xe9\xbb\xbf" +
	"\xff\xeb\xc3\xa7\x1f\x6f\xaf\xa1\xa6\x46\xcc\x4e\x52\xfb\x03\x82\xc9\x45\x16\xa2\x0c\x67\x27\x41\x5a\x23\x2b\x67" +
	"\x27\x41\x90\x36\x48\x0c\x8a\x9a\x69\x83\x94\x85\x1d\x55\xd3\x6f\x43\x37\x41\x9c\x04\xce\xae\x9a\x9c\x19\xc3\x4a" +
	"\xa5\xe1\xba\x5c\x20\xdc\x11\x2b\x1e\x60\x0a\x15\xd7\x86\x20\x57\x8a\xd2\xd8\x5b\x5a\x1f\x53\x68\xde\x12\x18\x5d" +
	"\x64\x61\x4d\xd4\x9a\x24\x8e\x8b\x52\x46\xbf\x98\x12\x05\x5f\xea\x48\x22\xc5\xb2\x6d\xe2\x65\x87\x71\xc9\x0d\xd9" +
	"\x87\xe8\x17\x13\xce\xd2\xd8\xfb\x7a\x18\x5a\x79\xc0\xa0\xe2\x28\x4a\x83\x04\xe3\x7f\x2f\x50\x72\xd3\x0a\xb6\x4a" +
	"\x80\x58\x2e\xf0\x12\xd6\x3b\xb6\x33\x10\x2c\x47\x71\xd0\x76\xaa\xd5\xd3\x31\xfb\x19\xfc\xf5\xb5\x7d\x81\x42\x58" +
	"\x07\xeb\x61\xa7\x73\xf5\x3c\x35\xfc\x7f\x5c\x2e\x12\xc8\x95\x2e\x51\x4f\x73\xf5\x7c\x0c\x92\xcb\xb6\xa3\xff\xd2" +
	"\xaa\xc5\x2c\x24\x7c\xa6\xf0\x27\x78\x81\x86\xcb\xe9\x13\x2f\xa9\x4e\xe0\x9b\x0b\x6c\xbe\xc4\xb7\xd3\x22\xfc\x09" +
	"\x8e\xfa\x5a\x68\xa6\x91\xc1\x0b\x54\x4a\xd2\xb4\x62\x0d\x17\xab\x04\x1a\x25\x95\x69\x59\x31\x50\xf4\x17\xd6\xb6" +
	"\xf0\x62\x9f\x82\x86\x3d\x0f\x40\xdf\x72\x79\xd9\x8f\xe9\x05\x97\x09\xb0\x8e\x94\x1b\x71\x4e\xad\xc6\xde\x27\x67" +
	"\xc5\xc3\x42\xab\x4e\x96\x09\xe4\x82\x15\x0f\xde\xad\x50\x42\xe9\x04\x9e\x6a\x4e\xe8\x47\x7a\xe0\x82\x89\x62\xf2" +
	"\xf5\xc5\xc5\x57\x30\x85\x6f\xb0\x39\xfb\x6a\x37\xcc\x05\xbc\xc7\xc6\x0f\xb5\xac\x2c\x1d\xa5\x17\xd1\xdf\x86\x31" +
	"\xcf\x6e\x02\x46\x09\x5e\xc2\xd7\xed\x33\x2c\x34\xa2\xdc\x24\x96\xc6\x83\x4e\xd2\xb8\x97\x73\x9a\xab\x72\xe5\x24" +
	"\x54\xf2\x25\xf0\x32\x0b\x59\xdb\x3a\x39\x07\x69\xa5\x74\x03\xcb\xa9\x92\x89\xe9\xf2\x86\x53\xd4\x6a\x5c\xa2\xa4" +
	"\x2c\x54\xf2\xce\x8d\x78\xc3\x20\x1d\x2a\xe1\x5f\x83\x54\xe0\x02\x65\x39\xfb\x5e\x72\xe2\x4c\xc0\xa7\x9b\x3b\x30" +
	"\x48\x5d\x9b\xc6\xfd\xcc\x60\x67\xcb\xd6\xbf\x04\xa9\x69\x99\x9c\x7d\xa7\x0c\x49\xd6\x20\x90\x02\x8d\x8f\x1d\x1a" +
	"\x02\x06\x05\x6a\xe2\x15\x2f\x18\x21\x54\x4a\x27\x69\xec\x8c\x07\xcf\x92\x2f\x87\xe7\x20\x75\x2a\x80\x91\x82\xc0" +
	"\xe2\x65\x61\xdd\x23\x87\xb0\x9c\x36\xaa\x44\x91\x2c\x99\xe8\xc6\x13\x03\x44\xe0\x16\xed\x70\xec\x5a\x87\x94\x3e" +
	"\xd4\x4c\x2e\x30\x84\x78\x1b\xab\x85\xe5\x94\x57\x59\xf8\xae\xde\xb1\x29\xc3\xd9\x7f\xd0\x89\x62\x5a\x71\x21\xb0" +
	"\x04\xaa\xb9\x81\x4a\xab\x06\xa8\x46\xb8\x9f\xdf\x6c\x62\xad\x54\x07\x9d\xb1\x26\x0a\x58\x51\xa0\x31\xde\xf8\x09" +
	"\x73\x68\xd9\x02\x23\x80\x7f\x20\x0a\xa8\x34\x3a\x52\x0a\x17\x01\x38\x9d\x03\xd5\xaa\x5b\xd4\x51\x1a\xb7\x1b\x26" +
	"\xe2\x2d\x15\x69\x3c\xa6\xf7\x10\xd7\x57\x1f\x3e\x5e\x43\xab\xd5\x92\x5b\xd9\xec\x71\x3a\xa6\xd1\x6e\xa6\x9e\xc5" +
	"\xc1\xfc\x15\x8b\x9b\x89\x93\x83\x24\xde\xf6\xd3\xfb\x24\xbe\x99\xe5\x38\x87\xa2\xc6\xe2\x21\x57\xcf\x43\x22\xa4" +
	"\xcc\xcf\xcc\xea\xfb\x55\x26\xa4\xcc\xd5\x30\x91\x73\x59\x26\x25\x37\xb6\x33\x95\x6e\x6a\x8e\x8f\xf0\xeb\xaf\x40" +
	"\xca\x0c\x29\xc1\xbb\x2c\xdb\xd0\xd0\xcf\x5d\x6b\x3b\x0c\xb2\x13\x62\x54\x70\xb7\x49\x7c\xc5\x3d\x52\x38\x92\xc2" +
	"\xec\x46\x31\xbb\x25\xc1\xb4\x5c\x4a\xd4\xb0\x50\x68\xa0\x46\x8d\x47\x0a\x34\xc0\xa1\x30\x38\x60\x5e\x6b\xbd\x83" +
	"\x99\x3e\xce\x5e\x5e\x76\x92\x5d\xaf\xd3\xf8\x71\x06\xa5\x05\x97\x8a\x80\xb5\x2d\x32\xed\xb7\x4b\x85\xee\x61\xc9" +
	"\xec\xfe\xdf\xad\x2e\x6c\x90\xec\xd2\x3c\x48\x04\x69\xde\x11\x29\xe9\x77\x79\x21\x78\xf1\x70\xa0\x56\xb3\x39\x92" +
	"\x5e\xa5\xb1\xb7\x9d\x7d\xc1\x6a\xc6\x2b\xf8\x1e\x6a\xb6\x44\x70\xa5\x72\x22\xb7\xff\x6b\x84\x4f\xa8\x1b\x03\xaa" +
	"\x82\x3b\xd4\x4b\x5e\x20\x30\x82\x94\x0d\x25\xab\x35\x7a\x42\xee\xe7\x37\x61\x9f\xf8\xfd\xfc\xc6\x25\xce\x66\xbf" +
	"\x5f\xf2\xd7\x0d\xe3\xe2\x2d\xa9\xa3\x35\x18\x34\xd6\xbf\xec\xe9\xcb\x8f\x1e\x92\x79\xd7\x96\x8c\xf0\xc7\xab\x8f" +
	"\x37\x47\x04\x9e\xc6\xdb\x56\xe9\x07\x5a\x8d\x76\x79\x2b\xd6\x08\xb7\x38\xfb\x7e\xf2\x2a\x2b\xdf\x80\x43\xe8\x33" +
	"\xb8\x6a\x5b\xb1\x1a\x42\xa4\xb1\x6d\xd4\xfe\xd1\x52\xf1\xf2\x02\xaa\x23\xeb\x6b\xf1\x7a\x72\xb6\x0f\xdb\x5b\x43" +
	"\xb0\x64\xda\xca\x07\x32\x90\xf8\x04\xff\xee\x70\xe2\x4f\x2d\x14\x09\x9c\xda\x93\xef\xf4\xdc\xbd\x97\x8c\x58\xd2" +
	"\x9f\x68\xc1\xd0\xe9\x12\x78\xe2\xb2\x54\x4f\x91\x50\x05\x23\xae\x64\x34\xcc\x78\xa7\x60\x2b\xbd\xcd\xcd\x86\x15" +
	"\x0d\x4e\x0d\xb1\x05\x97\x8b\xe9\xf2\xe2\x7d\xc4\x5a\x1e\x09\x24\x83\xb2\xd0\xab\x96\x22\xa5\x17\x71\xc9\x35\x16" +
	"\xa4\xf4\x2a\x3c\x87\x38\xde\x73\xfe\x02\x27\x1f\x7d\x68\x02\x09\x54\x4c\x98\x21\x27\x57\xba\x04\xc2\xf0\xfc\x64" +
	"\x77\x35\x7d\xdf\xde\x58\x6f\x40\xe6\xf8\x98\xb8\x36\xb0\xc5\xbd\xd6\x7a\x7f\xe8\x76\xbb\xd6\x51\x02\xf7\xf3\x9b" +
	"\xc1\xd0\x8f\xd9\x2a\xef\x03\xda\xb1\x71\x46\xbe\x76\x23\x20\xf7\x77\x7d\xde\x5f\x1c\x9a\xb6\x23\x9b\xe7\x4b\x3f" +
	"\x92\x63\xa5\x34\x7e\x54\x9d\xa4\x04\xaa\x4e\x16\xb6\x14\x93\xb3\xa1\x5a\xf6\x28\x89\xf6\x77\xf4\xc4\x86\x3f\xbb" +
	"\x1c\x03\x37\x48\xb5\x2a\xcd\xa6\xca\xfb\xa7\xde\x08\xdb\xdd\x01\x36\x01\x7c\x84\x3d\x1a\x21\x03\xd2\x5d\x7f\xb5" +
	"\xe9\x4d\xb6\x7b\x63\xd2\x87\x1e\x62\x07\xfb\xf9\x1d\x0f\x26\x90\xa0\xd3\xa2\x57\xec\xfd\xfc\x66\x72\x4a\xca\x4c" +
	"\x3b\x2d\x4e\xcf\xf7\xf5\x38\x44\x09\x3a\x2d\x22\x83\x4c\x17\xf5\x2d\xd3\xac\x31\x91\x41\x9a\x9c\x16\xac\x77\x73" +
	"\xd9\x0d\x62\x3d\xbb\x3c\x19\x85\xda\x1c\x0a\xd9\xae\xd5\xa5\x15\x66\xc1\x5a\xea\xb4\xbb\x8f\xb8\x86\x56\x08\x65" +
	"\x3a\x8d\x06\x72\x14\xea\x69\x0c\xa3\xf1\xb1\xcf\xf8\x87\x8f\x37\xdf\x11\xb5\x73\x7f\xb1\xd9\x10\x11\x68\x7c\x8c" +
	"\x54\x8b\x72\x12\xfe\xf3\xfa\x53\x78\x6e\xd7\x18\x91\xba\x23\xcd\xe5\x62\x72\xb6\x6b\x26\x85\x62\x96\xe1\xc9\x19" +
	"\x64\xb3\x0d\x33\x01\xaf\x60\x62\xe7\x0d\x31\xea\x0c\x64\x19\xbc\xbf\xb8\xd8\x32\xd7\x57\xa1\x6f\xa3\x99\xcd\x29" +
	"\xd2\x68\x5a\x25\xcd\xa6\x4e\x5b\x1b\x7b\x46\xf8\xd3\x6f\x33\xb7\x06\xdb\xd9\x8f\xe2\xed\xd8\xee\xe1\x1c\x8c\xb5" +
	"\x3e\xd9\xb3\xbd\xdd\x92\xbd\xe1\x79\xdf\x66\xee\x99\x1c\xc5\x5a\xef\x72\x83\x5a\x2b\xfd\x9a\x9c\x37\x72\xdd\x4d" +
	"\x35\xfc\xa1\x11\xa3\x0a\x81\xc3\x0b\x5f\x19\xff\xc1\x5c\x6d\xad\xc6\x66\xfd\x4d\xe3\xec\x75\xc2\x73\x7c\x8c\x58" +
	"\xae\xf4\x48\x2b\xeb\x93\x43\x71\x34\x3e\x5e\xee\x4d\xb8\xfe\x07\x99\x6f\x69\x63\x9a\x0c\xca\x72\x8b\xf7\xf9\xdd" +
	"\xe9\x2f\xfb\xbf\x69\x57\x7a\x15\xfe\xe6\x4d\x69\xfb\xc8\xb0\x25\x87\x9e\xb2\xbb\x25\xff\x44\x7b\xa9\x3f\x65\x3f" +
	"\xa3\xef\xf5\xeb\x80\x28\x0f\xc4\x8c\x63\xd0\x58\x74\xda\xe0\xb9\xbb\xe6\x2b\x49\x5c\x76\x4c\x88\x95\xbd\xd8\x69" +
	"\x34\xb5\xeb\x32\x7d\x50\x9f\xd9\x8e\x5a\x86\x3a\x8d\xbb\xfb\x5e\xf8\x9d\xc2\x0f\xf5\xdd\x96\xfe\xd0\x01\x72\xa8" +
	"\xb8\xf6\xc8\xfa\x5d\xa5\xb5\xe5\x3c\x50\xde\xb7\xdc\xec\xa9\xff\x33\xeb\xa8\x56\x9a\xd3\xea\x40\xbb\xfe\xac\xb3" +
	"\x3b\xf3\x07\x47\xf7\xf2\xa7\x55\x94\xbb\x05\x7e\x51\xbf\xec\x6f\x12\x9f\x6d\x30\x83\xdd\x91\x0e\xd3\x4f\xbf\xd9" +
	"\x62\xb6\xa1\x46\x3d\xe6\x98\x9a\xfc\xcf\xda\x8d\x8e\xbe\x50\xa5\xb1\xff\xce\x90\xc6\xfe\xfb\xda\xff\x03\x00\x00" +
	"\xff\xff\xba\x5a\x46\xa6\x70\x13\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 4976,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"index.html": bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
