// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/admin/index.html
// bindata/aes-host.js
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAdminIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xd1\x6e\xe3\xb6\x12\x7d\xbe\xf9\x8a\x59\x2e\x16\xb0\x71\x6d\xc9" +
	"\xb9\xb8\x05\x0c\x45\x32\xba\x4d\x53\x74\x8b\x6d\x37\x40\xb2\x0f\x7d\x2a\x68\x71\x24\xb1\x96\x48\x95\xa4\x9c\xb8" +
	"\x41\xfe\xbd\xa0\x24\xcb\xa2\x64\xaf\xbd\x6d\x93\x07\x4b\xe4\xcc\xe1\xf0\xf0\xcc\x90\x54\xf8\xe6\xfb\x4f\xb7\x8f" +
	"\xbf\xde\xdf\x41\x66\x8a\x7c\x75\x15\xda\x1f\xc8\xa9\x48\x23\x82\x82\xac\xae\x00\xc2\x0c\x29\xb3\x0f\x00\x61\x81" +
	"\x86\x42\x9c\x51\xa5\xd1\x44\xa4\x32\xc9\x7c\x49\xda\x2e\xc3\x4d\x8e\xab\xf7\xc5\x9a\x6a\x4d\x99\x54\x70\xc7\x52" +
	"\x84\x07\x43\xe3\x0d\xcc\xe1\x3d\x2b\xb8\x08\xfd\xc6\xa8\x71\xd0\x66\xb7\x7f\x06\x58\x4b\xb6\x83\x97\xab\xff\x00" +
	"\x14\xf4\x79\xfe\xc4\x99\xc9\x02\x58\x72\x71\xd3\x34\xa9\x94\x8b\x00\x68\x65\xe4\x4d\xeb\xf0\xda\x80\xf8\x1d\x4a" +
	"\xe8\xef\xe3\x0c\x2d\x58\x3b\x08\xe3\xdb\xfd\x10\xf6\x19\x38\x8b\x88\xe6\xa9\xa8\x4a\xb2\xba\xcd\x79\xbc\x81\x0c" +
	"\x15\x82\x91\x60\x5b\xa1\x2a\x21\x91\x0a\x28\xc4\xb2\x28\x2a\xc1\xcd\x0e\x72\x1e\xa3\xd0\xe8\x85\x7e\x1f\xcb\x09" +
	"\x1e\xe0\x6d\x83\x09\x2f\x5d\x8b\xfd\x2b\x29\x63\x5c\xa4\x01\xfc\x6f\x51\x3e\xdf\x38\x5d\x6b\xa9\x18\xaa\x00\xae" +
	"\xcb\x67\xd0\x32\xe7\x0c\xde\x2e\x97\xcb\x83\xcd\xeb\xd5\x10\x7b\x5e\x48\x46\xf3\xc1\x08\x8c\xeb\x32\xa7\xbb\x00" +
	"\x84\x14\xe8\x8e\x50\x4a\xcd\x0d\x97\x22\x80\x84\x3f\x23\x73\x3b\xff\x9c\x73\xc1\xf0\x39\x80\x6b\xb7\x3d\xc7\xc4" +
	"\x04\x0b\xb7\xcd\xc8\x72\xd8\xd4\xac\xcf\xf5\x62\xf1\xce\x6d\xcf\x90\xa7\x99\x39\xd2\x21\xb7\xa8\x92\x5c\x3e\x05" +
	"\xfd\x25\x6c\x99\xa0\xf1\x26\x55\xb2\x12\x6c\x1e\xcb\x5c\xaa\x00\x54\xba\x9e\x2c\x66\x8b\xd9\x62\x7a\x81\x25\x6d" +
	"\x4c\x67\x0b\xef\xff\xd3\x2f\xd2\x17\x4b\x61\x50\x98\x59\xd7\x90\x70\xc1\x75\x86\xec\x72\x4a\xc7\x01\xbc\x4d\xd0" +
	"\xfe\xbb\x66\x7b\xb9\x5e\x7f\xf3\x0e\xc6\xf3\xfd\x07\xa2\x38\x50\x0f\xcb\x3e\xc3\x47\x66\x8b\x4a\x49\x35\x98\xd9" +
	"\x21\xe6\xc5\x62\xb1\x38\xea\xee\x71\xb1\xa5\x76\xe0\x97\xf3\x13\x1f\x82\x34\xbf\xbd\x8c\x84\x71\xd2\x35\x22\x26" +
	"\x87\xc4\x19\xf6\xb7\xab\xd4\xb3\x00\x08\x13\xa9\x8a\x95\x2d\x04\x36\xf1\x4a\x2a\x56\x77\x05\xe5\x79\x10\xfa\xf5" +
	"\x0b\x84\x5c\x94\x95\xe9\xa3\xa0\xed\x27\x60\x76\x25\x46\xc4\xe0\xb3\x21\x20\x68\x81\x11\x69\x3b\xb6\x34\xaf\x30" +
	"\x22\xc4\x77\x50\x6f\xa5\x48\xb8\x2a\xce\xe1\xda\x18\xad\xdd\x49\xfc\x83\x41\x6f\x9c\x3e\x9d\x63\xe0\x98\x8a\x18" +
	"\xbb\x88\xd7\x95\x31\x52\x74\xee\xb7\x6d\xa7\xbf\x1a\x3b\xa6\xf2\x84\xd3\x43\x53\xe4\xc0\x19\x3a\xf4\x1b\x2a\x7b" +
	"\x2d\x03\xfe\x6b\xdd\x90\x95\x53\xec\xac\x9f\xfb\x3a\x70\xda\x67\x92\xbb\x6a\x96\xc4\x63\x56\xf3\x9a\xb0\x55\xcb" +
	"\x72\xdf\xa3\x99\xc2\x51\x1f\xab\x0b\x2e\x2a\x24\x76\x95\xea\xa7\xd0\x6f\xcc\x4f\x47\xe9\x14\x6c\xb7\x7a\xc7\x8a" +
	"\x97\xe6\x60\xba\xa5\x0a\xda\x0a\x1e\x01\x93\x71\x55\xa0\x30\x5e\x8a\xe6\x2e\x47\xfb\xf8\xdd\xee\x03\x9b\xec\xf7" +
	"\x8d\xa9\xe3\xd6\x54\xe5\xb3\x5e\xad\xf0\x5d\xdf\x5a\x2d\x17\xf8\x36\xaa\x75\x7d\x5b\x8d\x5d\xea\xdd\x69\x72\x80" +
	"\x52\x4b\xeb\x02\x90\x56\xa0\xae\x77\x2a\x2f\xf0\x4c\xe5\x70\xd6\x75\x69\xba\x20\xee\x5a\x8a\xa3\x59\xdb\xf2\x70" +
	"\x49\xc0\x6d\x21\x71\xfd\xbb\x9a\x7f\x1e\xa0\x13\xf5\x71\x84\xdf\xac\x8a\xbf\x02\xa6\x51\xfd\x78\x36\x5f\x03\xd1" +
	"\x25\xc1\xf4\x50\xb1\x15\x6a\xb4\x20\x49\x25\x62\xbb\xdd\x4f\xa6\x4e\xed\xae\x65\xe7\xd5\x25\xd9\x6b\x77\xb6\x88" +
	"\xd8\x9d\x8d\xf4\xb7\x95\x96\xac\xb3\x76\xb5\x94\xbc\x7d\x55\x1b\x20\x58\x79\x1d\xed\xdb\xc7\x7f\x14\xfe\x88\x5d" +
	"\x4d\xad\xc7\x85\x40\xf5\xe3\xe3\xcf\x1f\xc7\x23\x9d\x0b\xb4\xb7\xa1\x35\xba\xf5\xa4\x88\xeb\xc3\x5e\xd4\xf0\x75" +
	"\xe5\x80\x0d\x3b\xbb\xde\x86\xff\x5e\xff\xd7\x90\xbc\xce\x65\xbc\xb9\x84\xe5\xb1\x61\x43\x73\x22\xe3\x4a\x4f\xdc" +
	"\x43\x4d\xf7\x9c\xca\xf3\x61\xf1\x04\x26\xbd\x15\x83\x28\x02\x42\xa6\x83\xad\xbd\x31\x88\x73\xaa\xf5\x47\xae\x8d" +
	"\x47\x19\x9b\x90\xf6\x14\x40\x06\x07\xb0\x3a\x23\xfb\x0b\x53\xe6\x48\x35\x82\xae\xca\x32\xdf\x01\x15\x0d\x5a\x7f" +
	"\x4d\x5f\x01\x73\x8d\xa3\x50\xde\x44\xae\x62\xce\x45\xa5\xb0\x90\x5b\x3c\x19\xd8\x1e\xeb\x6f\x4e\xa3\x1e\x4d\x03" +
	"\x93\x20\xa4\x81\x82\x9a\x38\x3b\x32\x87\x7f\x39\xc2\x33\x0e\xa3\x20\xc9\xcd\xd5\x10\xf1\xa2\x9c\x3d\x9d\x7f\x63" +
	"\xe1\x5d\x94\x5d\xf0\xa5\x54\xbd\x97\xda\x70\x91\x7a\x9e\x47\xdc\x70\x13\x34\x71\x36\x21\x99\x31\xa5\x0e\x7c\xbf" +
	"\x40\xa3\xb8\x91\xc2\x63\xd4\xd0\x27\xae\xd0\xe3\xd2\x6f\x37\xd8\xd9\x80\x6a\x80\x02\x4d\x26\x59\x00\xe4\xfe\xd3" +
	"\xc3\x23\x99\x0d\x7a\xed\xbd\x0f\x95\x0e\x86\x5e\x00\xa4\x25\x69\x6e\x8f\x48\x24\x00\x42\xcb\x32\xe7\x31\xb5\xc9" +
	"\xe2\xff\xae\xa5\xb8\xe9\x2e\xb3\x9f\x1f\x7f\x98\x2f\xc9\x00\xe1\x75\x38\x94\xbd\x59\x06\xf0\xd3\xc3\xa7\x5f\x3c" +
	"\x6d\x14\x17\x29\x4f\x76\x93\xf1\xb8\xb5\x38\x82\x7e\xb9\x1c\x02\x75\x8a\x08\xdc\x44\x18\x06\x30\xbd\xfa\xc2\x2b" +
	"\x80\x67\x32\x14\x13\xcb\x61\xb4\x7a\x51\x68\x2a\x25\xc0\xbe\x79\x76\x72\x93\xe9\x09\x7b\x85\x3a\x5a\x8d\xa3\x8e" +
	"\xa5\xd0\x32\x47\x2f\x97\xa9\x35\x19\x08\x12\x4e\xa8\xe3\x98\x8a\xa0\xad\x3e\x64\xcb\x19\x01\x2e\x6c\x61\x1d\xa6" +
	"\x78\xf3\x77\x52\x48\xb7\x52\xa4\x8a\x9a\x2a\xaf\x17\x4b\xcf\xa0\xad\x35\xb9\x94\x9b\xe6\x8e\xde\x56\x1b\x7b\x77" +
	"\x27\xf0\xdf\x3e\xd9\xa3\x71\x8e\x66\xf0\x99\x00\x1e\xa4\x52\xbb\x19\x98\xfa\xfb\xc0\x13\xd5\x40\xa1\x54\x72\x9d" +
	"\x63\x61\x7f\x63\xd4\x9a\x8b\x14\x76\xb2\x52\xa0\xf0\x8f\x0a\xb5\xf1\xe0\xbe\x89\xd1\xd2\x44\x63\x53\xd7\x45\xa9" +
	"\xcc\xb7\x3d\x8d\x03\x15\x6c\x5f\x2f\x4d\xc6\x75\x10\xae\xd5\xca\x86\xbf\x36\x92\x4e\x06\xc2\xb2\xac\x0d\x57\xf0" +
	"\x70\xd3\x3a\x2d\x8a\xd8\x56\xb0\x49\x5d\x41\xa2\x55\x7f\x55\xeb\x26\x07\xf2\xf5\xd8\x05\xae\x77\x3a\xee\x9d\x9b" +
	"\xeb\x6f\x29\x0f\xa6\x5a\xd7\xf4\xd7\x1f\x74\xe0\xf3\x07\x0f\x1e\x33\xae\xa1\xb0\x17\xff\xba\x7c\xa2\x60\x50\x95" +
	"\xfb\xcf\x3a\x68\x49\x2a\xaa\x38\x83\x42\x2a\x04\x93\x51\x01\x39\x17\x1b\x0d\x5c\x18\x69\xd9\xb5\xc7\x1f\x6d\x21" +
	"\x5b\x97\x4d\xb5\xc6\x58\x8a\xfe\xf7\x96\xee\x31\xf4\x9b\x4f\x3b\xa1\xdf\x7c\xad\xfa\x2b\x00\x00\xff\xff\xeb\xc9" +
	"\xf0\xe6\xbe\x12\x00\x00")

func bindataAdminIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAdminIndexhtml,
		"admin/index.html",
	)
}



func bindataAdminIndexhtml() (*asset, error) {
	bytes, err := bindataAdminIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "admin/index.html",
		size: 4798,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAeshostjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5d\x6f\xe3\x36\x16\x7d\xb6\x7e\xc5\xad\xf6\x21\x36\xc6\x91\xd2" +
	"\x02\x7d\xb1\x25\x03\x83\x6e\x76\x5b\x20\x83\x06\xce\xcc\x6e\x17\x28\xd0\xd2\xd2\xb5\xc5\x19\x8a\x94\xc9\x4b\x67" +
	"\x8c\xd4\xff\x7d\x41\x52\xb2\xe5\x8f\x4c\xd2\xc5\x2c\xf6\x61\x81\x00\x11\xc9\xcb\xc3\x73\x3f\x78\x2e\xcd\xeb\x46" +
	"\x69\x82\x7f\x58\x84\xa5\x56\x35\x5c\x55\x44\x8d\x99\xa4\x69\x51\xca\xe4\xa3\x29\x51\xf0\x8d\x4e\x24\x52\x2a\x9b" +
	"\x3a\xdd\x58\x4c\x4b\x6e\xc8\x7d\x24\x68\xea\x64\xa1\xd5\xa3\x41\x9d\x7c\x34\x57\xd3\x28\xc2\xcf\x1e\xac\xc4\x25" +
	"\xb3\xc2\x83\x26\xf8\x99\x50\x96\xc3\xa7\x68\x40\x58\x37\x82\x11\x4e\xe0\xf7\xac\xe4\x9b\x59\x94\x2d\x95\xae\x61" +
	"\x73\xad\xe4\xc4\xd8\x45\xcd\x29\x69\x34\x6e\x50\x52\x1e\x2b\xf9\xe0\x67\xe2\x59\x34\x18\x64\x4b\x8e\xa2\x34\x48" +
	"\x6e\x30\xc8\x04\xae\x50\x96\xb3\x9f\x24\x27\xce\x04\xbc\xbf\x7b\x00\x83\x64\x9b\x2c\x6d\x57\x82\x15\x5b\xa0\xf0" +
	"\x9f\x83\xcc\x34\x4c\xce\x7e\x54\x86\x24\xab\x11\x48\x81\xc6\xb5\x45\x43\xc0\xa0\x40\x4d\x7c\xc9\x0b\x46\x08\x4b" +
	"\xa5\x27\x59\xea\x8d\xc3\x3e\xcf\x72\xe0\x3f\xb9\x6c\x2c\x01\x6d\x1b\xcc\x63\xc2\xcf\x14\x83\xc3\xca\xe3\xaa\x45" +
	"\x8d\x61\x73\x5d\xab\x12\xc5\x64\xc3\x84\xed\x2f\x04\x80\x81\x77\xd3\xa3\x38\xef\x3a\x32\x3f\x54\x4c\xae\x30\x86" +
	"\xb4\x3b\xa7\x81\xcd\x35\x5f\xe6\xf1\x37\xd5\x91\x45\x19\xcf\xfe\x89\xc0\x2c\xa9\xeb\x25\x17\x02\x4b\xa0\x8a\x9b" +
	"\x90\x31\xaa\x10\x3e\xcc\xef\xda\x73\xb6\xca\x82\x35\xce\x40\x01\x2b\x0a\x34\x26\x98\x3e\xe2\x02\x1a\xb6\xc2\x04" +
	"\xe0\x6f\x88\x02\x96\x1a\x7d\x28\x0a\x8f\x0f\x9c\xc6\x40\x95\xb2\xab\x2a\xc9\xd2\xa6\xf5\x3f\xed\x02\x90\xa5\x87" +
	"\x70\x9e\x47\xf6\xed\x0f\xef\x6e\xa1\xd1\x6a\xc3\x4b\x3c\x89\x60\x3f\x6c\x56\x8b\x2e\x6a\x9d\xf1\x59\xd4\xf6\x0b" +
	"\xd1\x85\xa0\xdd\xb7\x8b\xc7\x41\x7b\x96\x5b\xff\xec\xa2\xc2\xe2\xd3\x42\x7d\xee\x08\x90\x32\xbf\xb1\x95\xc6\xf3" +
	"\xbc\x91\x32\x6f\xbb\x85\x05\x97\xe5\xa4\xe4\x86\x2d\x04\x96\x7e\x69\x8e\x6b\xf8\xe3\x0f\x20\x65\x3a\x32\xf0\x4d" +
	"\x9e\xef\x9d\x6f\xd7\x6e\xb5\x9b\x06\x69\x85\xd8\xa7\xd6\x15\x53\x9b\xdb\x80\x13\xef\x53\x3e\xbb\x53\xac\xe4\x72" +
	"\x05\xa6\xe1\x52\xa2\x86\x95\x42\x03\x15\x6a\xbc\x90\x8a\x0e\x08\x85\xc1\x0e\xed\x56\xeb\x1e\x5a\xb6\x9e\x3d\x3d" +
	"\x1d\x51\xdc\xed\xb2\x74\x3d\x83\xd2\xc1\x4a\x45\xc0\x9a\x06\x99\x0e\x17\x61\x89\xfe\x63\xc3\x04\x2f\xe1\x38\x93" +
	"\xb0\x47\x72\x0e\x05\x90\x04\xb2\x85\x25\x52\x32\xdc\xdb\x42\xf0\xe2\xd3\x85\xdc\xcc\xe6\x48\x7a\x9b\xa5\xc1\x76" +
	"\xf6\x82\x1f\x07\xee\x3f\x41\xc5\x36\x08\x3e\x35\xbe\x84\xdd\x5f\x85\xf0\x1e\x75\x6d\x40\x2d\xe1\x01\xf5\x86\x17" +
	"\x08\x8c\x20\x63\x5d\x8a\x2a\x8d\x21\x10\x1f\xe6\x77\x71\x4b\xf9\xc3\xfc\xce\x53\x66\xb3\x3f\x5f\xd0\xb7\x35\xe3" +
	"\xe2\xf9\x42\x46\xb7\xdc\x55\x52\x3b\x38\xa9\xa2\x30\x7b\x5e\xc4\xb6\x29\x19\xe1\xbf\xde\xbe\xbb\xbb\x50\xbe\x59" +
	"\x7a\x10\x3a\x37\x6c\x34\x3a\x67\xb6\xac\x16\xde\x15\x37\x8e\x4e\xb8\x04\xe1\x8c\xa1\x3d\xf7\x6d\xd3\x88\x6d\x80" +
	"\xce\x52\x27\xaf\xee\xc3\x39\xfd\xf4\x04\xca\x92\xdb\xe7\x90\x82\xfc\xfa\x7f\xbf\x8f\xa3\x41\xc9\x88\x4d\x60\x69" +
	"\x65\x41\x5c\xc9\xe1\x08\x9e\xa2\xc1\x40\x23\x59\x2d\xfd\xe7\xa0\x13\xa3\x09\x3c\x72\x59\xaa\xc7\x44\xa8\x82\x39" +
	"\xdb\xa4\x5b\x19\x3b\xb3\x43\xe5\xc4\x5d\x17\x61\x45\x8d\xd7\x86\xd8\x8a\xcb\xd5\xf5\xe6\xe6\xbb\x84\x35\x3c\x11" +
	"\x48\x06\x65\xa1\xb7\x0d\x25\x4a\xaf\xd2\x92\x6b\x2c\x48\xe9\x6d\x3c\x86\x34\x3d\xd9\xfc\x8a\x4d\xee\xec\xee\xde" +
	"\x4e\x60\xc9\x84\x09\x7c\x7c\x16\x26\x10\xc7\xe3\xa8\xef\x45\x2b\xa9\x7b\xcb\x76\xfb\x1c\xd7\x13\x7f\x67\x3b\xbc" +
	"\x5b\xad\x8f\x27\xee\x0f\xfe\xed\x0f\xfd\x30\xbf\xeb\x8c\xdc\x8c\x4b\xd6\x31\x90\x9b\x39\x70\x08\x49\xd8\x03\x08" +
	"\x66\xe8\xe7\xa3\xa9\xdd\x34\x1a\xec\xc6\xd1\xa0\x50\x75\x63\xc9\xb1\x7c\x72\xc3\x05\x2e\x95\xc6\x77\xca\x4a\x3a" +
	"\xcb\x94\xd3\xf7\xe4\xf4\x0a\x0e\x1d\x81\x51\x0b\x56\x23\x55\xaa\x34\x13\x6f\x7e\xda\x7d\x7a\x78\xbe\xfb\x06\xd0" +
	"\x80\x7a\x12\x32\xc8\x81\xb4\xc5\xe9\x7e\xfd\x50\xcf\x43\x77\x96\x3f\x6c\x70\x4a\xe5\x99\x03\x04\x12\x58\x2d\x20" +
	"\x07\x89\x8f\xae\x83\x0d\xaf\x48\x99\x6b\xab\xc5\xd5\xf8\xb4\xce\x3c\xf8\xc0\x6a\x91\x18\x64\xba\xa8\xee\x99\x66" +
	"\xb5\x49\x0c\xd2\xf0\xaa\x60\xed\x1e\xcf\xa8\xab\xc1\xd1\x34\xea\x0e\xd9\xab\x73\x7e\x6c\x32\x75\xc5\x56\xb0\x86" +
	"\xac\xf6\xcd\xdf\x2b\x4d\x21\x94\xb1\x1a\x0d\x2c\x50\xa8\xc7\x3d\x86\xc6\x75\x4b\xf4\x97\x77\x77\x3f\x12\x35\xf3" +
	"\xf0\x84\x08\x6e\x0f\x34\xae\x13\xd5\xa0\x1c\xc6\x7f\xbf\x7d\x1f\x8f\x9d\x5f\x09\xa9\x07\xd2\x5c\xae\x86\xa3\x9e" +
	"\x8d\x14\x8a\xb9\x30\x0e\x47\x90\xcf\x42\x1c\x06\x7c\x09\x43\xb7\x68\x88\x91\x35\x90\xe7\xf0\xdd\xcd\x4d\x1b\xa4" +
	"\x36\xce\xad\xa0\xe5\x8e\x47\xa2\xd1\x34\x4a\x9a\x90\x86\x83\x81\x13\xe9\xd0\x74\xc2\xc2\x0e\x9c\xb6\x5e\x86\x39" +
	"\x58\x9d\x6c\x3f\xc7\xdf\x45\x7d\xab\xfb\x43\x2c\xf7\x61\x3c\x32\x98\x87\x40\x75\xf8\xbb\x9e\xeb\xa8\xb5\xd2\x27" +
	"\xbe\x3f\x47\xeb\x98\x55\xfc\x4b\x2d\x7a\x41\x07\x8f\x14\x4f\xbf\x02\x33\x17\xfb\xbe\x41\xdb\xb6\x47\x27\xf4\xe6" +
	"\xb8\x4e\xd8\x42\xe9\x2e\xdf\xbb\xe8\x0c\x58\xe3\x7a\xda\x9f\xf5\x6a\x04\x79\x10\x99\x7d\x14\x8c\x7b\x0c\x8f\x5e" +
	"\xb8\x40\x15\x93\xa5\xc0\x4e\x17\xf6\x97\xc7\x90\x6e\x79\x39\xd6\x86\xfc\x23\xc3\xa3\x1c\x64\xe4\x88\x78\xab\xf8" +
	"\x6f\x42\xe1\xfe\x95\x11\xb6\x47\x9f\x2e\x1b\xd2\x17\xe7\xe3\x5f\x65\x3f\xca\x87\x63\xa0\xb7\xa7\x23\x93\xe7\x10" +
	"\xbb\x12\xc6\x09\xcc\x91\x95\xdb\x5f\x65\xbc\x2f\xe2\x93\xeb\x0c\xf9\xe1\x77\xc6\x15\xbc\x81\x23\xad\x81\x37\x10" +
	"\xa7\xac\x5e\x30\x63\x58\xa9\xf4\x35\x96\x2b\xdf\x42\x8a\x4f\x29\x2b\x6b\x2e\xff\x92\x7d\x7c\xa4\x59\xdc\xab\xce" +
	"\x5d\x17\x38\x8d\x4b\x8d\xa6\x7a\xf0\x17\xe9\x4c\x27\x2f\x29\x4e\xb8\x73\x7f\x4e\x70\x3a\xa2\x9d\xe4\x74\xe3\x9e" +
	"\xe4\xfc\x8f\xe5\xa2\x5f\x40\xc3\xfe\x95\x1e\xf5\xa3\x76\x72\x0c\xca\xd3\x93\xd2\x14\x34\x16\x56\x1b\x1c\xfb\x9f" +
	"\x0a\x4a\x12\x97\x96\x09\xb1\x85\x36\xd2\x5e\x32\xdb\x7a\x09\x7c\x92\x24\xf1\x7b\x0d\xd2\x7b\x5e\xa3\xb2\x34\xec" +
	"\x43\x06\x7e\x47\x79\xea\x6a\x72\x37\x86\x6f\x6f\x6e\x6e\xd2\xef\x47\x5e\x98\x93\x24\x81\x85\x25\x10\xbc\xe6\x14" +
	"\x1e\x83\xdf\xeb\xc6\x1c\x33\x3f\x5c\xa7\xb6\xf3\x84\x9f\x8d\xaf\xef\x38\xae\x3b\x7f\xb5\xec\x3f\xbb\xc7\x3d\x64" +
	"\x7e\x63\x96\x2a\xa5\x39\x6d\x2f\xb4\xaa\x2f\xef\xf4\xef\x98\x6e\x97\x1f\xfc\x27\xa5\x76\xff\xf3\xc3\x57\xa9\xb5" +
	"\x6f\xbf\x50\x6b\xe1\x01\xea\x7e\xcb\x38\x49\x4b\x92\x24\x1e\x4d\x5f\xcc\xfb\x79\x9f\x3a\xc6\xbc\xf5\x7d\x83\xf5" +
	"\x91\x27\x10\xbf\x79\x4d\x5d\x3f\xdb\x72\x5e\x71\xc2\x71\xcf\xf1\x26\xad\x37\xcf\xd6\xdf\x41\xcd\x5f\x25\x3e\xff" +
	"\x47\xc5\xf7\xdf\xd1\x39\xff\xd3\xe8\x85\x47\x4b\xfb\x22\xff\x42\xeb\xef\x2c\x2e\xf5\xfe\x76\xed\x99\xe6\x7f\xc0" +
	"\xee\xba\xff\x79\x51\xec\xc6\xd1\x6e\x34\x8d\xfe\x1d\x00\x00\xff\xff\xbf\x88\x24\xb9\x68\x13\x00\x00")

func bindataAeshostjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataAeshostjs,
		"aes-host.js",
	)
}



func bindataAeshostjs() (*asset, error) {
	bytes, err := bindataAeshostjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "aes-host.js",
		size: 4968,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x6b\xdc\x30\x10\x7c\x76\x7e\xc5\xd6\x25\x5c\x52\x6a\xfb\x52" +
	"\x52\x08\x3e\x9f\x21\xb4\x81\xbe\xb5\x90\x52\x28\x25\x0f\x6b\x6b\xef\xac\x44\x5f\x48\xeb\xfb\xe8\x91\xff\x5e\x6c" +
	"\xf9\x42\x42\x1b\xa8\x5f\xb4\xde\x9d\x19\xc9\xa3\x71\xf5\xe6\xf3\xd7\x4f\xdf\x7f\x7e\xbb\x81\x8e\xb5\xaa\x4f\xaa" +
	"\x61\x01\x85\x66\xbd\x4c\xc9\xa4\xf5\x49\x52\x75\x84\xa2\x3e\x49\x92\x4a\x13\x23\xb4\x1d\xfa\x40\xbc\x4c\x7b\x5e" +
	"\x65\x57\xe9\x38\x60\xc9\x8a\xea\x6b\xdd\x60\x08\x28\xac\x87\x1b\xb1\x26\xb8\x65\x6c\x1f\x20\x83\x95\xf4\x81\xa1" +
	"\xb1\x96\xab\x22\x22\x07\x4e\xe0\x7d\xac\x92\x95\x24\x25\x02\x31\x3c\x7f\x0e\x20\x64\x70\x0a\xf7\x25\x30\x36\x8a" +
	"\x16\xf0\xf8\x02\x5b\x83\xc2\x86\xd4\x3f\xb1\x99\xb7\xdb\xd7\xf0\x35\xbc\xfb\x1b\xdf\x92\x52\x03\x61\x60\x0c\xe3" +
	"\xc6\xee\xb2\x20\x7f\x4b\xb3\x2e\xa1\xb1\x5e\x90\xcf\x1a\xbb\x7b\x4d\x52\x1a\xd7\xf3\x2f\xde\x3b\x5a\xa6\x4c\x3b" +
	"\x4e\xef\xe0\x00\x5a\x9a\x6c\x2b\x05\x77\x25\x5c\xce\x49\xff\x0f\xb7\xf7\x2a\xbd\x83\x57\xb9\x83\x34\x7a\x42\x38" +
	"\xc0\xca\x1a\xce\x56\xa8\xa5\xda\x97\xa0\xad\xb1\xc1\x61\x7b\xb4\xe8\x2d\x3a\x07\x87\xa1\x4a\x34\xee\x8e\x42\x57" +
	"\xd2\x2c\xa6\x9e\x5f\x4b\x53\x02\xf6\x6c\xc7\xce\x48\x72\x9e\x26\x4e\x83\xed\xc3\xda\xdb\xde\x88\x12\x1a\x85\xed" +
	"\x43\xa4\xb5\x56\x59\x5f\xc2\xb6\x93\x4c\xb1\x33\x09\xb7\xa8\xda\xb3\x8b\xf9\xfc\x14\x32\xb8\x24\x7d\x7e\xfa\x72" +
	"\x9b\x39\x7c\x20\x1d\x5b\x0e\x85\x18\x2d\x9d\xe7\x1f\x8f\xbd\xe8\x6e\x09\xc1\x2a\x29\xe0\xc2\xed\x60\xed\x89\xcc" +
	"\xd3\xc1\xaa\xe2\x98\x93\xaa\x98\x72\x58\x35\x56\xec\xc7\x08\x09\xb9\x01\x29\x96\x29\x3a\x37\xe6\x30\xa9\x90\x42" +
	"\xd6\xd9\xc0\x75\x55\x3c\x95\xa3\x8a\x90\x9b\x98\xba\xd6\x4b\xc7\x10\x0d\xd7\x56\xf4\x8a\x22\x55\x6a\x67\x3d\xc3" +
	"\x8f\x9e\x60\xe5\xad\x86\x59\xc7\xec\x42\x59\x14\xad\x30\xf9\x7d\x10\xa4\xe4\xc6\xe7\x86\xb8\x30\x4e\x17\x9b\x9e" +
	"\x0a\x21\x03\x0f\x45\x4e\x41\xe7\x8d\xb7\xdb\x40\x3e\xbf\x0f\xb3\xc5\x33\xb9\xeb\x9b\xdb\x2f\x36\xf0\x24\x99\x3f" +
	"\x1d\x2a\xe2\x06\xe0\x06\x3d\x6c\x34\x2c\xc1\xd0\x76\xd8\xfd\xec\x30\xd9\xad\x9d\x35\x64\x38\x94\xd3\xbd\x24\xb3" +
	"\x23\x79\x56\x1e\x75\xdf\x8f\x93\xc7\xb8\x90\x2a\x61\x36\x5c\xfe\x6c\x7c\x7f\x3c\x5f\x44\xff\xc6\x2f\x1e\x0d\x8c" +
	"\xc6\x55\x45\xfc\xd3\xff\x04\x00\x00\xff\xff\x6c\x31\x81\x32\xfa\x03\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 1018,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"admin/index.html": bindataAdminIndexhtml,
	"aes-host.js":      bindataAeshostjs,
	"index.html":       bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"admin": {Func: nil, Children: map[string]*bintree{
		"index.html": {Func: bindataAdminIndexhtml, Children: map[string]*bintree{}},
	}},
	"aes-host.js": {Func: bindataAeshostjs, Children: map[string]*bintree{}},
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
