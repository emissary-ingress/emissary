// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/admin/index.html
// bindata/aes-host.js
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAdminIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xd1\x6e\xe3\xb6\x12\x7d\xbe\xf9\x8a\x59\x2e\x16\xb0\x71\x6d\xc9" +
	"\xb9\xb8\x05\x0c\x45\x32\xba\x4d\x53\x74\x8b\x6d\x37\x40\xb2\x0f\x7d\x2a\x68\x71\x24\xb1\x96\x48\x95\xa4\x9c\xb8" +
	"\x41\xfe\xbd\xa0\x24\xcb\xa2\x64\xaf\xbd\x6d\x93\x07\x4b\xe4\xcc\xe1\xf0\xf0\xcc\x90\x54\xf8\xe6\xfb\x4f\xb7\x8f" +
	"\xbf\xde\xdf\x41\x66\x8a\x7c\x75\x15\xda\x1f\xc8\xa9\x48\x23\x82\x82\xac\xae\x00\xc2\x0c\x29\xb3\x0f\x00\x61\x81" +
	"\x86\x42\x9c\x51\xa5\xd1\x44\xa4\x32\xc9\x7c\x49\xda\x2e\xc3\x4d\x8e\xab\xf7\xc5\x9a\x6a\x4d\x99\x54\x70\xc7\x52" +
	"\x84\x07\x43\xe3\x0d\xcc\xe1\x3d\x2b\xb8\x08\xfd\xc6\xa8\x71\xd0\x66\xb7\x7f\x06\x58\x4b\xb6\x83\x97\xab\xff\x00" +
	"\x14\xf4\x79\xfe\xc4\x99\xc9\x02\x58\x72\x71\xd3\x34\xa9\x94\x8b\x00\x68\x65\xe4\x4d\xeb\xf0\xda\x80\xf8\x1d\x4a" +
	"\xe8\xef\xe3\x0c\x2d\x58\x3b\x08\xe3\xdb\xfd\x10\xf6\x19\x38\x8b\x88\xe6\xa9\xa8\x4a\xb2\xba\xcd\x79\xbc\x81\x0c" +
	"\x15\x82\x91\x60\x5b\xa1\x2a\x21\x91\x0a\x28\xc4\xb2\x28\x2a\xc1\xcd\x0e\x72\x1e\xa3\xd0\xe8\x85\x7e\x1f\xcb\x09" +
	"\x1e\xe0\x6d\x83\x09\x2f\x5d\x8b\xfd\x2b\x29\x63\x5c\xa4\x01\xfc\x6f\x51\x3e\xdf\x38\x5d\x6b\xa9\x18\xaa\x00\xae" +
	"\xcb\x67\xd0\x32\xe7\x0c\xde\x2e\x97\xcb\x83\xcd\xeb\xd5\x10\x7b\x5e\x48\x46\xf3\xc1\x08\x8c\xeb\x32\xa7\xbb\x00" +
	"\x84\x14\xe8\x8e\x50\x4a\xcd\x0d\x97\x22\x80\x84\x3f\x23\x73\x3b\xff\x9c\x73\xc1\xf0\x39\x80\x6b\xb7\x3d\xc7\xc4" +
	"\x04\x0b\xb7\xcd\xc8\x72\xd8\xd4\xac\xcf\xf5\x62\xf1\xce\x6d\xcf\x90\xa7\x99\x39\xd2\x21\xb7\xa8\x92\x5c\x3e\x05" +
	"\xfd\x25\x6c\x99\xa0\xf1\x26\x55\xb2\x12\x6c\x1e\xcb\x5c\xaa\x00\x54\xba\x9e\x2c\x66\x8b\xd9\x62\x7a\x81\x25\x6d" +
	"\x4c\x67\x0b\xef\xff\xd3\x2f\xd2\x17\x4b\x61\x50\x98\x59\xd7\x90\x70\xc1\x75\x86\xec\x72\x4a\xc7\x01\xbc\x4d\xd0" +
	"\xfe\xbb\x66\x7b\xb9\x5e\x7f\xf3\x0e\xc6\xf3\xfd\x07\xa2\x38\x50\x0f\xcb\x3e\xc3\x47\x66\x8b\x4a\x49\x35\x98\xd9" +
	"\x21\xe6\xc5\x62\xb1\x38\xea\xee\x71\xb1\xa5\x76\xe0\x97\xf3\x13\x1f\x82\x34\xbf\xbd\x8c\x84\x71\xd2\x35\x22\x26" +
	"\x87\xc4\x19\xf6\xb7\xab\xd4\xb3\x00\x08\x13\xa9\x8a\x95\x2d\x04\x36\xf1\x4a\x2a\x56\x77\x05\xe5\x79\x10\xfa\xf5" +
	"\x0b\x84\x5c\x94\x95\xe9\xa3\xa0\xed\x27\x60\x76\x25\x46\xc4\xe0\xb3\x21\x20\x68\x81\x11\x69\x3b\xb6\x34\xaf\x30" +
	"\x22\xc4\x77\x50\x6f\xa5\x48\xb8\x2a\xce\xe1\xda\x18\xad\xdd\x49\xfc\x83\x41\x6f\x9c\x3e\x9d\x63\xe0\x98\x8a\x18" +
	"\xbb\x88\xd7\x95\x31\x52\x74\xee\xb7\x6d\xa7\xbf\x1a\x3b\xa6\xf2\x84\xd3\x43\x53\xe4\xc0\x19\x3a\xf4\x1b\x2a\x7b" +
	"\x2d\x03\xfe\x6b\xdd\x90\x95\x53\xec\xac\x9f\xfb\x3a\x70\xda\x67\x92\xbb\x6a\x96\xc4\x63\x56\xf3\x9a\xb0\x55\xcb" +
	"\x72\xdf\xa3\x99\xc2\x51\x1f\xab\x0b\x2e\x2a\x24\x76\x95\xea\xa7\xd0\x6f\xcc\x4f\x47\xe9\x14\x6c\xb7\x7a\xc7\x8a" +
	"\x97\xe6\x60\xba\xa5\x0a\xda\x0a\x1e\x01\x93\x71\x55\xa0\x30\x5e\x8a\xe6\x2e\x47\xfb\xf8\xdd\xee\x03\x9b\xec\xf7" +
	"\x8d\xa9\xe3\xd6\x54\xe5\xb3\x5e\xad\xf0\x5d\xdf\x5a\x2d\x17\xf8\x36\xaa\x75\x7d\x5b\x8d\x5d\xea\xdd\x69\x72\x80" +
	"\x52\x4b\xeb\x02\x90\x56\xa0\xae\x77\x2a\x2f\xf0\x4c\xe5\x70\xd6\x75\x69\xba\x20\xee\x5a\x8a\xa3\x59\xdb\xf2\x70" +
	"\x49\xc0\x6d\x21\x71\xfd\xbb\x9a\x7f\x1e\xa0\x13\xf5\x71\x84\xdf\xac\x8a\xbf\x02\xa6\x51\xfd\x78\x36\x5f\x03\xd1" +
	"\x25\xc1\xf4\x50\xb1\x15\x6a\xb4\x20\x49\x25\x62\xbb\xdd\x4f\xa6\x4e\xed\xae\x65\xe7\xd5\x25\xd9\x6b\x77\xb6\x88" +
	"\xd8\x9d\x8d\xf4\xb7\x95\x96\xac\xb3\x76\xb5\x94\xbc\x7d\x55\x1b\x20\x58\x79\x1d\xed\xdb\xc7\x7f\x14\xfe\x88\x5d" +
	"\x4d\xad\xc7\x85\x40\xf5\xe3\xe3\xcf\x1f\xc7\x23\x9d\x0b\xb4\xb7\xa1\x35\xba\xf5\xa4\x88\xeb\xc3\x5e\xd4\xf0\x75" +
	"\xe5\x80\x0d\x3b\xbb\xde\x86\xff\x5e\xff\xd7\x90\xbc\xce\x65\xbc\xb9\x84\xe5\xb1\x61\x43\x73\x22\xe3\x4a\x4f\xdc" +
	"\x43\x4d\xf7\x9c\xca\xf3\x61\xf1\x04\x26\xbd\x15\x83\x28\x02\x42\xa6\x83\xad\xbd\x31\x88\x73\xaa\xf5\x47\xae\x8d" +
	"\x47\x19\x9b\x90\xf6\x14\x40\x06\x07\xb0\x3a\x23\xfb\x0b\x53\xe6\x48\x35\x82\xae\xca\x32\xdf\x01\x15\x0d\x5a\x7f" +
	"\x4d\x5f\x01\x73\x8d\xa3\x50\xde\x44\xae\x62\xce\x45\xa5\xb0\x90\x5b\x3c\x19\xd8\x1e\xeb\x6f\x4e\xa3\x1e\x4d\x03" +
	"\x93\x20\xa4\x81\x82\x9a\x38\x3b\x32\x87\x7f\x39\xc2\x33\x0e\xa3\x20\xc9\xcd\xd5\x10\xf1\xa2\x9c\x3d\x9d\x7f\x63" +
	"\xe1\x5d\x94\x5d\xf0\xa5\x54\xbd\x97\xda\x70\x91\x7a\x9e\x47\xdc\x70\x13\x34\x71\x36\x21\x99\x31\xa5\x0e\x7c\xbf" +
	"\x40\xa3\xb8\x91\xc2\x63\xd4\xd0\x27\xae\xd0\xe3\xd2\x6f\x37\xd8\xd9\x80\x6a\x80\x02\x4d\x26\x59\x00\xe4\xfe\xd3" +
	"\xc3\x23\x99\x0d\x7a\xed\xbd\x0f\x95\x0e\x86\x5e\x00\xa4\x25\x69\x6e\x8f\x48\x24\x00\x42\xcb\x32\xe7\x31\xb5\xc9" +
	"\xe2\xff\xae\xa5\xb8\xe9\x2e\xb3\x9f\x1f\x7f\x98\x2f\xc9\x00\xe1\x75\x38\x94\xbd\x59\x06\xf0\xd3\xc3\xa7\x5f\x3c" +
	"\x6d\x14\x17\x29\x4f\x76\x93\xf1\xb8\xb5\x38\x82\x7e\xb9\x1c\x02\x75\x8a\x08\xdc\x44\x18\x06\x30\xbd\xfa\xc2\x2b" +
	"\x80\x67\x32\x14\x13\xcb\x61\xb4\x7a\x51\x68\x2a\x25\xc0\xbe\x79\x76\x72\x93\xe9\x09\x7b\x85\x3a\x5a\x8d\xa3\x8e" +
	"\xa5\xd0\x32\x47\x2f\x97\xa9\x35\x19\x08\x12\x4e\xa8\xe3\x98\x8a\xa0\xad\x3e\x64\xcb\x19\x01\x2e\x6c\x61\x1d\xa6" +
	"\x78\xf3\x77\x52\x48\xb7\x52\xa4\x8a\x9a\x2a\xaf\x17\x4b\xcf\xa0\xad\x35\xb9\x94\x9b\xe6\x8e\xde\x56\x1b\x7b\x77" +
	"\x27\xf0\xdf\x3e\xd9\xa3\x71\x8e\x66\xf0\x99\x00\x1e\xa4\x52\xbb\x19\x98\xfa\xfb\xc0\x13\xd5\x40\xa1\x54\x72\x9d" +
	"\x63\x61\x7f\x63\xd4\x9a\x8b\x14\x76\xb2\x52\xa0\xf0\x8f\x0a\xb5\xf1\xe0\xbe\x89\xd1\xd2\x44\x63\x53\xd7\x45\xa9" +
	"\xcc\xb7\x3d\x8d\x03\x15\x6c\x5f\x2f\x4d\xc6\x75\x10\xae\xd5\xca\x86\xbf\x36\x92\x4e\x06\xc2\xb2\xac\x0d\x57\xf0" +
	"\x70\xd3\x3a\x2d\x8a\xd8\x56\xb0\x49\x5d\x41\xa2\x55\x7f\x55\xeb\x26\x07\xf2\xf5\xd8\x05\xae\x77\x3a\xee\x9d\x9b" +
	"\xeb\x6f\x29\x0f\xa6\x5a\xd7\xf4\xd7\x1f\x74\xe0\xf3\x07\x0f\x1e\x33\xae\xa1\xb0\x17\xff\xba\x7c\xa2\x60\x50\x95" +
	"\xfb\xcf\x3a\x68\x49\x2a\xaa\x38\x83\x42\x2a\x04\x93\x51\x01\x39\x17\x1b\x0d\x5c\x18\x69\xd9\xb5\xc7\x1f\x6d\x21" +
	"\x5b\x97\x4d\xb5\xc6\x58\x8a\xfe\xf7\x96\xee\x31\xf4\x9b\x4f\x3b\xa1\xdf\x7c\xad\xfa\x2b\x00\x00\xff\xff\xeb\xc9" +
	"\xf0\xe6\xbe\x12\x00\x00")

func bindataAdminIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAdminIndexhtml,
		"admin/index.html",
	)
}



func bindataAdminIndexhtml() (*asset, error) {
	bytes, err := bindataAdminIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "admin/index.html",
		size: 4798,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAeshostjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5d\x6f\xe3\x36\x16\x7d\x96\x7e\xc5\xad\xf6\x21\x36\xea\x48\x69" +
	"\x81\xbe\xd8\xb2\x81\x41\x37\xbb\x2d\x90\x41\x03\x67\x66\xb7\x0b\x14\x68\x69\xe9\xda\xe2\x0c\x45\xca\xe4\xa5\x33" +
	"\x46\xea\xff\xbe\x20\x29\xd9\xf2\x47\x26\x99\xc5\x2c\xf6\x61\x81\x00\x11\xc9\xcb\xc3\x73\x3f\x78\x2e\xcd\xeb\x46" +
	"\x69\x82\x7f\x58\x84\xa5\x56\x35\x5c\x55\x44\x8d\x19\x67\x59\x51\xca\xf4\x83\x29\x51\xf0\x8d\x4e\x25\x52\x26\x9b" +
	"\x3a\xdb\x58\xcc\x4a\x6e\xc8\x7d\xa4\x68\xea\x74\xa1\xd5\xa3\x41\x9d\x7e\x30\x57\x93\x38\xc6\x4f\x1e\xac\xc4\x25" +
	"\xb3\xc2\x83\xa6\xf8\x89\x50\x96\x83\xa7\x38\x22\xac\x1b\xc1\x08\xc7\xf0\x47\x5e\xf2\xcd\x2c\xce\x97\x4a\xd7\xb0" +
	"\xb9\x56\x72\x6c\xec\xa2\xe6\x94\x36\x1a\x37\x28\x69\x9a\x28\xf9\xe0\x67\x92\x59\x1c\x45\xf9\x92\xa3\x28\x0d\x92" +
	"\x1b\x44\xb9\xc0\x15\xca\x72\xf6\xb3\xe4\xc4\x99\x80\x77\x77\x0f\x60\x90\x6c\x93\x67\xed\x4a\xb0\x62\x0b\x14\xfe" +
	"\x33\xca\x4d\xc3\xe4\xec\x27\x65\x48\xb2\x1a\x81\x14\x68\x5c\x5b\x34\x04\x0c\x0a\xd4\xc4\x97\xbc\x60\x84\xb0\x54" +
	"\x7a\x9c\x67\xde\x38\xec\xf3\x2c\x23\xff\xc9\x65\x63\x09\x68\xdb\xe0\x34\x21\xfc\x44\x09\x38\xac\x69\x52\xb5\xa8" +
	"\x09\x6c\xae\x6b\x55\xa2\x18\x6f\x98\xb0\xfd\x85\x00\x10\x79\x37\x3d\x8a\xf3\xae\x23\xf3\x63\xc5\xe4\x0a\x13\xc8" +
	"\xba\x73\x1a\xd8\x5c\xf3\xe5\x34\xf9\xa6\x3a\xb2\x28\x93\xd9\x3f\x11\x98\x25\x75\xbd\xe4\x42\x60\x09\x54\x71\x13" +
	"\x32\x46\x15\xc2\xfb\xf9\x5d\x7b\xce\x56\x59\xb0\xc6\x19\x28\x60\x45\x81\xc6\x04\xd3\x47\x5c\x40\xc3\x56\x98\x02" +
	"\xfc\x0d\x51\xc0\x52\xa3\x0f\x45\xe1\xf1\x81\xd3\x08\xa8\x52\x76\x55\xa5\x79\xd6\xb4\xfe\x67\x5d\x00\xf2\xec\x10" +
	"\xce\xf3\xc8\xbe\xf9\xf1\xed\x2d\x34\x5a\x6d\x78\x89\x27\x11\xec\x87\xcd\x6a\xd1\x45\xad\x33\x3e\x8b\xda\x7e\x21" +
	"\xbe\x10\xb4\xfb\x76\xf1\x38\x68\xcf\x72\xeb\x9f\x5d\x54\x58\x7c\x5c\xa8\x4f\x1d\x01\x52\xe6\x77\xb6\xd2\x78\x9e" +
	"\x37\x52\xe6\x4d\xb7\xb0\xe0\xb2\x1c\x97\xdc\xb0\x85\xc0\xd2\x2f\xcd\x71\x0d\x7f\xfe\x09\xa4\x4c\x47\x06\xbe\x99" +
	"\x4e\xf7\xce\xb7\x6b\xb7\xda\x4d\x83\xb4\x42\xec\x53\xeb\x8a\xa9\xcd\x6d\xc0\x49\xf6\x29\x9f\xdd\x29\x56\x72\xb9" +
	"\x02\xd3\x70\x29\x51\xc3\x4a\xa1\x81\x0a\x35\x5e\x48\x45\x07\x84\xc2\x60\x87\x76\xab\x75\x0f\x2d\x5f\xcf\x9e\x9e" +
	"\x8e\x28\xee\x76\x79\xb6\x9e\x41\xe9\x60\xa5\x22\x60\x4d\x83\x4c\x87\x8b\xb0\x44\xff\xb1\x61\x82\x97\x70\x9c\x49" +
	"\xd8\x23\x39\x87\x02\x48\x0a\xf9\xc2\x12\x29\x19\xee\x6d\x21\x78\xf1\xf1\x42\x6e\x66\x73\x24\xbd\xcd\xb3\x60\x3b" +
	"\x7b\xc1\x8f\x03\xf7\x9f\xa1\x62\x1b\x04\x9f\x1a\x5f\xc2\xee\xaf\x42\x78\x87\xba\x36\xa0\x96\xf0\x80\x7a\xc3\x0b" +
	"\x04\x46\x90\xb3\x2e\x45\x95\xc6\x10\x88\xf7\xf3\xbb\xa4\xa5\xfc\x7e\x7e\xe7\x29\xb3\xd9\x97\x17\xf4\x6d\xcd\xb8" +
	"\x78\xbe\x90\xd1\x2d\x77\x95\xd4\x0e\x4e\xaa\x28\xcc\x9e\x17\xb1\x6d\x4a\x46\xf8\xaf\x37\x6f\xef\x2e\x94\x6f\x9e" +
	"\x1d\x84\xce\x0d\x1b\x8d\xce\x99\x2d\xab\x85\x77\xc5\x8d\xe3\x13\x2e\x41\x38\x13\x68\xcf\x7d\xd3\x34\x62\x1b\xa0" +
	"\xf3\xcc\xc9\xab\xfb\x70\x4e\x3f\x3d\x81\xb2\xe4\xf6\x39\xa4\x20\xbf\xfe\xdf\x1f\xa3\x38\x2a\x19\xb1\x31\x2c\xad" +
	"\x2c\x88\x2b\x39\x18\xc2\x53\x1c\x45\x1a\xc9\x6a\xe9\x3f\xa3\x4e\x8c\xc6\xf0\xc8\x65\xa9\x1e\x53\xa1\x0a\xe6\x6c" +
	"\xd3\x6e\x65\xe4\xcc\x0e\x95\x93\x74\x5d\x84\x15\x35\x5e\x1b\x62\x2b\x2e\x57\xd7\x9b\x9b\xef\x53\xd6\xf0\x54\x20" +
	"\x19\x94\x85\xde\x36\x94\x2a\xbd\xca\x4a\xae\xb1\x20\xa5\xb7\xc9\x08\xb2\xec\x64\xf3\x2b\x36\xb9\xb3\xbb\x7b\x3b" +
	"\x86\x25\x13\x26\xf0\xf1\x59\x18\x43\x92\x8c\xe2\xbe\x17\xad\xa4\xee\x2d\xdb\xed\x73\x5c\x8f\xfd\x9d\xed\xf0\x6e" +
	"\xb5\x3e\x9e\xb8\x3f\xf8\xb7\x3f\xf4\xfd\xfc\xae\x33\x72\x33\x2e\x59\xc7\x40\x6e\xe6\xc0\x21\x24\x61\x0f\x20\x98" +
	"\xa1\x5f\x8e\xa6\x76\x93\x38\xda\x8d\xe2\xa8\x50\x75\x63\xc9\xb1\x7c\x72\xc3\x05\x2e\x95\xc6\xb7\xca\x4a\x3a\xcb" +
	"\x94\xd3\xf7\xf4\xf4\x0a\x0e\x1c\x81\x61\x0b\x56\x23\x55\xaa\x34\x63\x6f\x7e\xda\x7d\x7a\x78\xbe\xfb\x06\xd0\x80" +
	"\x7a\x12\x32\x98\x02\x69\x8b\x93\xfd\xfa\xa1\x9e\x07\xee\x2c\x7f\x58\x74\x4a\xe5\x99\x03\x04\x12\x58\x2d\x60\x0a" +
	"\x12\x1f\x5d\x07\x1b\x5c\x91\x32\xd7\x56\x8b\xab\xd1\x69\x9d\x79\xf0\xc8\x6a\x91\x1a\x64\xba\xa8\xee\x99\x66\xb5" +
	"\x49\x0d\xd2\xe0\xaa\x60\xed\x1e\xcf\xa8\xab\xc1\xe1\x24\xee\x0e\xd9\xab\xf3\xf4\xd8\x64\xe2\x8a\xad\x60\x0d\x59" +
	"\xed\x9b\xbf\x57\x9a\x42\x28\x63\x35\x1a\x58\xa0\x50\x8f\x7b\x0c\x8d\xeb\x96\xe8\xaf\x6f\xef\x7e\x22\x6a\xe6\xe1" +
	"\x09\x11\xdc\x8e\x34\xae\x53\xd5\xa0\x1c\x24\x7f\xbf\x7d\x97\x8c\x9c\x5f\x29\xa9\x07\xd2\x5c\xae\x06\xc3\x9e\x8d" +
	"\x14\x8a\xb9\x30\x0e\x86\x30\x9d\x85\x38\x44\x7c\x09\x03\xb7\x68\x88\x91\x35\x30\x9d\xc2\xf7\x37\x37\x6d\x90\xda" +
	"\x38\xb7\x82\x36\x75\x3c\x52\x8d\xa6\x51\xd2\x84\x34\x1c\x0c\x9c\x48\x87\xa6\x13\x16\x76\xe0\xb4\xf5\x32\xcc\xc1" +
	"\xea\x64\xfb\x39\xfe\x2e\xee\x5b\xdd\x1f\x62\xb9\x0f\xe3\x91\xc1\x3c\x04\xaa\xc3\xdf\xf5\x5c\x47\xad\x95\x3e\xf1" +
	"\xfd\x39\x5a\xc7\xac\x92\x5f\x6b\xd1\x0b\x3a\x78\xa4\x64\xf2\x15\x98\xb9\xd8\xf7\x0d\xda\xb6\x3d\x3c\xa1\x37\xc7" +
	"\x75\xca\x16\x4a\x77\xf9\xde\xc5\x67\xc0\x1a\xd7\x93\xfe\xac\x57\x23\x98\x06\x91\xd9\x47\xc1\xb8\xc7\xf0\xf0\x85" +
	"\x0b\x54\x31\x59\x0a\xec\x74\x61\x7f\x79\x0c\xe9\x96\x97\x63\x6d\xc8\x3f\x32\x3c\xca\x41\x46\x8e\x88\xb7\x8a\xff" +
	"\x6d\x28\xdc\xbf\x32\xc2\xf6\xe8\xd3\x65\x43\xfa\xe2\x7c\xf2\x9b\xec\x47\xf9\x70\x0c\xf4\xf6\x74\x64\xa6\x53\x48" +
	"\x5c\x09\xe3\x18\xe6\xc8\xca\xed\x6f\x32\xd9\x17\xf1\xc9\x75\x76\x29\xcd\x58\xbd\x60\xc6\xb0\x52\xe9\x6b\x2c\x57" +
	"\xbe\x4b\x14\x1f\x33\x56\xd6\x5c\xfe\x25\xff\xf0\x48\xb3\xa4\x57\x80\xbb\x2e\x36\x1a\x97\x1a\x4d\xf5\xe0\xef\xca" +
	"\x99\x14\x5e\x12\x95\x70\xad\xbe\x4c\x53\x3a\xdd\xeb\x54\xa5\x1b\xf7\x54\xe5\x7f\xac\x08\xfd\x1a\x19\xf4\x6f\xed" +
	"\xb0\x1f\xb5\x93\x63\x50\x9e\x9e\x94\x65\xa0\xb1\xb0\xda\xe0\xc8\xff\x1a\x50\x92\xb8\xb4\x4c\x88\x2d\xb4\x91\xf6" +
	"\xaa\xd8\x96\x44\xe0\x93\xa6\xa9\xdf\x6b\x90\xde\xf1\x1a\x95\xa5\x41\x1f\x32\xf0\x3b\xca\x53\x57\x76\xbb\x11\x7c" +
	"\x77\x73\x73\x93\xfd\x30\xf4\xda\x9b\xa6\x29\x2c\x2c\x81\xe0\x35\xa7\xf0\xde\xfb\x41\x37\xe6\x98\xf9\xe1\xc6\xb4" +
	"\xcd\x25\xfc\x32\x7c\x7d\x53\x71\x0d\xf8\xab\x65\xff\xd9\x3d\xee\xad\xf2\x3b\xb3\x54\x29\xcd\x69\x7b\xa1\x1b\x7d" +
	"\x7e\xa7\x7f\xaa\x74\xbb\xfc\xe0\x3f\x29\xb5\xfb\x5f\x1e\xbe\x4a\xad\x7d\xf7\x99\x5a\x0b\x6f\x4c\xf7\x73\xc5\xa9" +
	"\x56\x9a\xa6\xc9\x70\xf2\x62\xde\xcf\x5b\xd1\x31\xe6\xad\x6f\x0d\xac\x8f\x3c\x86\xe4\xdb\xd7\xd4\xf5\xb3\x5d\xe5" +
	"\x15\x27\x1c\xb7\x15\x6f\xd2\x7a\xf3\x6c\xfd\x1d\x04\xfb\x55\xe2\xf3\x7f\x54\x7c\xff\x1d\x9d\xf3\xbf\x7e\x5e\x78" +
	"\x97\xb4\x8f\xee\xcf\x74\xf7\xce\xe2\x52\x7b\x6f\xd7\x9e\xe9\xef\x07\xec\xae\xc1\x9f\x17\xc5\x6e\x14\xef\x86\x93" +
	"\xf8\xdf\x01\x00\x00\xff\xff\x6d\xdb\x81\xd9\x4b\x13\x00\x00")

func bindataAeshostjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataAeshostjs,
		"aes-host.js",
	)
}



func bindataAeshostjs() (*asset, error) {
	bytes, err := bindataAeshostjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "aes-host.js",
		size: 4939,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x6b\xdc\x30\x10\x7c\x76\x7e\xc5\xd6\x25\x5c\x52\x6a\xfb\x52" +
	"\x52\x08\x3e\x9f\x21\xb4\x81\xbe\xb5\x90\x52\x28\x25\x0f\x6b\x6b\xef\xac\x44\x5f\x48\xeb\xfb\xe8\x91\xff\x5e\x6c" +
	"\xf9\x42\x42\x1b\xa8\x5f\xb4\xde\x9d\x19\xc9\xa3\x71\xf5\xe6\xf3\xd7\x4f\xdf\x7f\x7e\xbb\x81\x8e\xb5\xaa\x4f\xaa" +
	"\x61\x01\x85\x66\xbd\x4c\xc9\xa4\xf5\x49\x52\x75\x84\xa2\x3e\x49\x92\x4a\x13\x23\xb4\x1d\xfa\x40\xbc\x4c\x7b\x5e" +
	"\x65\x57\xe9\x38\x60\xc9\x8a\xea\x6b\xdd\x60\x08\x28\xac\x87\x1b\xb1\x26\xb8\x65\x6c\x1f\x20\x83\x95\xf4\x81\xa1" +
	"\xb1\x96\xab\x22\x22\x07\x4e\xe0\x7d\xac\x92\x95\x24\x25\x02\x31\x3c\x7f\x0e\x20\x64\x70\x0a\xf7\x25\x30\x36\x8a" +
	"\x16\xf0\xf8\x02\x5b\x83\xc2\x86\xd4\x3f\xb1\x99\xb7\xdb\xd7\xf0\x35\xbc\xfb\x1b\xdf\x92\x52\x03\x61\x60\x0c\xe3" +
	"\xc6\xee\xb2\x20\x7f\x4b\xb3\x2e\xa1\xb1\x5e\x90\xcf\x1a\xbb\x7b\x4d\x52\x1a\xd7\xf3\x2f\xde\x3b\x5a\xa6\x4c\x3b" +
	"\x4e\xef\xe0\x00\x5a\x9a\x6c\x2b\x05\x77\x25\x5c\xce\x49\xff\x0f\xb7\xf7\x2a\xbd\x83\x57\xb9\x83\x34\x7a\x42\x38" +
	"\xc0\xca\x1a\xce\x56\xa8\xa5\xda\x97\xa0\xad\xb1\xc1\x61\x7b\xb4\xe8\x2d\x3a\x07\x87\xa1\x4a\x34\xee\x8e\x42\x57" +
	"\xd2\x2c\xa6\x9e\x5f\x4b\x53\x02\xf6\x6c\xc7\xce\x48\x72\x9e\x26\x4e\x83\xed\xc3\xda\xdb\xde\x88\x12\x1a\x85\xed" +
	"\x43\xa4\xb5\x56\x59\x5f\xc2\xb6\x93\x4c\xb1\x33\x09\xb7\xa8\xda\xb3\x8b\xf9\xfc\x14\x32\xb8\x24\x7d\x7e\xfa\x72" +
	"\x9b\x39\x7c\x20\x1d\x5b\x0e\x85\x18\x2d\x9d\xe7\x1f\x8f\xbd\xe8\x6e\x09\xc1\x2a\x29\xe0\xc2\xed\x60\xed\x89\xcc" +
	"\xd3\xc1\xaa\xe2\x98\x93\xaa\x98\x72\x58\x35\x56\xec\xc7\x08\x09\xb9\x01\x29\x96\x29\x3a\x37\xe6\x30\xa9\x90\x42" +
	"\xd6\xd9\xc0\x75\x55\x3c\x95\xa3\x8a\x90\x9b\x98\xba\xd6\x4b\xc7\x10\x0d\xd7\x56\xf4\x8a\x22\x55\x6a\x67\x3d\xc3" +
	"\x8f\x9e\x60\xe5\xad\x86\x59\xc7\xec\x42\x59\x14\xad\x30\xf9\x7d\x10\xa4\xe4\xc6\xe7\x86\xb8\x30\x4e\x17\x9b\x9e" +
	"\x0a\x21\x03\x0f\x45\x4e\x41\xe7\x8d\xb7\xdb\x40\x3e\xbf\x0f\xb3\xc5\x33\xb9\xeb\x9b\xdb\x2f\x36\xf0\x24\x99\x3f" +
	"\x1d\x2a\xe2\x06\xe0\x06\x3d\x6c\x34\x2c\xc1\xd0\x76\xd8\xfd\xec\x30\xd9\xad\x9d\x35\x64\x38\x94\xd3\xbd\x24\xb3" +
	"\x23\x79\x56\x1e\x75\xdf\x8f\x93\xc7\xb8\x90\x2a\x61\x36\x5c\xfe\x6c\x7c\x7f\x3c\x5f\x44\xff\xc6\x2f\x1e\x0d\x8c" +
	"\xc6\x55\x45\xfc\xd3\xff\x04\x00\x00\xff\xff\x6c\x31\x81\x32\xfa\x03\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 1018,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"admin/index.html": bindataAdminIndexhtml,
	"aes-host.js":      bindataAeshostjs,
	"index.html":       bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"admin": {Func: nil, Children: map[string]*bintree{
		"index.html": {Func: bindataAdminIndexhtml, Children: map[string]*bintree{}},
	}},
	"aes-host.js": {Func: bindataAeshostjs, Children: map[string]*bintree{}},
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
