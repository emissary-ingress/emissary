// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xe1\x6e\xe3\xb8\x11\xfe\x2d\x3f\xc5\xac\x8a\x43\x9c\x5e\x2c\x65" +
	"\x17\x57\xe0\xa0\x48\x06\x82\xad\xdb\x3b\xc0\x8b\x0b\x9c\xa4\xbd\x43\x71\x38\x50\xd2\xc8\xe2\x85\x22\x65\x92\x72" +
	"\xe2\x7a\xfd\xee\x05\x49\xc9\x96\x1d\x3b\xc9\x6e\x5b\xa0\x40\x17\x8b\x58\x22\x67\xbe\x19\xce\x7c\x33\x43\x3b\x7e" +
	"\xf7\xe7\x9f\x3e\xde\xfd\x72\x33\x81\x52\x57\x6c\x3c\x88\xcd\x07\x30\xc2\xe7\x89\x8f\xdc\x1f\x0f\xbc\xb8\x44\x92" +
	"\x8f\x07\x9e\x17\x57\xa8\x09\x64\x25\x91\x0a\x75\xe2\x37\xba\x18\x7d\xef\xdb\x0d\x4d\x35\xc3\xf1\x75\x95\x12\xa5" +
	"\x48\x2e\x24\x4c\xf2\x39\xc2\xad\x26\xd9\x03\x8c\xa0\xa0\x52\x69\x48\x85\xd0\x71\xe8\x24\x8d\x8e\xca\x24\xad\x35" +
	"\x28\x99\x25\x7e\xa9\x75\xad\xa2\x30\xcc\x72\x1e\xfc\xae\x72\x64\x74\x29\x03\x8e\x3a\xe4\x75\x15\x2e\x1b\x0c\x73" +
	"\xaa\xb4\x79\x08\x7e\x57\xfe\x38\x0e\x9d\xae\x83\xd1\x2b\x07\xe8\x15\x14\x59\xae\x50\x43\xff\xdf\x1a\x72\xaa\x6a" +
	"\x46\x56\x11\x68\x92\x32\xbc\x82\xcd\x9e\xec\x18\x18\x49\x91\x1d\x95\x1d\x49\xf1\x78\x4a\x7e\x0c\x7f\x7c\x2e\x9f" +
	"\x21\x63\x46\xc1\x68\x98\xed\x54\x3c\x8d\x14\xfd\x27\xe5\xf3\x08\x52\x21\x73\x94\xa3\x54\x3c\x9d\x82\xa4\xbc\x6e" +
	"\xf4\x3f\xf4\xaa\xc6\xc4\xd7\xf8\xa4\xfd\x5f\x61\x0d\x15\xe5\xa3\x47\x9a\xeb\x32\x82\xef\x2e\xb1\x7a\x8b\x6e\x23" +
	"\x99\xff\x2b\x9c\xd4\x35\xd0\x44\x22\x81\x35\x14\x82\xeb\x51\x41\x2a\xca\x56\x11\x54\x82\x0b\x55\x93\xac\x0b\xd1" +
	"\x1f\x48\x5d\xc3\xda\x3c\x79\x15\x79\xea\x80\xbe\xa7\xfc\xaa\x5d\x93\x73\xca\x23\x20\x8d\x16\x76\xc5\x2a\xd5\x12" +
	"\x5b\x9d\x94\x64\x0f\x73\x29\x1a\x9e\x47\x90\x32\x92\x3d\x38\xb5\x4c\x30\x21\x23\x78\x2c\xa9\x46\xb7\xd2\x02\x67" +
	"\x84\x65\xc3\xf7\x97\x97\xdf\xc0\x08\xbe\xc3\xea\xfc\x9b\x7d\x33\x97\xf0\x01\x2b\xb7\x54\x93\x3c\xb7\x21\xbd\x0c" +
	"\xfe\xd4\xad\xb9\xe8\x46\xa0\x04\xa3\x39\xbc\xaf\x9f\x60\x2e\x11\xf9\xd6\xb1\x38\xec\x78\x12\x87\x2d\x9d\xe3\x54" +
	"\xe4\x2b\x4b\xa1\x9c\x2e\x81\xe6\x89\x4f\xea\xda\xd2\xd9\x8b\x0b\x21\x2b\x58\x8e\x04\x8f\x54\x93\x56\x54\x07\xb5" +
	"\xc4\x25\x72\x9d\xf8\x82\xdf\xda\x15\x27\xe8\xc5\x5d\x26\xdc\xab\x17\x33\x9c\x23\xcf\xc7\x3f\x72\xaa\x29\x61\x70" +
	"\x37\xbd\x05\x85\xba\xa9\xe3\xb0\xdd\xe9\xe4\x4c\xda\xda\x17\x2f\x56\x35\xe1\xe3\x1f\x84\xd2\x9c\x54\x08\x5a\x80" +
	"\xc4\x45\x83\x4a\x03\x81\x0c\xa5\xa6\x05\xcd\x88\x46\x28\x84\x8c\xe2\xd0\x0a\x77\x9a\x39\x5d\x76\xcf\x5e\x6c\x59" +
	"\x00\x3d\x06\x81\xc1\x4b\xfc\xb2\x45\xf6\x61\x39\xaa\x44\x8e\x2c\x5a\x12\xd6\xf4\x37\x3a\x08\xcf\x1e\xda\xe2\x98" +
	"\xb3\x76\x2e\x7d\x2c\x09\x9f\xa3\x0f\xe1\xce\x56\x0d\xcb\x11\x2d\x12\xff\x5d\xb9\x27\x93\xfb\xe3\xbf\xa3\x25\xc5" +
	"\xa8\xa0\x8c\x61\x0e\xba\xa4\x0a\x0a\x29\x2a\xd0\x25\xc2\xfd\x6c\xba\xb5\xb5\x12\x0d\x34\xca\x88\x08\x20\x59\x86" +
	"\x4a\x39\xe1\x47\x4c\xa1\x26\x73\x0c\x00\xfe\x82\xc8\xa0\x90\x68\x83\x92\x59\x0b\x40\xf5\x05\xe8\x52\x34\xf3\x32" +
	"\x88\xc3\x7a\x1b\x89\x70\x17\x8a\x38\xec\x87\xf7\x58\xac\xaf\x3f\x7e\x9a\x40\x2d\xc5\x92\x1a\xda\x1c\xc4\xb4\x1f" +
	"\x46\x53\x4c\x6d\x14\x3b\xf1\x67\x51\xdc\x6e\x0c\x8e\x06\xf1\xa6\xdd\x3e\x0c\xe2\x8b\x5e\xf6\x7d\xc8\x4a\xcc\x1e" +
	"\x52\xf1\xd4\x39\xa2\x85\xfa\x8d\x18\x7e\x3f\xf3\x44\x0b\x75\xdd\x6d\xa4\x94\xe7\x51\x4e\x95\xe9\x4c\xb9\xdd\x9a" +
	"\xe1\x02\x3e\x7f\x06\x2d\x54\xe7\x12\xbc\x4b\x92\x6d\x18\xda\xbd\x89\x34\xcb\xc0\x1b\xc6\x7a\x09\xb7\x45\xe2\x32" +
	"\xee\x90\xfc\x1e\x15\xc6\x53\x41\x4c\x49\x82\xaa\x29\xe7\x28\x61\x2e\x50\x41\x89\x12\x4f\x24\xa8\x83\x43\xa6\xb0" +
	"\xc3\x9c\x48\xb9\x87\x19\x2f\xc6\xeb\xf5\x9e\xb3\x9b\x4d\x1c\x2e\xc6\x90\x1b\x70\x2e\x34\x90\xba\x46\x22\x5d\xb9" +
	"\x14\x68\x1f\x96\xc4\xd4\xff\x7e\x76\x61\x8b\x64\x8e\xe6\x40\x02\x88\xd3\x46\x6b\xc1\x5d\x95\x67\x8c\x66\x0f\x47" +
	"\x72\x35\x9e\xa1\x96\xab\x38\x74\xb2\xe3\x37\x9c\xa6\x7f\x82\x1f\xa1\x24\x4b\x04\x9b\x2a\x4b\x72\xf3\xbf\x44\xb8" +
	"\x43\x59\x29\x10\x05\xdc\xa2\x5c\xd2\x0c\x81\x68\x88\x49\x97\xb2\x52\xa2\x0b\xc8\xfd\x6c\xea\xb7\x8e\xdf\xcf\xa6" +
	"\xd6\x71\x32\xfe\x7a\xca\x4f\x2a\x42\xd9\x4b\x54\x47\x23\xd0\x71\xac\x7d\x39\xe0\x97\x5b\x3d\x46\xf3\xa6\xce\x89" +
	"\xc6\x5f\xae\x3f\x4d\x4f\x10\x3c\x0e\x77\xad\xd2\x2d\xd4\x12\xcd\xf1\x56\xa4\x62\xf6\x70\xe6\x7d\xf0\xcc\x2b\xd7" +
	"\x80\x7d\x68\x3d\xb8\xae\x6b\xb6\xea\x4c\xc4\xa1\x69\xd4\xee\xd1\x84\x62\xbd\x06\xd1\x68\xa3\x6b\xf0\xda\xe0\xec" +
	"\x1e\x76\xb7\x06\x6f\x49\xa4\xa1\x0f\x24\xc0\xf1\x11\xfe\xd6\xe0\xd0\x4d\x2d\x64\x11\x9c\x99\xc9\x77\x76\x61\xdf" +
	"\x73\xa2\x49\xd4\x4e\x34\xaf\xeb\x74\x11\x3c\x52\x9e\x8b\xc7\x80\x89\x8c\x68\x2a\x78\xd0\xed\x38\x25\x6f\x47\xbd" +
	"\xed\xcd\x86\x64\x15\x8e\x94\x26\x73\xca\xe7\xa3\xe5\xe5\x87\x80\xd4\x34\x60\xa8\x15\xf2\x4c\xae\x6a\x1d\x08\x39" +
	"\x0f\x73\x2a\x31\xd3\x42\xae\xfc\x0b\x08\xc3\x03\xe5\x37\x28\x39\xeb\x5d\x13\x88\xa0\x20\x4c\x75\x3e\xd9\xd4\x45" +
	"\xe0\xfb\x17\x83\xfd\xd3\xb4\x7d\x7b\x2b\xbd\x05\x99\xe1\x22\xb2\x6d\x60\x87\x3b\x91\xf2\x70\xe9\x66\x77\xd6\x9e" +
	"\x03\xf7\xb3\x69\x27\xe8\xd6\x4c\x96\x0f\x01\xcd\x5a\xdf\x23\x97\xbb\x1e\x90\xfd\xbb\xb9\x68\x2f\x0e\x55\xdd\x68" +
	"\xe3\xe7\xba\x5d\x49\xb1\x10\x12\x3f\x89\x86\xeb\x08\x8a\x86\x67\x26\x15\xc3\xf3\x2e\x5b\x66\x94\x04\x87\x15\x3d" +
	"\x34\xe6\xcf\xaf\xfa\xc0\x15\xea\x52\xe4\x6a\x9b\xe5\xc3\xa9\xd7\xc3\xb6\x77\x80\xad\x01\x67\xe1\x20\x8c\x90\x80" +
	"\x96\x4d\x7b\xb5\x69\x45\x76\xb5\x31\x6c\x4d\x77\xb6\xbd\x43\xff\x4e\x1b\x63\xa8\xa1\x91\xac\x65\xec\xfd\x6c\x3a" +
	"\x3c\xd3\x42\x8d\x1a\xc9\xce\x2e\x0e\xf9\xd8\x59\xf1\x1a\xc9\x02\x85\x44\x66\xe5\x0d\x91\xa4\x52\x81\x42\x3d\x3c" +
	"\xcb\x48\xab\x66\xbd\xeb\xc8\x7a\x7e\x35\xe8\x99\xda\x0e\x85\x64\x5f\xea\xca\x10\x33\x23\xb5\x6e\xa4\xbd\x8f\xd8" +
	"\x86\x96\x31\xa1\x1a\x89\x0a\x52\x64\xe2\xb1\x0f\x23\x71\xd1\x7a\xfc\xf3\xa7\xe9\x0f\x5a\xd7\x33\x77\xb1\xd9\x06" +
	"\xc2\x93\xb8\x08\x44\x8d\x7c\xe8\xff\x75\x72\xe7\x5f\x98\x33\x06\x5a\xdc\x6a\x49\xf9\x7c\x78\xbe\x2f\xc6\x99\x20" +
	"\x26\xc2\xc3\x73\x48\xc6\xdb\xc8\x78\xb4\x80\xa1\xd9\x57\x9a\xe8\x46\x41\x92\xc0\x87\xcb\xcb\x5d\xe4\xda\x2c\xb4" +
	"\x6d\x34\x31\x3e\x05\x12\x55\x2d\xb8\xda\xe6\x69\x27\x63\x66\x84\x9b\x7e\xdb\xbd\x0d\x98\xce\x7e\x12\x6f\x4f\xf6" +
	"\x00\xe7\xa8\xad\xcd\xe0\x40\xf6\x66\x17\xec\x6d\x9c\x0f\x65\x66\x2e\x92\x3d\x5b\x9b\xfd\xd8\xa0\x94\x42\x3e\x0f" +
	"\xce\x0b\xbe\xee\xbb\xea\xff\x5c\xb1\x5e\x86\xc0\xe2\xf9\xcf\x84\xff\x4d\x5f\x4d\xae\xfa\x62\xed\x4d\xe3\xfc\xb9" +
	"\xc3\x33\x5c\x04\x24\x15\xb2\xc7\x95\xcd\xe0\x98\x1d\x89\x8b\xab\x83\x0d\xdb\xff\x20\x71\x2d\xad\x1f\x26\x85\x3c" +
	"\xdf\xe1\xbd\x56\x9d\x12\x0b\x89\xaa\xbc\xb5\xbc\x3a\xd6\x63\x8e\x55\xa5\x63\xe1\x17\x17\xa5\xe9\x23\x5d\x49\x76" +
	"\x3d\x65\xbf\x24\xff\x87\x6a\xa9\x9d\xb2\xaf\xf0\x7b\xf3\xdc\x20\xf2\x23\x36\xc3\x10\x24\x66\x8d\x54\x78\x61\xaf" +
	"\xf9\x82\x6b\xca\x1b\xc2\xd8\x0a\xda\x0c\xd8\x2e\xd3\x1a\x75\x9e\xed\xb1\x65\x2f\x4f\x3d\xba\x9c\xcc\xfc\xae\xfd" +
	"\xba\x6f\x73\x5f\xd4\x76\xcd\xd8\xfa\xaa\xf4\x9a\x94\x1e\x49\xf1\x4b\x6a\x66\xf2\xff\x46\x1a\x5d\x0a\x49\xf5\xea" +
	"\x48\xcb\x7e\x55\xd9\xce\xfd\x4e\xd1\xbe\x7c\x3d\xab\x6e\x7e\xba\xfd\x0f\xd2\xea\xfd\x69\x5a\xb9\x6b\x9e\xf9\x46" +
	"\x61\xea\x32\x08\x02\xff\xa0\xc1\x9e\xc8\xf8\x89\x56\xdd\xe2\x7e\x9b\x80\x3f\xb1\x5d\x92\xf4\xe1\x23\xf0\xbf\xfd" +
	"\x12\x1e\xbf\xd4\x68\x5f\xb7\x74\xd0\x66\x27\x7b\x5d\xf6\x75\xc6\xee\xba\xd5\x5b\xfb\xd1\xff\x2f\x5d\xff\xcb\x4d" +
	"\xd0\x7e\x71\x79\xd3\x88\x6f\x2f\xbf\xaf\xce\xc4\x4e\xee\xc4\x50\x6c\xb7\x5f\x9c\x8a\x3b\x53\xbd\xb1\x78\x8a\x4d" +
	"\xee\x63\x63\x57\x7b\x3f\xaa\xc6\xa1\xfb\x69\x2c\x0e\xdd\x4f\xc2\xff\x0a\x00\x00\xff\xff\x5e\x54\xd9\x3f\x23\x16" +
	"\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 5667,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"index.html": bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
