// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/admin/index.html
// bindata/aes-host.js
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAdminIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xd1\x6e\xe3\xb6\x12\x7d\xbe\xf9\x8a\x59\x2e\x16\xb0\x71\x6d\xc9" +
	"\xb9\xb8\x05\x0c\x45\x32\xba\x4d\x53\x74\x8b\x6d\x37\x40\xb2\x0f\x7d\x2a\x68\x71\x24\xb1\x96\x48\x95\xa4\x9c\xb8" +
	"\x41\xfe\xbd\xa0\x24\xcb\xa2\x64\xaf\xbd\x6d\x93\x07\x4b\xe4\xcc\xe1\xf0\xf0\xcc\x90\x54\xf8\xe6\xfb\x4f\xb7\x8f" +
	"\xbf\xde\xdf\x41\x66\x8a\x7c\x75\x15\xda\x1f\xc8\xa9\x48\x23\x82\x82\xac\xae\x00\xc2\x0c\x29\xb3\x0f\x00\x61\x81" +
	"\x86\x42\x9c\x51\xa5\xd1\x44\xa4\x32\xc9\x7c\x49\xda\x2e\xc3\x4d\x8e\xab\xf7\xc5\x9a\x6a\x4d\x99\x54\x70\xc7\x52" +
	"\x84\x07\x43\xe3\x0d\xcc\xe1\x3d\x2b\xb8\x08\xfd\xc6\xa8\x71\xd0\x66\xb7\x7f\x06\x58\x4b\xb6\x83\x97\xab\xff\x00" +
	"\x14\xf4\x79\xfe\xc4\x99\xc9\x02\x58\x72\x71\xd3\x34\xa9\x94\x8b\x00\x68\x65\xe4\x4d\xeb\xf0\xda\x80\xf8\x1d\x4a" +
	"\xe8\xef\xe3\x0c\x2d\x58\x3b\x08\xe3\xdb\xfd\x10\xf6\x19\x38\x8b\x88\xe6\xa9\xa8\x4a\xb2\xba\xcd\x79\xbc\x81\x0c" +
	"\x15\x82\x91\x60\x5b\xa1\x2a\x21\x91\x0a\x28\xc4\xb2\x28\x2a\xc1\xcd\x0e\x72\x1e\xa3\xd0\xe8\x85\x7e\x1f\xcb\x09" +
	"\x1e\xe0\x6d\x83\x09\x2f\x5d\x8b\xfd\x2b\x29\x63\x5c\xa4\x01\xfc\x6f\x51\x3e\xdf\x38\x5d\x6b\xa9\x18\xaa\x00\xae" +
	"\xcb\x67\xd0\x32\xe7\x0c\xde\x2e\x97\xcb\x83\xcd\xeb\xd5\x10\x7b\x5e\x48\x46\xf3\xc1\x08\x8c\xeb\x32\xa7\xbb\x00" +
	"\x84\x14\xe8\x8e\x50\x4a\xcd\x0d\x97\x22\x80\x84\x3f\x23\x73\x3b\xff\x9c\x73\xc1\xf0\x39\x80\x6b\xb7\x3d\xc7\xc4" +
	"\x04\x0b\xb7\xcd\xc8\x72\xd8\xd4\xac\xcf\xf5\x62\xf1\xce\x6d\xcf\x90\xa7\x99\x39\xd2\x21\xb7\xa8\x92\x5c\x3e\x05" +
	"\xfd\x25\x6c\x99\xa0\xf1\x26\x55\xb2\x12\x6c\x1e\xcb\x5c\xaa\x00\x54\xba\x9e\x2c\x66\x8b\xd9\x62\x7a\x81\x25\x6d" +
	"\x4c\x67\x0b\xef\xff\xd3\x2f\xd2\x17\x4b\x61\x50\x98\x59\xd7\x90\x70\xc1\x75\x86\xec\x72\x4a\xc7\x01\xbc\x4d\xd0" +
	"\xfe\xbb\x66\x7b\xb9\x5e\x7f\xf3\x0e\xc6\xf3\xfd\x07\xa2\x38\x50\x0f\xcb\x3e\xc3\x47\x66\x8b\x4a\x49\x35\x98\xd9" +
	"\x21\xe6\xc5\x62\xb1\x38\xea\xee\x71\xb1\xa5\x76\xe0\x97\xf3\x13\x1f\x82\x34\xbf\xbd\x8c\x84\x71\xd2\x35\x22\x26" +
	"\x87\xc4\x19\xf6\xb7\xab\xd4\xb3\x00\x08\x13\xa9\x8a\x95\x2d\x04\x36\xf1\x4a\x2a\x56\x77\x05\xe5\x79\x10\xfa\xf5" +
	"\x0b\x84\x5c\x94\x95\xe9\xa3\xa0\xed\x27\x60\x76\x25\x46\xc4\xe0\xb3\x21\x20\x68\x81\x11\x69\x3b\xb6\x34\xaf\x30" +
	"\x22\xc4\x77\x50\x6f\xa5\x48\xb8\x2a\xce\xe1\xda\x18\xad\xdd\x49\xfc\x83\x41\x6f\x9c\x3e\x9d\x63\xe0\x98\x8a\x18" +
	"\xbb\x88\xd7\x95\x31\x52\x74\xee\xb7\x6d\xa7\xbf\x1a\x3b\xa6\xf2\x84\xd3\x43\x53\xe4\xc0\x19\x3a\xf4\x1b\x2a\x7b" +
	"\x2d\x03\xfe\x6b\xdd\x90\x95\x53\xec\xac\x9f\xfb\x3a\x70\xda\x67\x92\xbb\x6a\x96\xc4\x63\x56\xf3\x9a\xb0\x55\xcb" +
	"\x72\xdf\xa3\x99\xc2\x51\x1f\xab\x0b\x2e\x2a\x24\x76\x95\xea\xa7\xd0\x6f\xcc\x4f\x47\xe9\x14\x6c\xb7\x7a\xc7\x8a" +
	"\x97\xe6\x60\xba\xa5\x0a\xda\x0a\x1e\x01\x93\x71\x55\xa0\x30\x5e\x8a\xe6\x2e\x47\xfb\xf8\xdd\xee\x03\x9b\xec\xf7" +
	"\x8d\xa9\xe3\xd6\x54\xe5\xb3\x5e\xad\xf0\x5d\xdf\x5a\x2d\x17\xf8\x36\xaa\x75\x7d\x5b\x8d\x5d\xea\xdd\x69\x72\x80" +
	"\x52\x4b\xeb\x02\x90\x56\xa0\xae\x77\x2a\x2f\xf0\x4c\xe5\x70\xd6\x75\x69\xba\x20\xee\x5a\x8a\xa3\x59\xdb\xf2\x70" +
	"\x49\xc0\x6d\x21\x71\xfd\xbb\x9a\x7f\x1e\xa0\x13\xf5\x71\x84\xdf\xac\x8a\xbf\x02\xa6\x51\xfd\x78\x36\x5f\x03\xd1" +
	"\x25\xc1\xf4\x50\xb1\x15\x6a\xb4\x20\x49\x25\x62\xbb\xdd\x4f\xa6\x4e\xed\xae\x65\xe7\xd5\x25\xd9\x6b\x77\xb6\x88" +
	"\xd8\x9d\x8d\xf4\xb7\x95\x96\xac\xb3\x76\xb5\x94\xbc\x7d\x55\x1b\x20\x58\x79\x1d\xed\xdb\xc7\x7f\x14\xfe\x88\x5d" +
	"\x4d\xad\xc7\x85\x40\xf5\xe3\xe3\xcf\x1f\xc7\x23\x9d\x0b\xb4\xb7\xa1\x35\xba\xf5\xa4\x88\xeb\xc3\x5e\xd4\xf0\x75" +
	"\xe5\x80\x0d\x3b\xbb\xde\x86\xff\x5e\xff\xd7\x90\xbc\xce\x65\xbc\xb9\x84\xe5\xb1\x61\x43\x73\x22\xe3\x4a\x4f\xdc" +
	"\x43\x4d\xf7\x9c\xca\xf3\x61\xf1\x04\x26\xbd\x15\x83\x28\x02\x42\xa6\x83\xad\xbd\x31\x88\x73\xaa\xf5\x47\xae\x8d" +
	"\x47\x19\x9b\x90\xf6\x14\x40\x06\x07\xb0\x3a\x23\xfb\x0b\x53\xe6\x48\x35\x82\xae\xca\x32\xdf\x01\x15\x0d\x5a\x7f" +
	"\x4d\x5f\x01\x73\x8d\xa3\x50\xde\x44\xae\x62\xce\x45\xa5\xb0\x90\x5b\x3c\x19\xd8\x1e\xeb\x6f\x4e\xa3\x1e\x4d\x03" +
	"\x93\x20\xa4\x81\x82\x9a\x38\x3b\x32\x87\x7f\x39\xc2\x33\x0e\xa3\x20\xc9\xcd\xd5\x10\xf1\xa2\x9c\x3d\x9d\x7f\x63" +
	"\xe1\x5d\x94\x5d\xf0\xa5\x54\xbd\x97\xda\x70\x91\x7a\x9e\x47\xdc\x70\x13\x34\x71\x36\x21\x99\x31\xa5\x0e\x7c\xbf" +
	"\x40\xa3\xb8\x91\xc2\x63\xd4\xd0\x27\xae\xd0\xe3\xd2\x6f\x37\xd8\xd9\x80\x6a\x80\x02\x4d\x26\x59\x00\xe4\xfe\xd3" +
	"\xc3\x23\x99\x0d\x7a\xed\xbd\x0f\x95\x0e\x86\x5e\x00\xa4\x25\x69\x6e\x8f\x48\x24\x00\x42\xcb\x32\xe7\x31\xb5\xc9" +
	"\xe2\xff\xae\xa5\xb8\xe9\x2e\xb3\x9f\x1f\x7f\x98\x2f\xc9\x00\xe1\x75\x38\x94\xbd\x59\x06\xf0\xd3\xc3\xa7\x5f\x3c" +
	"\x6d\x14\x17\x29\x4f\x76\x93\xf1\xb8\xb5\x38\x82\x7e\xb9\x1c\x02\x75\x8a\x08\xdc\x44\x18\x06\x30\xbd\xfa\xc2\x2b" +
	"\x80\x67\x32\x14\x13\xcb\x61\xb4\x7a\x51\x68\x2a\x25\xc0\xbe\x79\x76\x72\x93\xe9\x09\x7b\x85\x3a\x5a\x8d\xa3\x8e" +
	"\xa5\xd0\x32\x47\x2f\x97\xa9\x35\x19\x08\x12\x4e\xa8\xe3\x98\x8a\xa0\xad\x3e\x64\xcb\x19\x01\x2e\x6c\x61\x1d\xa6" +
	"\x78\xf3\x77\x52\x48\xb7\x52\xa4\x8a\x9a\x2a\xaf\x17\x4b\xcf\xa0\xad\x35\xb9\x94\x9b\xe6\x8e\xde\x56\x1b\x7b\x77" +
	"\x27\xf0\xdf\x3e\xd9\xa3\x71\x8e\x66\xf0\x99\x00\x1e\xa4\x52\xbb\x19\x98\xfa\xfb\xc0\x13\xd5\x40\xa1\x54\x72\x9d" +
	"\x63\x61\x7f\x63\xd4\x9a\x8b\x14\x76\xb2\x52\xa0\xf0\x8f\x0a\xb5\xf1\xe0\xbe\x89\xd1\xd2\x44\x63\x53\xd7\x45\xa9" +
	"\xcc\xb7\x3d\x8d\x03\x15\x6c\x5f\x2f\x4d\xc6\x75\x10\xae\xd5\xca\x86\xbf\x36\x92\x4e\x06\xc2\xb2\xac\x0d\x57\xf0" +
	"\x70\xd3\x3a\x2d\x8a\xd8\x56\xb0\x49\x5d\x41\xa2\x55\x7f\x55\xeb\x26\x07\xf2\xf5\xd8\x05\xae\x77\x3a\xee\x9d\x9b" +
	"\xeb\x6f\x29\x0f\xa6\x5a\xd7\xf4\xd7\x1f\x74\xe0\xf3\x07\x0f\x1e\x33\xae\xa1\xb0\x17\xff\xba\x7c\xa2\x60\x50\x95" +
	"\xfb\xcf\x3a\x68\x49\x2a\xaa\x38\x83\x42\x2a\x04\x93\x51\x01\x39\x17\x1b\x0d\x5c\x18\x69\xd9\xb5\xc7\x1f\x6d\x21" +
	"\x5b\x97\x4d\xb5\xc6\x58\x8a\xfe\xf7\x96\xee\x31\xf4\x9b\x4f\x3b\xa1\xdf\x7c\xad\xfa\x2b\x00\x00\xff\xff\xeb\xc9" +
	"\xf0\xe6\xbe\x12\x00\x00")

func bindataAdminIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAdminIndexhtml,
		"admin/index.html",
	)
}



func bindataAdminIndexhtml() (*asset, error) {
	bytes, err := bindataAdminIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "admin/index.html",
		size: 4798,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAeshostjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5b\x6f\xe3\x36\x16\x7e\x96\x7e\xc5\xa9\x5e\x62\xa3\x8e\x94\x16" +
	"\xe8\x8b\x6f\xc0\xa0\x9b\xdd\x16\xc8\xa0\x81\x33\xb3\xdb\x05\x16\x68\x69\xe9\xd8\xe2\x96\x22\x65\xf2\xd0\x19\x23" +
	"\xf5\x7f\x5f\x90\x94\x2c\xf9\x36\x49\x17\xb3\xd8\x87\x02\x01\x22\x92\x87\xdf\xf9\xce\x85\x1f\x69\x5e\xd5\x4a\x13" +
	"\xfc\xdd\x22\xac\xb4\xaa\xe0\xa6\x24\xaa\xcd\x38\xcb\xf2\x42\xa6\xff\x36\x05\x0a\xbe\xd5\xa9\x44\xca\x64\x5d\x65" +
	"\x5b\x8b\x59\xc1\x0d\xb9\x8f\x14\x4d\x95\x2e\xb5\x7a\x36\xa8\xd3\x8a\x3b\xeb\x9b\x49\x1c\xe3\x27\x0f\x58\xe0\x8a" +
	"\x59\xe1\x81\x53\xfc\x44\x28\x8b\xc1\x4b\x1c\x11\x56\xb5\x60\x84\x63\xf8\x75\x5a\xf0\xed\x3c\x9e\xae\x94\xae\x60" +
	"\x7b\xab\xe4\xd8\xd8\x65\xc5\x29\xad\x35\x6e\x51\xd2\x2c\x51\xf2\xc9\xcf\x24\xf3\x38\x8a\xa6\x2b\x8e\xa2\x30\x48" +
	"\x6e\x10\x4d\x05\xae\x51\x16\xf3\x1f\x25\x27\xce\x04\x7c\x78\x78\x02\x83\x64\xeb\x69\xd6\xac\x04\x2b\xb6\x44\xe1" +
	"\x3f\xa3\xa9\xa9\x99\x9c\xff\xa0\x0c\x49\x56\x21\x90\x02\x8d\x1b\x8b\x86\x80\x41\x8e\x9a\xf8\x8a\xe7\x8c\x10\x56" +
	"\x4a\x8f\xa7\x99\x37\x0e\xfb\x3c\xcb\xc8\x7f\x72\x59\x5b\x02\xda\xd5\x38\x4b\x08\x3f\x51\x02\x0e\x6b\x96\x94\x0d" +
	"\x6a\x02\xdb\xdb\x4a\x15\x28\xc6\x5b\x26\x6c\x7f\x21\x00\x44\x3e\x4c\x8f\xe2\xa2\x6b\xc9\x7c\x5f\x32\xb9\xc6\x04" +
	"\xb2\xd6\x4f\x0d\xdb\x5b\xbe\x9a\x25\x5f\x95\x47\x16\x45\x32\xff\x07\x02\xb3\xa4\x6e\x57\x5c\x08\x2c\x80\x4a\x6e" +
	"\x42\xd5\xa8\x44\xf8\xb8\x78\x68\xfc\xec\x94\x05\x6b\x9c\x81\x02\x96\xe7\x68\x4c\x30\x7d\xc6\x25\xd4\x6c\x8d\x29" +
	"\xc0\x5f\x11\x05\xac\x34\xfa\x54\xe4\x1e\x1f\x38\x8d\x80\x4a\x65\xd7\x65\x3a\xcd\xea\x26\xfe\xac\x4d\xc0\x34\xeb" +
	"\xd2\x79\x9e\xd9\x77\xdf\xbf\xbf\x87\x5a\xab\x2d\x2f\xf0\x24\x83\xfd\xb4\x59\x2d\xda\xac\xb5\xc6\x67\x59\x3b\x2c" +
	"\xc4\x17\x92\xf6\xd8\x2c\x1e\x27\xed\x2a\xb7\xbe\xef\xbc\xc4\xfc\xb7\xa5\xfa\xd4\x12\x20\x65\x7e\x61\x6b\x8d\xe7" +
	"\x75\x23\x65\xde\xb5\x0b\x4b\x2e\x8b\x71\xc1\x0d\x5b\x0a\x2c\xfc\xd2\x02\x37\xf0\xfb\xef\x40\xca\xb4\x64\xe0\xab" +
	"\xd9\xec\x10\x7c\xb3\x76\xaf\xdd\x34\x48\x2b\xc4\xa1\xb4\xae\x99\x9a\xda\x06\x9c\xe4\x50\xf2\xf9\x83\x62\x05\x97" +
	"\x6b\x30\x35\x97\x12\x35\xac\x15\x1a\x28\x51\xe3\x85\x52\xb4\x40\x28\x0c\xb6\x68\xf7\x5a\xf7\xd0\xa6\x9b\xf9\xcb" +
	"\xcb\x11\xc5\xfd\x7e\x9a\x6d\xe6\x50\x38\x58\xa9\x08\x58\x5d\x23\xd3\xe1\x20\xac\xd0\x7f\x6c\x99\xe0\x05\x1c\x57" +
	"\x12\x0e\x48\x2e\xa0\x00\x92\xc2\x74\x69\x89\x94\x0c\xe7\x36\x17\x3c\xff\xed\x42\x6d\xe6\x0b\x24\xbd\x9b\x66\xc1" +
	"\x76\xfe\x4a\x1c\x1d\xf7\x1f\xa1\x64\x5b\x04\x5f\x1a\xdf\xc2\xee\xaf\x44\xf8\x80\xba\x32\xa0\x56\xf0\x84\x7a\xcb" +
	"\x73\x04\x46\x30\x65\x6d\x89\x4a\x8d\x21\x11\x1f\x17\x0f\x49\x43\xf9\xe3\xe2\xc1\x53\x66\xf3\x3f\xde\xd0\xf7\x15" +
	"\xe3\xe2\x7a\x23\xa3\x5b\x6e\x3b\xa9\x19\x9c\x74\x51\x98\x3d\x6f\x62\x5b\x17\x8c\xf0\x9f\xef\xde\x3f\x5c\x68\xdf" +
	"\x69\xd6\x09\x9d\x1b\xd6\x1a\x5d\x30\x3b\x56\x09\x1f\x8a\x1b\xc7\x27\x5c\x82\x70\x26\xd0\xf8\x7d\x57\xd7\x62\x17" +
	"\xa0\xa7\x99\x93\x57\xf7\xe1\x82\x7e\x79\x01\x65\xc9\xed\x73\x48\x41\x7e\xfd\xbf\x5f\x47\x71\x54\x30\x62\x63\x58" +
	"\x59\x99\x13\x57\x72\x30\x84\x97\x38\x8a\x34\x92\xd5\xd2\x7f\x46\xad\x18\x8d\xe1\x99\xcb\x42\x3d\xa7\x42\xe5\xcc" +
	"\xd9\xa6\xed\xca\xc8\x99\x75\x9d\x93\xb4\x37\x09\xcb\x2b\xbc\x35\xc4\xd6\x5c\xae\x6f\xb7\x77\xdf\xa6\xac\xe6\xa9" +
	"\x40\x32\x28\x73\xbd\xab\x29\x55\x7a\x9d\x15\x5c\x63\x4e\x4a\xef\x92\x11\x64\xd9\xc9\xe6\x37\x6c\x72\xbe\xdb\x73" +
	"\x3b\x86\x15\x13\x26\xf0\xf1\x55\x18\x43\x92\x8c\xe2\x7e\x14\x8d\xa4\x1e\x2c\x9b\xed\x0b\xdc\x8c\xfd\x99\x6d\xf1" +
	"\xee\xb5\x3e\x9e\x78\xec\xe2\x3b\x38\xfd\xb8\x78\x68\x8d\xdc\x8c\x2b\xd6\x31\x90\x9b\xe9\x38\x84\x22\x1c\x00\x04" +
	"\x33\xf4\xd3\xd1\xd4\x7e\x12\x47\xfb\x51\x1c\xe5\xaa\xaa\x2d\x39\x96\x2f\x6e\xb8\xc4\x95\xd2\xf8\x5e\x59\x49\x67" +
	"\x95\x72\xfa\x9e\x9e\x1e\xc1\x81\x23\x30\x6c\xc0\x2a\xa4\x52\x15\x66\xec\xcd\x4f\x6f\x9f\x1e\x9e\xbf\x7d\x03\x68" +
	"\x40\x3d\x49\x19\xcc\x80\xb4\xc5\xc9\x61\xbd\xeb\xe7\x81\xf3\xe5\x9d\x45\xa7\x54\xae\x38\x10\x48\x60\xb5\x80\x19" +
	"\x48\x7c\x76\x37\xd8\xe0\x86\x94\xb9\xb5\x5a\xdc\x8c\x4e\xfb\xcc\x83\x47\x56\x8b\xd4\x20\xd3\x79\xf9\xc8\x34\xab" +
	"\x4c\x6a\x90\x06\x37\x39\x6b\xf6\x78\x46\x6d\x0f\x0e\x27\x71\xeb\xe4\xa0\xce\xb3\x63\x93\x89\x6b\xb6\x9c\xd5\x64" +
	"\xb5\xbf\xfc\xbd\xd2\xe4\x42\x19\xab\xd1\xc0\x12\x85\x7a\x3e\x60\x68\xdc\x34\x44\x7f\x7e\xff\xf0\x03\x51\xbd\x08" +
	"\x4f\x88\x10\x76\xa4\x71\x93\xaa\x1a\xe5\x20\xf9\xdb\xfd\x87\x64\xe4\xe2\x4a\x49\x3d\x91\xe6\x72\x3d\x18\xf6\x6c" +
	"\xa4\x50\xcc\xa5\x71\x30\x84\xd9\x3c\xe4\x21\xe2\x2b\x18\xb8\x45\x43\x8c\xac\x81\xd9\x0c\xbe\xbd\xbb\x6b\x92\xd4" +
	"\xe4\xb9\x11\xb4\x99\xe3\x91\x6a\x34\xb5\x92\x26\x94\xa1\x33\x70\x22\x1d\x2e\x9d\xb0\xb0\x07\xa7\xad\x97\x61\x3a" +
	"\xab\x93\xed\xe7\xf8\xfb\xb8\x6f\xf5\xd8\xe5\xf2\x90\xc6\x23\x83\x45\x48\x54\x8b\xbf\xef\x85\x8e\x5a\x2b\x7d\x12" +
	"\xfb\x35\x5a\xc7\xac\x92\x9f\x2b\xd1\x4b\x3a\x78\xa4\x64\xf2\x05\x98\xb9\xdc\xf7\x0d\x9a\x6b\x7b\x78\x42\x6f\x81" +
	"\x9b\x94\x2d\x95\x6e\xeb\xbd\x8f\xcf\x80\x35\x6e\x26\xfd\x59\xaf\x46\x30\x0b\x22\x73\xc8\x82\x71\x8f\xe1\xe1\x2b" +
	"\x07\xa8\x64\xb2\x10\xd8\xea\xc2\xe1\xf0\x18\xd2\x0d\x2f\xc7\xda\x90\x7f\x64\x78\x94\x4e\x46\x8e\x88\x37\x8a\xff" +
	"\x75\x68\xdc\xbf\x30\xc2\xc6\xf5\xe9\xb2\x21\x7d\x71\x3e\xf9\x97\xec\x67\xb9\x73\x03\xdd\x9e\x7d\xcb\x5a\xe3\x4a" +
	"\xa3\x29\x9f\x7c\x17\x9f\x89\xd4\xa5\xe3\x1e\x1a\xfe\x8f\x9d\xf6\x56\x91\xda\xf3\xde\x8e\x7b\xe7\xfd\xff\x7c\x56" +
	"\xfb\xd5\x1b\xf4\xcf\xd3\xb0\x77\xa0\xf6\x27\x6e\x50\x9e\x7a\xca\x32\xd0\x98\x5b\x6d\x70\xe4\xdf\xe9\x4a\x12\x97" +
	"\x96\x09\xb1\x83\x26\xd3\x5e\xaf\x9a\x62\x05\x3e\x69\x9a\xfa\xbd\x06\xe9\x03\xaf\x50\x59\x1a\xf4\x21\x03\xbf\xa3" +
	"\x3a\xb5\x0d\xb1\x1f\xc1\x37\x77\x77\x77\xd9\x77\x43\xaf\x8a\x69\x9a\xc2\xd2\x12\x08\x5e\x71\x0a\x2f\xb1\xef\x74" +
	"\x6d\x8e\x99\x77\xbd\xdc\xc8\x7e\xf8\xcd\xf6\x76\xb9\x77\x57\xe3\x17\xab\xfe\xd5\x3d\xee\x15\xf1\x0b\xb3\x54\x2a" +
	"\xcd\x69\x77\xe1\x9e\xf8\xfc\x4e\xff\x88\x68\x77\xf9\xc1\x7f\xd3\x6a\x8f\x3f\x3d\x7d\x91\x5e\xfb\xe6\x33\xbd\x16" +
	"\x5e\x7f\xee\x87\x84\xd3\x93\x34\x4d\x93\xe1\xe4\xd5\xba\x9f\x5f\x12\xc7\x98\xf7\x5e\xb4\x59\x1f\x79\x0c\xc9\xd7" +
	"\x6f\xe9\xeb\xab\x7a\xff\x06\x0f\xc7\x82\xef\x4d\x9a\x68\xae\xf6\x5f\x27\xa5\x6f\x12\x9f\x3f\x51\xf3\xfd\x6f\x74" +
	"\xce\xff\x2e\x79\xe5\xc5\xd0\x3c\x87\x3f\x73\xef\xb6\x16\x97\x2e\xde\x66\xed\xca\xcd\xdb\x61\xb7\x57\xef\x79\x53" +
	"\xec\x47\xf1\x7e\x38\x89\xff\x13\x00\x00\xff\xff\x54\x39\x07\x0b\xe9\x12\x00\x00")

func bindataAeshostjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataAeshostjs,
		"aes-host.js",
	)
}



func bindataAeshostjs() (*asset, error) {
	bytes, err := bindataAeshostjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "aes-host.js",
		size: 4841,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xdd\x6a\xdb\x4c\x10\xbd\x56\x9e\x62\x3e\x7d\x04\x27\xa5\x92\x9c" +
	"\x92\x42\x90\x65\x41\x68\x03\xbd\x6b\x21\xa5\x50\x4a\x2e\x46\xda\xb1\xb5\xcd\xfe\xb1\x3b\xf2\x4f\x4d\xde\xbd\x48" +
	"\x2b\x87\x84\xd6\x50\xdd\xec\x68\xe6\x9c\xa3\xd1\xd1\x51\xf5\xdf\xc7\xcf\x1f\xbe\x7e\xff\x72\x07\x1d\x6b\x55\x9f" +
	"\x55\xc3\x01\x0a\xcd\x7a\x99\x92\x49\xeb\xb3\xa4\xea\x08\x45\x7d\x96\x24\x95\x26\x46\x68\x3b\xf4\x81\x78\x99\xf6" +
	"\xbc\xca\x6e\xd2\x71\xc0\x92\x15\xd5\xb7\xba\xc1\x10\x50\x58\x0f\x77\x62\x4d\x70\xcf\xd8\x3e\x42\x06\x2b\xe9\x03" +
	"\x43\x63\x2d\x57\x45\x44\x0e\x9c\xc0\xfb\x58\x25\x2b\x49\x4a\x04\x62\x78\x79\x1d\x40\xc8\xe0\x14\xee\x4b\x60\x6c" +
	"\x14\x2d\xe0\xe9\x15\xb6\x06\x85\x0d\xa9\xbf\x62\x33\x6f\xb7\xa7\xf0\x35\xbc\xf9\x13\xdf\x92\x52\x03\x61\x60\x0c" +
	"\xe3\xc6\xee\xb2\x20\x7f\x49\xb3\x2e\xa1\xb1\x5e\x90\xcf\x1a\xbb\x3b\x25\x29\x8d\xeb\xf9\x07\xef\x1d\x2d\x53\xa6" +
	"\x1d\xa7\x0f\x70\x00\x2d\x4d\xb6\x95\x82\xbb\x12\xae\xe7\xa4\xff\x85\xdb\x7b\x95\x3e\xc0\x49\xee\x20\x8d\x9e\x10" +
	"\x0e\xb0\xb2\x86\xb3\x15\x6a\xa9\xf6\x25\x68\x6b\x6c\x70\xd8\x1e\x2d\xfa\x1f\x9d\x83\xc3\x50\x25\x1a\x77\x47\xa1" +
	"\x1b\x69\x16\x53\xcf\xaf\xa5\x29\x01\x7b\xb6\x63\x67\x24\x39\x4f\x13\xa7\xc1\xf6\x71\xed\x6d\x6f\x44\x09\x8d\xc2" +
	"\xf6\x31\xd2\x5a\xab\xac\x2f\x61\xdb\x49\xa6\xd8\x99\x84\x5b\x54\xed\xc5\xd5\x7c\x7e\x0e\x19\x5c\x93\xbe\x3c\x7f" +
	"\xfd\x98\x39\xbc\x23\x1d\x5b\x0e\x85\x18\x2d\x9d\xe7\xef\x8f\xbd\xe8\x6e\x09\xc1\x2a\x29\xe0\xca\xed\x60\xed\x89" +
	"\xcc\xf3\x62\x55\x71\xcc\x49\x55\x4c\x39\xac\x1a\x2b\xf6\x63\x84\x84\xdc\x80\x14\xcb\x14\x9d\x1b\x73\x98\x54\x48" +
	"\x21\xeb\x6c\xe0\xba\x2a\x9e\xcb\x51\x45\xc8\x4d\x4c\x5d\xeb\xa5\x63\x88\x86\x6b\x2b\x7a\x45\x91\x2a\xb5\xb3\x9e" +
	"\xe1\x5b\x4f\xb0\xf2\x56\xc3\xac\x63\x76\xa1\x2c\x8a\x56\x98\xfc\x67\x10\xa4\xe4\xc6\xe7\x86\xb8\x30\x4e\x17\x9b" +
	"\x9e\x0a\x21\x03\x0f\x45\x4e\x41\xe7\x8d\xb7\xdb\x40\x3e\xd7\x72\x40\xcf\x16\x2f\x24\x6f\xef\xee\x3f\xd9\xc0\x93" +
	"\x6c\xfe\xbc\x58\xc4\x0d\xc0\x0d\x7a\xd8\x68\x58\x82\xa1\xed\xb0\xc1\xc5\x61\xb2\x5c\x3b\x6b\xc8\x70\x28\xa7\x6f" +
	"\x93\xcc\x8e\xe4\x59\x79\xd4\x7d\x3b\x4e\x9e\xe2\x41\xaa\x84\xd9\x10\x80\xd9\x78\xff\x74\xb9\x88\x1e\x8e\x6f\x3d" +
	"\x9a\x18\xcd\xab\x8a\xf8\xb7\xff\x0e\x00\x00\xff\xff\xc5\x63\xff\x44\xfe\x03\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 1022,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"admin/index.html": bindataAdminIndexhtml,
	"aes-host.js":      bindataAeshostjs,
	"index.html":       bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"admin": {Func: nil, Children: map[string]*bintree{
		"index.html": {Func: bindataAdminIndexhtml, Children: map[string]*bintree{}},
	}},
	"aes-host.js": {Func: bindataAeshostjs, Children: map[string]*bintree{}},
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
