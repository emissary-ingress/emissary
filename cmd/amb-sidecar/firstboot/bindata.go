// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/admin/index.html
// bindata/aes-host.js
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAdminIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xd1\x6e\xe3\xb6\x12\x7d\xbe\xf9\x8a\x59\x2e\x16\xb0\x71\x6d\xc9" +
	"\xb9\xb8\x05\x0c\x45\x32\xba\x4d\x53\x74\x8b\x6d\x37\x40\xb2\x0f\x7d\x2a\x68\x71\x24\xb1\x96\x48\x95\xa4\x9c\xb8" +
	"\x41\xfe\xbd\xa0\x24\xcb\xa2\x64\xaf\xbd\x6d\x93\x07\x4b\xe4\xcc\xe1\xf0\xf0\xcc\x90\x54\xf8\xe6\xfb\x4f\xb7\x8f" +
	"\xbf\xde\xdf\x41\x66\x8a\x7c\x75\x15\xda\x1f\xc8\xa9\x48\x23\x82\x82\xac\xae\x00\xc2\x0c\x29\xb3\x0f\x00\x61\x81" +
	"\x86\x42\x9c\x51\xa5\xd1\x44\xa4\x32\xc9\x7c\x49\xda\x2e\xc3\x4d\x8e\xab\xf7\xc5\x9a\x6a\x4d\x99\x54\x70\xc7\x52" +
	"\x84\x07\x43\xe3\x0d\xcc\xe1\x3d\x2b\xb8\x08\xfd\xc6\xa8\x71\xd0\x66\xb7\x7f\x06\x58\x4b\xb6\x83\x97\xab\xff\x00" +
	"\x14\xf4\x79\xfe\xc4\x99\xc9\x02\x58\x72\x71\xd3\x34\xa9\x94\x8b\x00\x68\x65\xe4\x4d\xeb\xf0\xda\x80\xf8\x1d\x4a" +
	"\xe8\xef\xe3\x0c\x2d\x58\x3b\x08\xe3\xdb\xfd\x10\xf6\x19\x38\x8b\x88\xe6\xa9\xa8\x4a\xb2\xba\xcd\x79\xbc\x81\x0c" +
	"\x15\x82\x91\x60\x5b\xa1\x2a\x21\x91\x0a\x28\xc4\xb2\x28\x2a\xc1\xcd\x0e\x72\x1e\xa3\xd0\xe8\x85\x7e\x1f\xcb\x09" +
	"\x1e\xe0\x6d\x83\x09\x2f\x5d\x8b\xfd\x2b\x29\x63\x5c\xa4\x01\xfc\x6f\x51\x3e\xdf\x38\x5d\x6b\xa9\x18\xaa\x00\xae" +
	"\xcb\x67\xd0\x32\xe7\x0c\xde\x2e\x97\xcb\x83\xcd\xeb\xd5\x10\x7b\x5e\x48\x46\xf3\xc1\x08\x8c\xeb\x32\xa7\xbb\x00" +
	"\x84\x14\xe8\x8e\x50\x4a\xcd\x0d\x97\x22\x80\x84\x3f\x23\x73\x3b\xff\x9c\x73\xc1\xf0\x39\x80\x6b\xb7\x3d\xc7\xc4" +
	"\x04\x0b\xb7\xcd\xc8\x72\xd8\xd4\xac\xcf\xf5\x62\xf1\xce\x6d\xcf\x90\xa7\x99\x39\xd2\x21\xb7\xa8\x92\x5c\x3e\x05" +
	"\xfd\x25\x6c\x99\xa0\xf1\x26\x55\xb2\x12\x6c\x1e\xcb\x5c\xaa\x00\x54\xba\x9e\x2c\x66\x8b\xd9\x62\x7a\x81\x25\x6d" +
	"\x4c\x67\x0b\xef\xff\xd3\x2f\xd2\x17\x4b\x61\x50\x98\x59\xd7\x90\x70\xc1\x75\x86\xec\x72\x4a\xc7\x01\xbc\x4d\xd0" +
	"\xfe\xbb\x66\x7b\xb9\x5e\x7f\xf3\x0e\xc6\xf3\xfd\x07\xa2\x38\x50\x0f\xcb\x3e\xc3\x47\x66\x8b\x4a\x49\x35\x98\xd9" +
	"\x21\xe6\xc5\x62\xb1\x38\xea\xee\x71\xb1\xa5\x76\xe0\x97\xf3\x13\x1f\x82\x34\xbf\xbd\x8c\x84\x71\xd2\x35\x22\x26" +
	"\x87\xc4\x19\xf6\xb7\xab\xd4\xb3\x00\x08\x13\xa9\x8a\x95\x2d\x04\x36\xf1\x4a\x2a\x56\x77\x05\xe5\x79\x10\xfa\xf5" +
	"\x0b\x84\x5c\x94\x95\xe9\xa3\xa0\xed\x27\x60\x76\x25\x46\xc4\xe0\xb3\x21\x20\x68\x81\x11\x69\x3b\xb6\x34\xaf\x30" +
	"\x22\xc4\x77\x50\x6f\xa5\x48\xb8\x2a\xce\xe1\xda\x18\xad\xdd\x49\xfc\x83\x41\x6f\x9c\x3e\x9d\x63\xe0\x98\x8a\x18" +
	"\xbb\x88\xd7\x95\x31\x52\x74\xee\xb7\x6d\xa7\xbf\x1a\x3b\xa6\xf2\x84\xd3\x43\x53\xe4\xc0\x19\x3a\xf4\x1b\x2a\x7b" +
	"\x2d\x03\xfe\x6b\xdd\x90\x95\x53\xec\xac\x9f\xfb\x3a\x70\xda\x67\x92\xbb\x6a\x96\xc4\x63\x56\xf3\x9a\xb0\x55\xcb" +
	"\x72\xdf\xa3\x99\xc2\x51\x1f\xab\x0b\x2e\x2a\x24\x76\x95\xea\xa7\xd0\x6f\xcc\x4f\x47\xe9\x14\x6c\xb7\x7a\xc7\x8a" +
	"\x97\xe6\x60\xba\xa5\x0a\xda\x0a\x1e\x01\x93\x71\x55\xa0\x30\x5e\x8a\xe6\x2e\x47\xfb\xf8\xdd\xee\x03\x9b\xec\xf7" +
	"\x8d\xa9\xe3\xd6\x54\xe5\xb3\x5e\xad\xf0\x5d\xdf\x5a\x2d\x17\xf8\x36\xaa\x75\x7d\x5b\x8d\x5d\xea\xdd\x69\x72\x80" +
	"\x52\x4b\xeb\x02\x90\x56\xa0\xae\x77\x2a\x2f\xf0\x4c\xe5\x70\xd6\x75\x69\xba\x20\xee\x5a\x8a\xa3\x59\xdb\xf2\x70" +
	"\x49\xc0\x6d\x21\x71\xfd\xbb\x9a\x7f\x1e\xa0\x13\xf5\x71\x84\xdf\xac\x8a\xbf\x02\xa6\x51\xfd\x78\x36\x5f\x03\xd1" +
	"\x25\xc1\xf4\x50\xb1\x15\x6a\xb4\x20\x49\x25\x62\xbb\xdd\x4f\xa6\x4e\xed\xae\x65\xe7\xd5\x25\xd9\x6b\x77\xb6\x88" +
	"\xd8\x9d\x8d\xf4\xb7\x95\x96\xac\xb3\x76\xb5\x94\xbc\x7d\x55\x1b\x20\x58\x79\x1d\xed\xdb\xc7\x7f\x14\xfe\x88\x5d" +
	"\x4d\xad\xc7\x85\x40\xf5\xe3\xe3\xcf\x1f\xc7\x23\x9d\x0b\xb4\xb7\xa1\x35\xba\xf5\xa4\x88\xeb\xc3\x5e\xd4\xf0\x75" +
	"\xe5\x80\x0d\x3b\xbb\xde\x86\xff\x5e\xff\xd7\x90\xbc\xce\x65\xbc\xb9\x84\xe5\xb1\x61\x43\x73\x22\xe3\x4a\x4f\xdc" +
	"\x43\x4d\xf7\x9c\xca\xf3\x61\xf1\x04\x26\xbd\x15\x83\x28\x02\x42\xa6\x83\xad\xbd\x31\x88\x73\xaa\xf5\x47\xae\x8d" +
	"\x47\x19\x9b\x90\xf6\x14\x40\x06\x07\xb0\x3a\x23\xfb\x0b\x53\xe6\x48\x35\x82\xae\xca\x32\xdf\x01\x15\x0d\x5a\x7f" +
	"\x4d\x5f\x01\x73\x8d\xa3\x50\xde\x44\xae\x62\xce\x45\xa5\xb0\x90\x5b\x3c\x19\xd8\x1e\xeb\x6f\x4e\xa3\x1e\x4d\x03" +
	"\x93\x20\xa4\x81\x82\x9a\x38\x3b\x32\x87\x7f\x39\xc2\x33\x0e\xa3\x20\xc9\xcd\xd5\x10\xf1\xa2\x9c\x3d\x9d\x7f\x63" +
	"\xe1\x5d\x94\x5d\xf0\xa5\x54\xbd\x97\xda\x70\x91\x7a\x9e\x47\xdc\x70\x13\x34\x71\x36\x21\x99\x31\xa5\x0e\x7c\xbf" +
	"\x40\xa3\xb8\x91\xc2\x63\xd4\xd0\x27\xae\xd0\xe3\xd2\x6f\x37\xd8\xd9\x80\x6a\x80\x02\x4d\x26\x59\x00\xe4\xfe\xd3" +
	"\xc3\x23\x99\x0d\x7a\xed\xbd\x0f\x95\x0e\x86\x5e\x00\xa4\x25\x69\x6e\x8f\x48\x24\x00\x42\xcb\x32\xe7\x31\xb5\xc9" +
	"\xe2\xff\xae\xa5\xb8\xe9\x2e\xb3\x9f\x1f\x7f\x98\x2f\xc9\x00\xe1\x75\x38\x94\xbd\x59\x06\xf0\xd3\xc3\xa7\x5f\x3c" +
	"\x6d\x14\x17\x29\x4f\x76\x93\xf1\xb8\xb5\x38\x82\x7e\xb9\x1c\x02\x75\x8a\x08\xdc\x44\x18\x06\x30\xbd\xfa\xc2\x2b" +
	"\x80\x67\x32\x14\x13\xcb\x61\xb4\x7a\x51\x68\x2a\x25\xc0\xbe\x79\x76\x72\x93\xe9\x09\x7b\x85\x3a\x5a\x8d\xa3\x8e" +
	"\xa5\xd0\x32\x47\x2f\x97\xa9\x35\x19\x08\x12\x4e\xa8\xe3\x98\x8a\xa0\xad\x3e\x64\xcb\x19\x01\x2e\x6c\x61\x1d\xa6" +
	"\x78\xf3\x77\x52\x48\xb7\x52\xa4\x8a\x9a\x2a\xaf\x17\x4b\xcf\xa0\xad\x35\xb9\x94\x9b\xe6\x8e\xde\x56\x1b\x7b\x77" +
	"\x27\xf0\xdf\x3e\xd9\xa3\x71\x8e\x66\xf0\x99\x00\x1e\xa4\x52\xbb\x19\x98\xfa\xfb\xc0\x13\xd5\x40\xa1\x54\x72\x9d" +
	"\x63\x61\x7f\x63\xd4\x9a\x8b\x14\x76\xb2\x52\xa0\xf0\x8f\x0a\xb5\xf1\xe0\xbe\x89\xd1\xd2\x44\x63\x53\xd7\x45\xa9" +
	"\xcc\xb7\x3d\x8d\x03\x15\x6c\x5f\x2f\x4d\xc6\x75\x10\xae\xd5\xca\x86\xbf\x36\x92\x4e\x06\xc2\xb2\xac\x0d\x57\xf0" +
	"\x70\xd3\x3a\x2d\x8a\xd8\x56\xb0\x49\x5d\x41\xa2\x55\x7f\x55\xeb\x26\x07\xf2\xf5\xd8\x05\xae\x77\x3a\xee\x9d\x9b" +
	"\xeb\x6f\x29\x0f\xa6\x5a\xd7\xf4\xd7\x1f\x74\xe0\xf3\x07\x0f\x1e\x33\xae\xa1\xb0\x17\xff\xba\x7c\xa2\x60\x50\x95" +
	"\xfb\xcf\x3a\x68\x49\x2a\xaa\x38\x83\x42\x2a\x04\x93\x51\x01\x39\x17\x1b\x0d\x5c\x18\x69\xd9\xb5\xc7\x1f\x6d\x21" +
	"\x5b\x97\x4d\xb5\xc6\x58\x8a\xfe\xf7\x96\xee\x31\xf4\x9b\x4f\x3b\xa1\xdf\x7c\xad\xfa\x2b\x00\x00\xff\xff\xeb\xc9" +
	"\xf0\xe6\xbe\x12\x00\x00")

func bindataAdminIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAdminIndexhtml,
		"admin/index.html",
	)
}



func bindataAdminIndexhtml() (*asset, error) {
	bytes, err := bindataAdminIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "admin/index.html",
		size: 4798,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAeshostjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5b\x6f\xe3\x36\x16\x7e\x96\x7e\xc5\xa9\x5e\x62\xa3\x8e\x94\x16" +
	"\xe8\x8b\x6f\xc0\xa0\x9b\xdd\x16\xc8\xa0\x81\x33\xb3\xdb\x05\x16\x68\x69\xe9\xd8\x62\x4b\x91\x32\x79\xe8\x8c\x91" +
	"\xfa\xbf\x2f\x48\x4a\x96\x7c\x9b\xa4\x8b\x59\xec\xc3\x02\x01\x22\x92\x87\xdf\xf9\xce\x85\x1f\x69\x5e\xd5\x4a\x13" +
	"\xfc\xdd\x22\xac\xb4\xaa\xe0\xa6\x24\xaa\xcd\x38\xcb\xf2\x42\xa6\xbf\x99\x02\x05\xdf\xea\x54\x22\x65\xb2\xae\xb2" +
	"\xad\xc5\xac\xe0\x86\xdc\x47\x8a\xa6\x4a\x97\x5a\x3d\x1b\xd4\xe9\x6f\xe6\x66\x12\xc7\xf8\xc9\x83\x15\xb8\x62\x56" +
	"\x78\xd0\x14\x3f\x11\xca\x62\xf0\x12\x47\x84\x55\x2d\x18\xe1\x18\x7e\x9d\x16\x7c\x3b\x8f\xa7\x2b\xa5\x2b\xd8\xde" +
	"\x2a\x39\x36\x76\x59\x71\x4a\x6b\x8d\x5b\x94\x34\x4b\x94\x7c\xf2\x33\xc9\x3c\x8e\xa2\xe9\x8a\xa3\x28\x0c\x92\x1b" +
	"\x44\x53\x81\x6b\x94\xc5\xfc\x47\xc9\x89\x33\x01\x1f\x1e\x9e\xc0\x20\xd9\x7a\x9a\x35\x2b\xc1\x8a\x2d\x51\xf8\xcf" +
	"\x68\x6a\x6a\x26\xe7\x3f\x28\x43\x92\x55\x08\xa4\x40\xe3\xc6\xa2\x21\x60\x90\xa3\x26\xbe\xe2\x39\x23\x84\x95\xd2" +
	"\xe3\x69\xe6\x8d\xc3\x3e\xcf\x32\xf2\x9f\x5c\xd6\x96\x80\x76\x35\xce\x12\xc2\x4f\x94\x80\xc3\x9a\x25\x65\x83\x9a" +
	"\xc0\xf6\xb6\x52\x05\x8a\xf1\x96\x09\xdb\x5f\x08\x00\x91\x0f\xd3\xa3\xb8\xe8\x5a\x32\xdf\x97\x4c\xae\x31\x81\xac" +
	"\xf5\x53\xc3\xf6\x96\xaf\x66\xc9\x57\xe5\x91\x45\x91\xcc\xff\x81\xc0\x2c\xa9\xdb\x15\x17\x02\x0b\xa0\x92\x9b\x50" +
	"\x31\x2a\x11\x3e\x2e\x1e\x1a\x3f\x3b\x65\xc1\x1a\x67\xa0\x80\xe5\x39\x1a\x13\x4c\x9f\x71\x09\x35\x5b\x63\x0a\xf0" +
	"\x57\x44\x01\x2b\x8d\x3e\x15\xb9\xc7\x07\x4e\x23\xa0\x52\xd9\x75\x99\x4e\xb3\xba\x89\x3f\x6b\x13\x30\xcd\xba\x74" +
	"\x9e\x67\xf6\xdd\xf7\xef\xef\xa1\xd6\x6a\xcb\x0b\x3c\xc9\x60\x3f\x6d\x56\x8b\x36\x6b\xad\xf1\x59\xd6\x0e\x0b\xf1" +
	"\x85\xa4\x3d\x36\x8b\xc7\x49\xbb\xca\xad\xef\x3b\x2f\x31\xff\x7d\xa9\x3e\xb5\x04\x48\x99\x5f\xd8\x5a\xe3\x79\xdd" +
	"\x48\x99\x77\xed\xc2\x92\xcb\x62\x5c\x70\xc3\x96\x02\x0b\xbf\xb4\xc0\x0d\xfc\xf1\x07\x90\x32\x2d\x19\xf8\x6a\x36" +
	"\x3b\x04\xdf\xac\xdd\x6b\x37\x0d\xd2\x0a\x71\x28\xad\x6b\xa6\xa6\xb6\x01\x27\x39\x94\x7c\xfe\xa0\x58\xc1\xe5\x1a" +
	"\x4c\xcd\xa5\x44\x0d\x6b\x85\x06\x4a\xd4\x78\xa1\x14\x2d\x10\x0a\x83\x2d\xda\xbd\xd6\x3d\xb4\xe9\x66\xfe\xf2\x72" +
	"\x44\x71\xbf\x9f\x66\x9b\x39\x14\x0e\x56\x2a\x02\x56\xd7\xc8\x74\x38\x08\x2b\xf4\x1f\x5b\x26\x78\x01\xc7\x95\x84" +
	"\x03\x92\x0b\x28\x80\xa4\x30\x5d\x5a\x22\x25\xc3\xb9\xcd\x05\xcf\x7f\xbf\x50\x9b\xf9\x02\x49\xef\xa6\x59\xb0\x9d" +
	"\xbf\x12\x47\xc7\xfd\x47\x28\xd9\x16\xc1\x97\xc6\xb7\xb0\xfb\x2b\x11\x3e\xa0\xae\x0c\xa8\x15\x3c\xa1\xde\xf2\x1c" +
	"\x81\x11\x4c\x59\x5b\xa2\x52\x63\x48\xc4\xc7\xc5\x43\xd2\x50\xfe\xb8\x78\xf0\x94\xd9\xfc\xcf\x37\xf4\x7d\xc5\xb8" +
	"\xb8\xde\xc8\xe8\x96\xdb\x4e\x6a\x06\x27\x5d\x14\x66\xcf\x9b\xd8\xd6\x05\x23\xfc\xe7\xbb\xf7\x0f\x17\xda\x77\x9a" +
	"\x75\x42\xe7\x86\xb5\x46\x17\xcc\x8e\x55\xc2\x87\xe2\xc6\xf1\x09\x97\x20\x9c\x09\x34\x7e\xdf\xd5\xb5\xd8\x05\xe8" +
	"\x69\xe6\xe4\xd5\x7d\xb8\xa0\x5f\x5e\x40\x59\x72\xfb\x1c\x52\x90\x5f\xff\xef\xd7\x51\x1c\x15\x8c\xd8\x18\x56\x56" +
	"\xe6\xc4\x95\x1c\x0c\xe1\x25\x8e\x22\x8d\x64\xb5\xf4\x9f\x51\x2b\x46\x63\x78\xe6\xb2\x50\xcf\xa9\x50\x39\x73\xb6" +
	"\x69\xbb\x32\x72\x66\x5d\xe7\x24\xed\x2d\xc2\xf2\x0a\x6f\x0d\xb1\x35\x97\xeb\xdb\xed\xdd\xb7\x29\xab\x79\x2a\x90" +
	"\x0c\xca\x5c\xef\x6a\x4a\x95\x5e\x67\x05\xd7\x98\x93\xd2\xbb\x64\x04\x59\x76\xb2\xf9\x0d\x9b\x9c\xef\xf6\xdc\x8e" +
	"\x61\xc5\x84\x09\x7c\x7c\x15\xc6\x90\x24\xa3\xb8\x1f\x45\x23\xa9\x07\xcb\x66\xfb\x02\x37\x63\x7f\x66\x5b\xbc\x7b" +
	"\xad\x8f\x27\x1e\xbb\xf8\x0e\x4e\x3f\x2e\x1e\x5a\x23\x37\xe3\x8a\x75\x0c\xe4\x66\x3a\x0e\xa1\x08\x07\x00\xc1\x0c" +
	"\xfd\x74\x34\xb5\x9f\xc4\xd1\x7e\x14\x47\xb9\xaa\x6a\x4b\x8e\xe5\x8b\x1b\x2e\x71\xa5\x34\xbe\x57\x56\xd2\x59\xa5" +
	"\x9c\xbe\xa7\xa7\x47\x70\xe0\x08\x0c\x1b\xb0\x0a\xa9\x54\x85\x19\x7b\xf3\xd3\xdb\xa7\x87\xe7\x6f\xdf\x00\x1a\x50" +
	"\x4f\x52\x06\x33\x20\x6d\x71\x72\x58\xef\xfa\x79\xe0\x7c\x79\x67\xd1\x29\x95\x2b\x0e\x04\x12\x58\x2d\x60\x06\x12" +
	"\x9f\xdd\x0d\x36\xb8\x21\x65\x6e\xad\x16\x37\xa3\xd3\x3e\xf3\xe0\x91\xd5\x22\x35\xc8\x74\x5e\x3e\x32\xcd\x2a\x93" +
	"\x1a\xa4\xc1\x4d\xce\x9a\x3d\x9e\x51\xdb\x83\xc3\x49\xdc\x3a\x39\xa8\xf3\xec\xd8\x64\xe2\x9a\x2d\x67\x35\x59\xed" +
	"\x2f\x7f\xaf\x34\xb9\x50\xc6\x6a\x34\xb0\x44\xa1\x9e\x0f\x18\x1a\x37\x0d\xd1\x9f\xdf\x3f\xfc\x40\x54\x2f\xc2\x13" +
	"\x22\x84\x1d\x69\xdc\xa4\xaa\x46\x39\x48\xfe\x76\xff\x21\x19\xb9\xb8\x52\x52\x4f\xa4\xb9\x5c\x0f\x86\x3d\x1b\x29" +
	"\x14\x73\x69\x1c\x0c\x61\x36\x0f\x79\x88\xf8\x0a\x06\x6e\xd1\x10\x23\x6b\x60\x36\x83\x6f\xef\xee\x9a\x24\x35\x79" +
	"\x6e\x04\x6d\xe6\x78\xa4\x1a\x4d\xad\xa4\x09\x65\xe8\x0c\x9c\x48\x87\x4b\x27\x2c\xec\xc1\x69\xeb\x65\x98\xce\xea" +
	"\x64\xfb\x39\xfe\x3e\xee\x5b\x3d\x76\xb9\x3c\xa4\xf1\xc8\x60\x11\x12\xd5\xe2\xef\x7b\xa1\xa3\xd6\x4a\x9f\xc4\x7e" +
	"\x8d\xd6\x31\xab\xe4\xe7\x4a\xf4\x92\x0e\x1e\x29\x99\x7c\x01\x66\x2e\xf7\x7d\x83\xe6\xda\x1e\x9e\xd0\x5b\xe0\x26" +
	"\x65\x4b\xa5\xdb\x7a\xef\xe3\x33\x60\x8d\x9b\x49\x7f\xd6\xab\x11\xcc\x82\xc8\x1c\xb2\x60\xdc\x63\x78\xf8\xca\x01" +
	"\x2a\x99\x2c\x04\xb6\xba\x70\x38\x3c\x86\x74\xc3\xcb\xb1\x36\xe4\x1f\x19\x1e\xa5\x93\x91\x23\xe2\x8d\xe2\x7f\x1d" +
	"\x1a\xf7\x2f\x8c\xb0\x71\x7d\xba\x6c\x48\x5f\x9c\x4f\xfe\x25\xfb\x59\xee\xdc\x40\xb7\x67\xdf\xb2\xd6\xb8\xd2\x68" +
	"\xca\x27\xdf\xc5\x67\x22\x75\xe9\xb8\x87\x86\xff\x73\xa7\xbd\x55\xa4\xf6\xbc\xb7\xe3\xde\x79\xff\x1f\x9f\xd5\x7e" +
	"\xf5\x06\xfd\xf3\x34\xec\x1d\xa8\xfd\x89\x1b\x94\xa7\x9e\xb2\x0c\x34\xe6\x56\x1b\x1c\xf9\x77\xba\x92\xc4\xa5\x65" +
	"\x42\xec\xa0\xc9\xb4\xd7\xab\xa6\x58\x81\x4f\x9a\xa6\x7e\xaf\x41\xfa\xc0\x2b\x54\x96\x06\x7d\xc8\xc0\xef\xa8\x4e" +
	"\x6d\x43\xec\x47\xf0\xcd\xdd\xdd\x5d\xf6\xdd\xd0\xab\x62\x9a\xa6\xb0\xb4\x04\x82\x57\x9c\xc2\x4b\xec\x3b\x5d\x9b" +
	"\x63\xe6\x5d\x2f\x37\xb2\x1f\x7e\xb3\xbd\x5d\xee\xdd\xd5\xf8\xc5\xaa\x7f\x75\x8f\x7b\x45\xfc\xc2\x2c\x95\x4a\x73" +
	"\xda\x5d\xb8\x27\x3e\xbf\xd3\x3f\x22\xda\x5d\x7e\xf0\x9f\xb4\xda\xe3\x4f\x4f\x5f\xa4\xd7\xbe\xf9\x4c\xaf\x85\xd7" +
	"\x9f\xfb\x21\xe1\xf4\x24\x4d\xd3\x64\x38\x79\xb5\xee\xe7\x97\xc4\x31\xe6\xbd\x17\x6d\xd6\x47\x1e\x43\xf2\xf5\x5b" +
	"\xfa\xfa\xaa\xde\xbf\xc1\xc3\xb1\xe0\x7b\x93\x26\x9a\xab\xfd\xd7\x49\xe9\x9b\xc4\xe7\xff\xa8\xf9\xfe\x3b\x3a\xe7" +
	"\x7f\x97\xbc\xf2\x62\x68\x9e\xc3\x9f\xb9\x77\x5b\x8b\x4b\x17\x6f\xb3\x76\xe5\xe6\xed\xb0\xdb\xab\xf7\xbc\x29\xf6" +
	"\xa3\x78\x3f\x9c\xc4\xff\x0e\x00\x00\xff\xff\x88\x22\x21\x29\xe5\x12\x00\x00")

func bindataAeshostjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataAeshostjs,
		"aes-host.js",
	)
}



func bindataAeshostjs() (*asset, error) {
	bytes, err := bindataAeshostjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "aes-host.js",
		size: 4837,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x6b\xdc\x30\x10\x7c\x76\x7e\xc5\xd6\x25\x5c\x52\x6a\xfb\x52" +
	"\x52\x08\x3e\x9f\x21\xb4\x81\xbe\xb5\x90\x52\x28\x25\x0f\x6b\x6b\xef\xac\x44\x5f\x48\xeb\xfb\xe8\x91\xff\x5e\x6c" +
	"\xf9\x42\x42\x1b\xa8\x5f\xb4\xde\x9d\x19\xc9\xa3\x71\xf5\xe6\xf3\xd7\x4f\xdf\x7f\x7e\xbb\x81\x8e\xb5\xaa\x4f\xaa" +
	"\x61\x01\x85\x66\xbd\x4c\xc9\xa4\xf5\x49\x52\x75\x84\xa2\x3e\x49\x92\x4a\x13\x23\xb4\x1d\xfa\x40\xbc\x4c\x7b\x5e" +
	"\x65\x57\xe9\x38\x60\xc9\x8a\xea\x6b\xdd\x60\x08\x28\xac\x87\x1b\xb1\x26\xb8\x65\x6c\x1f\x20\x83\x95\xf4\x81\xa1" +
	"\xb1\x96\xab\x22\x22\x07\x4e\xe0\x7d\xac\x92\x95\x24\x25\x02\x31\x3c\x7f\x0e\x20\x64\x70\x0a\xf7\x25\x30\x36\x8a" +
	"\x16\xf0\xf8\x02\x5b\x83\xc2\x86\xd4\x3f\xb1\x99\xb7\xdb\xd7\xf0\x35\xbc\xfb\x1b\xdf\x92\x52\x03\x61\x60\x0c\xe3" +
	"\xc6\xee\xb2\x20\x7f\x4b\xb3\x2e\xa1\xb1\x5e\x90\xcf\x1a\xbb\x7b\x4d\x52\x1a\xd7\xf3\x2f\xde\x3b\x5a\xa6\x4c\x3b" +
	"\x4e\xef\xe0\x00\x5a\x9a\x6c\x2b\x05\x77\x25\x5c\xce\x49\xff\x0f\xb7\xf7\x2a\xbd\x83\x57\xb9\x83\x34\x7a\x42\x38" +
	"\xc0\xca\x1a\xce\x56\xa8\xa5\xda\x97\xa0\xad\xb1\xc1\x61\x7b\xb4\xe8\x2d\x3a\x07\x87\xa1\x4a\x34\xee\x8e\x42\x57" +
	"\xd2\x2c\xa6\x9e\x5f\x4b\x53\x02\xf6\x6c\xc7\xce\x48\x72\x9e\x26\x4e\x83\xed\xc3\xda\xdb\xde\x88\x12\x1a\x85\xed" +
	"\x43\xa4\xb5\x56\x59\x5f\xc2\xb6\x93\x4c\xb1\x33\x09\xb7\xa8\xda\xb3\x8b\xf9\xfc\x14\x32\xb8\x24\x7d\x7e\xfa\x72" +
	"\x9b\x39\x7c\x20\x1d\x5b\x0e\x85\x18\x2d\x9d\xe7\x1f\x8f\xbd\xe8\x6e\x09\xc1\x2a\x29\xe0\xc2\xed\x60\xed\x89\xcc" +
	"\xd3\xc1\xaa\xe2\x98\x93\xaa\x98\x72\x58\x35\x56\xec\xc7\x08\x09\xb9\x01\x29\x96\x29\x3a\x37\xe6\x30\xa9\x90\x42" +
	"\xd6\xd9\xc0\x75\x55\x3c\x95\xa3\x8a\x90\x9b\x98\xba\xd6\x4b\xc7\x10\x0d\xd7\x56\xf4\x8a\x22\x55\x6a\x67\x3d\xc3" +
	"\x8f\x9e\x60\xe5\xad\x86\x59\xc7\xec\x42\x59\x14\xad\x30\xf9\x7d\x10\xa4\xe4\xc6\xe7\x86\xb8\x30\x4e\x17\x9b\x9e" +
	"\x0a\x21\x03\x0f\x45\x4e\x41\xe7\x8d\xb7\xdb\x40\x3e\xbf\x0f\xb3\xc5\x33\xb9\xeb\x9b\xdb\x2f\x36\xf0\x24\x99\x3f" +
	"\x1d\x2a\xe2\x06\xe0\x06\x3d\x6c\x34\x2c\xc1\xd0\x76\xd8\xfd\xec\x30\xd9\xad\x9d\x35\x64\x38\x94\xd3\xbd\x24\xb3" +
	"\x23\x79\x56\x1e\x75\xdf\x8f\x93\xc7\xb8\x90\x2a\x61\x36\x5c\xfe\x6c\x7c\x7f\x3c\x5f\x44\xff\xc6\x2f\x1e\x0d\x8c" +
	"\xc6\x55\x45\xfc\xd3\xff\x04\x00\x00\xff\xff\x6c\x31\x81\x32\xfa\x03\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 1018,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"admin/index.html": bindataAdminIndexhtml,
	"aes-host.js":      bindataAeshostjs,
	"index.html":       bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"admin": {Func: nil, Children: map[string]*bintree{
		"index.html": {Func: bindataAdminIndexhtml, Children: map[string]*bintree{}},
	}},
	"aes-host.js": {Func: bindataAeshostjs, Children: map[string]*bintree{}},
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
