// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata/index.html

package firstboot


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xff\x8a\x39\x15\xd7\x38\x45\x24\x65" +
	"\x17\x57\xe0\xa0\x48\x02\x16\xdb\x6c\xef\x80\x6c\x37\x70\x36\xd7\x2b\x8a\x43\x41\x49\x23\x8b\x17\x8a\x54\xc8\x91" +
	"\x13\xd7\xe7\xff\x5e\x50\x94\x6c\xd9\x4e\xb6\x7b\xe8\x97\x2e\x36\xb1\xc4\x99\x79\x66\xf8\xcc\x0b\xe9\x24\xdf\xfc" +
	"\xe5\xd3\xfb\xcf\xff\xb8\xbd\x86\x9a\x1a\x91\xcd\x12\xfb\x01\x82\xc9\x65\xea\xa3\xf4\xb3\x99\x97\xd4\xc8\xca\x6c" +
	"\xe6\x79\x49\x83\xc4\xa0\xa8\x99\x36\x48\xa9\xdf\x51\x15\x7c\xef\xf7\x02\xe2\x24\x30\x7b\xd7\xe4\xcc\x18\x56\x2a" +
	"\x0d\xd7\xe5\x12\xe1\x8e\x58\xf1\x00\x01\x54\x5c\x1b\x82\x5c\x29\x4a\x22\xa7\x69\x6d\x4c\xa1\x79\x4b\x60\x74\x91" +
	"\xfa\x35\x51\x6b\xe2\x28\x2a\x4a\x19\xfe\x6a\x4a\x14\x7c\xa5\x43\x89\x14\xc9\xb6\x89\x56\x1d\x46\x25\x37\x64\x1f" +
	"\xc2\x5f\x8d\x9f\x25\x91\xb3\x75\x30\xb4\x76\x80\x5e\xc5\x51\x94\x06\x09\xa6\xff\x36\x50\x72\xd3\x0a\xb6\x8e\x81" +
	"\x58\x2e\xf0\x0a\xb6\x07\xba\x19\x08\x96\xa3\x78\x51\x37\xd0\xea\xe9\x35\xfd\x0c\xfe\x74\xaa\x5f\xa0\x10\xd6\xc0" +
	"\x5a\x58\x71\xae\x9e\x03\xc3\xff\xcd\xe5\x32\x86\x5c\xe9\x12\x75\x90\xab\xe7\xd7\x20\xb9\x6c\x3b\xfa\x27\xad\x5b" +
	"\x4c\x7d\xc2\x67\xf2\x7f\x81\x0d\x34\x5c\x06\x4f\xbc\xa4\x3a\x86\xef\x2e\xb1\xf9\x1a\xdb\x4e\x0b\xff\x17\x78\xd5" +
	"\xd6\x42\x33\x8d\x0c\x36\x50\x29\x49\x41\xc5\x1a\x2e\xd6\x31\x34\x4a\x2a\xd3\xb2\x62\xa4\xe8\x0f\xac\x6d\x61\x63" +
	"\x9f\xbc\x86\x3d\x8f\x40\xdf\x73\x79\x35\xac\xe9\x25\x97\x31\xb0\x8e\x54\xbf\xd2\x1b\xb5\x1a\x07\x9b\x9c\x15\x0f" +
	"\x4b\xad\x3a\x59\xc6\x90\x0b\x56\x3c\x38\xb3\x42\x09\xa5\x63\x78\xaa\x39\xa1\x5b\x19\x80\x0b\x26\x8a\xf9\x9b\xcb" +
	"\xcb\x6f\x21\x80\xef\xb0\x39\xff\xf6\xd0\xcd\x25\xbc\xc5\xc6\x2d\xb5\xac\x2c\x7b\x4a\x2f\xc3\x3f\x8f\x6b\x8e\xdd" +
	"\x18\x8c\x12\xbc\x84\x37\xed\x33\x2c\x35\xa2\xdc\x05\x96\x44\x63\x9d\x24\xd1\x50\xce\x49\xae\xca\x75\x5f\x42\x25" +
	"\x5f\x01\x2f\x53\x9f\xb5\x6d\x5f\xce\x5e\x52\x29\xdd\xc0\x2a\x50\x32\x36\x5d\xde\x70\x0a\x5b\x8d\x2b\x94\x94\xfa" +
	"\x4a\xde\xf5\x2b\x4e\xd1\x4b\xc6\x4c\xb8\x57\x2f\x11\xb8\x44\x59\x66\x3f\x4a\x4e\x9c\x09\xf8\x7c\x73\x07\x06\xa9" +
	"\x6b\x93\x68\x90\x8c\x7a\x36\x6d\xc3\x8b\x97\x98\x96\xc9\xec\x07\x65\x48\xb2\x06\x81\x14\x68\x7c\xec\xd0\x10\x30" +
	"\x28\x50\x13\xaf\x78\xc1\x08\xa1\x52\x3a\x4e\xa2\x5e\x79\xb4\x2c\xf9\x6a\x7c\xf6\x92\xbe\x0a\x60\x52\x41\x60\xf1" +
	"\x52\xbf\x1e\x90\x7d\x58\x05\x8d\x2a\x51\xc4\x2b\x26\xba\xa9\x60\x84\xf0\xfa\x4d\xf7\x38\x7b\xe9\xfb\x9a\xc9\x25" +
	"\x96\x29\xe9\x0e\x7d\x88\xf6\xfe\x5a\x58\x05\xbc\x4a\xfd\x6f\x8e\x34\xfd\xec\xef\xd8\x17\x46\x50\x71\x21\xb0\x04" +
	"\xaa\xb9\x81\x4a\xab\x06\xa8\x46\xb8\x5f\xdc\xec\xfc\xad\x55\x07\x9d\xb1\x2a\x0a\x58\x51\xa0\x31\x4e\xf9\x09\x73" +
	"\x68\xd9\x12\x43\x80\x0f\x88\x02\x2a\x8d\x3d\x31\x45\xef\x01\x38\x5d\x00\xd5\xaa\x5b\xd6\x61\x12\xb5\x3b\x36\xa2" +
	"\x3d\x1d\x49\x34\xa5\xf8\x25\xbe\xdf\xbd\xff\x78\x0d\xad\x56\x2b\x6e\x4b\xe7\x88\xd7\x29\x95\xb6\xa1\x06\x26\x47" +
	"\xf5\x13\x26\x77\x82\xd9\x0b\x44\x2a\x79\x3b\x88\x1d\x41\x7b\x12\xbf\x18\xe5\x34\x86\xa2\xc6\xe2\x21\x57\xcf\x63" +
	"\x20\xa4\xcc\xbf\x98\xad\xf1\x93\x48\x48\x99\x77\xa3\x20\xe7\xb2\x8c\x4b\x6e\xec\x74\x2a\x7b\xd1\x02\x1f\xe1\xb7" +
	"\xdf\x80\x94\x19\x43\x82\x6f\xd2\x74\x47\xc3\x20\xbb\xd6\x76\x19\x64\x27\xc4\x24\xe1\x7d\xa3\xb8\x8c\x3b\x24\x7f" +
	"\x52\x0a\xd9\x8d\x62\xb6\x2d\xc1\xb4\x5c\x4a\xd4\xb0\x54\x68\xa0\x46\x8d\xaf\x24\x68\x84\x43\x61\x70\xc4\xbc\xd6" +
	"\xfa\x00\x33\x79\xcc\x36\x9b\x83\x60\xb7\xdb\x24\x7a\xcc\xa0\xb4\xe0\x52\x11\xb0\xb6\x45\xa6\x5d\xcb\x54\xd8\x3f" +
	"\xac\x98\x9d\x01\x87\xd9\x85\x1d\x92\xdd\x9a\x03\x09\x21\xc9\x3b\x22\x25\x5d\xa7\x17\x82\x17\x0f\x2f\xe4\x2a\x5b" +
	"\x20\xe9\x75\x12\x39\xdd\xec\x2b\x76\x33\xdd\xc1\x8f\x50\xb3\x15\x42\x9f\xaa\xbe\xc8\xed\xff\x1a\xe1\x33\xea\xc6" +
	"\x80\xaa\xe0\x0e\xf5\x8a\x17\x08\x8c\x20\x61\x63\xca\x6a\x8d\x8e\x90\xfb\xc5\x8d\x3f\x04\x7e\xbf\xb8\xe9\x03\x67" +
	"\xd9\x2b\x25\x9f\x44\xfb\x61\xe4\x16\x5a\x8d\xd9\xec\xa1\xcb\xb1\x20\x61\x99\x12\x6b\xf8\xa3\xa0\x2b\xfb\x73\x76" +
	"\xfd\xe9\xc3\xd9\x2c\x08\x82\x19\x6b\xf9\x4f\xa8\x0d\x57\x32\x86\x25\x12\xdb\x1d\xe2\x21\x57\xd1\xea\xcd\xec\xc1" +
	"\x06\x04\x76\x38\xcd\xec\xf9\x5f\x32\x62\xf1\x0c\xfa\x32\x8c\x61\xb3\x81\xb1\xf7\x61\xbb\x9d\x99\x16\x0b\x2b\x1c" +
	"\xd7\x4e\x14\x00\x0c\x0a\x2c\x48\x69\xab\xf6\x45\x45\x56\x34\x78\xbb\xcb\xdf\x66\xb3\xaf\xd1\x5e\x4c\xc2\xdc\x61" +
	"\xa1\x91\xfe\xf6\x92\xf9\xf5\xa7\x0f\x49\xd4\x6f\xff\xa4\x93\xdc\x44\xf7\x61\x68\x97\x77\x96\x96\xb1\xc8\x93\xc8" +
	"\x4e\x7e\xf7\x68\x79\xdd\x6c\x40\x75\x64\x6d\x2d\xf3\x03\xd3\xfb\x87\xfd\x35\xc4\x5b\x31\x6d\x19\x86\x14\x24\x3e" +
	"\xc1\x4f\x1d\xce\xdd\x31\x88\x22\x86\x33\x7b\x94\x9e\x5d\xf4\xef\x3d\x7d\xc3\x11\xe9\xed\x77\xff\xc4\x65\xa9\x9e" +
	"\x42\xa1\x0a\x46\x5c\xc9\x70\x94\x38\x23\x6f\x5f\xc7\xbb\xab\x92\xa5\x27\x30\xc4\x96\x5c\x2e\x83\xd5\xe5\xdb\x90" +
	"\xb5\x3c\x14\x48\x06\x65\xa1\xd7\x2d\x85\x4a\x2f\xa3\x92\xeb\x9e\xec\xb5\x7f\x01\x51\x74\x64\xfc\x15\x46\xce\xfb" +
	"\x38\x51\x62\xa8\x98\x30\x78\x31\x3b\x8c\x7e\x18\xfa\x47\x52\x37\x21\xe2\x7e\x86\xec\x71\xae\xb5\x3e\x5e\xda\xe7" +
	"\xd8\x9f\x38\xbc\x5f\xdc\x8c\x8a\x6e\xcd\xe5\x61\xa2\xd4\xff\xde\x5e\x0c\xb7\x8a\xa6\xed\xc8\xc6\xb0\x19\x56\x72" +
	"\xac\x94\xc6\x8f\xaa\x93\x14\x43\xd5\xc9\xc2\xd2\x3a\x3f\x1f\x99\xb7\x67\x4c\x78\xdc\xea\x73\xeb\xef\xfc\x6a\x0a" +
	"\xdc\x20\xd5\xaa\x34\xbb\x8c\x1d\x9b\x4c\xb0\xfb\x0b\xc2\xce\x81\x27\x90\xa0\xd3\x62\x28\x88\xfb\xc5\xcd\xfc\x8c" +
	"\x94\x09\x3a\x2d\xce\x2e\x8e\xd3\x3d\xf8\xf4\xbc\x4e\x8b\xd0\x20\xd3\x45\x7d\xcb\x34\x6b\x4c\x68\x90\xe6\x67\x05" +
	"\x1b\xcc\xfa\xa8\xc7\x5a\x38\xbf\x9a\x4d\x5c\xed\x9a\x23\x3d\xd4\xba\xb2\x79\x2f\x58\x4b\x9d\xee\xef\x0f\xfd\xf0" +
	"\x29\x84\x32\x9d\x46\x03\x39\x0a\xf5\x34\x85\xd1\xf8\x38\x44\xfc\xf3\xc7\x9b\x1f\x88\xda\x85\xbb\x88\xcc\x77\x21" +
	"\x6a\x7c\x0c\x55\x8b\x72\xee\xff\xf5\xfa\xb3\x7f\x61\xf7\x18\x92\xba\x23\xcd\xe5\x72\x7e\x7e\xa8\x26\x85\x62\x25" +
	"\xa4\x30\x3f\x87\x34\xdb\x31\xe3\xf1\x0a\xe6\x56\x6e\x88\x51\x67\x20\x4d\xe1\xed\xe5\xe5\x9e\xb9\x21\x3b\xc3\xc8" +
	"\x4b\x6d\x4c\xa1\x46\xd3\x2a\x69\xf0\xea\x44\xc7\xce\x73\x77\x52\xed\x64\x5b\xb0\x53\xf8\x55\xbc\x03\xdd\x23\x9c" +
	"\x17\x7d\x6d\x67\x47\xba\xb7\x7b\xb2\x77\x3c\x1f\xeb\x2c\x1c\x93\x13\x5f\xdb\x43\x6e\x50\x6b\xa5\x4f\xc9\xf9\x42" +
	"\xac\x87\xa1\xfa\x3f\x37\x62\x92\x21\xe8\xf1\xfc\x13\xe5\xff\x31\x56\x9b\xab\xa9\xda\x70\x2b\x38\x3f\x0d\x78\x81" +
	"\x8f\x21\xcb\x95\x9e\xd4\xca\x48\xdc\xa1\x1f\x8d\x8f\x57\x47\x82\x7e\xbc\x40\xea\x26\xc8\x94\x26\x83\xb2\xdc\xe1" +
	"\x0d\x3d\xe9\x8d\x77\xf0\xdf\xd5\x7c\xae\xd8\x7e\x77\xef\xd9\x21\x37\x76\xde\x38\xf0\x0e\x3b\xef\xff\xa8\x65\x86" +
	"\xb3\xea\xbf\x94\xf1\xf6\xd4\x21\xca\x17\x7c\x0e\x33\xd2\x71\x3d\x9d\x8d\x47\x10\x2f\xe5\xc8\x7d\x6c\xfb\xd5\xc9" +
	"\xd7\xf5\x24\x72\x5f\xba\x92\xc8\xfd\xb1\xe1\x3f\x01\x00\x00\xff\xff\x01\x29\x83\xfe\x7d\x10\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 4221,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"index.html": bindataIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
