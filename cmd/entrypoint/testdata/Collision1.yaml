---
apiVersion: emissary-ingress.dev/v4alpha1
kind: Host
metadata:
  name: staging.upchieve.org
  namespace: default
spec:
  acmeProvider:
    authority: none
    email: rhs@datawire.io
  hostname: staging.upchieve.org
  requestPolicy:
    insecure:
      action: Route
# ---
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: staging
---
apiVersion: emissary-ingress.dev/v4alpha1
kind: KubernetesEndpointResolver
metadata:
  labels:
    app.kubernetes.io/managed-by: pulumi
  name: endpoint
  namespace: ambassador
---
apiVersion: emissary-ingress.dev/v4alpha1
kind: Mapping
metadata:
  name: subway-staging-socket-stable-mapping
  namespace: staging
spec:
  allowUpgrade:
  - websocket
  host: staging.upchieve.org
  loadBalancer:
    policy: ring_hash
    sourceIP: true
  prefix: /
  queryParameters:
    transport: "true"
  resolver: endpoint
  service: subway-staging-stable.staging:3001
  timeoutMS: 500000
---
apiVersion: emissary-ingress.dev/v4alpha1
kind: Mapping
metadata:
  name: subway-staging-whiteboard-reset-stable-mapping
  namespace: staging
spec:
  host: staging.upchieve.org
  loadBalancer:
    policy: ring_hash
    sourceIP: true
  prefix: /whiteboard/reset/
  resolver: endpoint
  rewrite: /whiteboard/reset/
  service: subway-staging-stable.staging:3000
  timeoutMS: 500000
---
apiVersion: emissary-ingress.dev/v4alpha1
kind: Mapping
metadata:
  name: subway-staging-whiteboard-stable-mapping
  namespace: staging
spec:
  allowUpgrade:
  - websocket
  host: staging.upchieve.org
  loadBalancer:
    policy: ring_hash
    sourceIP: true
  prefix: /whiteboard/
  resolver: endpoint
  rewrite: /whiteboard/
  service: subway-staging-stable.staging:3000
  timeoutMS: 500000
---
apiVersion: v1
kind: Service
metadata:
  name: subway-staging-stable
  namespace: staging
spec:
  selector:
    app: echo
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  sessionAffinity: ClientIP
  type: ClusterIP
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: echo
#   namespace: staging
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: echo
#   template:
#     metadata:
#       labels:
#         app: echo
#     spec:
#       containers:
#       - name: churn
#         # image: {{image "echo/Dockerfile"}}
#         image: churn:0.0.1
#         command: ["echo-server"]
#         ports:
#         - containerPort: 3000
