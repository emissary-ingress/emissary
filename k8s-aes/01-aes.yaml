# @TEMPLATE@

######################################################################
# 'ambassador' namespace.
---
apiVersion: v1
kind: Namespace
metadata:
  name: ambassador
  labels:
    product: aes

######################################################################
# RBAC
# NB: ClusterRoles and ClusterRoleBindings are not namespaced
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador
  labels:
    product: aes
rules:
# Regular Ambassador access requirements
- apiGroups: [""]
  resources: [ "endpoints", "namespaces", "services" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "getambassador.io" ]
  resources: [ "*" ]
  verbs: ["get", "list", "watch", "update", "create" ]
- apiGroups: [ "apiextensions.k8s.io" ]
  resources: [ "customresourcedefinitions" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "networking.internal.knative.dev" ]
  resources: [ "clusteringresses", "ingresses" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "networking.internal.knative.dev" ]
  resources: [ "ingresses/status", "clusteringresses/status" ]
  verbs: ["update"]
- apiGroups: [ "extensions" ]
  resources: [ "ingresses" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "extensions" ]
  resources: [ "ingresses/status" ]
  verbs: ["update"]
# Ambassador Pro access requirements.  Also gets "create" for secrets.
- apiGroups: [""]
  resources: [ "secrets" ]
  verbs: ["get", "list", "watch", "create", "update"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    product: aes
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador
  labels:
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador
subjects:
- kind: ServiceAccount
  name: ambassador
  namespace: ambassador

######################################################################
# Redis
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-redis
  namespace: ambassador
  labels:
    product: aes
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    service: ambassador-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-redis
  namespace: ambassador
  labels:
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador-redis
  template:
    metadata:
      labels:
        service: ambassador-redis
        product: aes
    spec:
      containers:
      - name: redis
        image: redis:5.0.1
      restartPolicy: Always

######################################################################
# Configure Ambassador Edge Stack.
---
apiVersion: getambassador.io/v1
kind: RateLimitService
metadata:
  name: ambassador-edge-stack-ratelimit
  namespace: ambassador
  labels:
    product: aes
spec:
  service: "127.0.0.1:8500"
---
apiVersion: getambassador.io/v1
kind: AuthService
metadata:
  name: ambassador-edge-stack-auth
  namespace: ambassador
  labels:
    product: aes
spec:
  proto: grpc
  status_on_error:
    code: 504
  auth_service: "127.0.0.1:8500"
  allow_request_body: false # setting this to 'true' allows Plugin and External filters to access the body, but has performance overhead
---
apiVersion: getambassador.io/v1
kind: Mapping
metadata:
  name: ambassador-edge-stack
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /.ambassador/
  rewrite: ""
  service: "127.0.0.1:8500"
---
apiVersion: v1
kind: Secret
metadata:
  name: ambassador-edge-stack
  namespace: ambassador
data:
  license-key: "" # This secret is just a placeholder, it is mounted as a volume and refreshed when changed

######################################################################
# Configure DevPortal
---
apiVersion: getambassador.io/v1
kind: Mapping
metadata:
  name: ambassador-devportal
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /documentation/
  rewrite: "/docs/"
  add_response_headers:
    x-test-proto: "%PROTOCOL%"
    x-test-ip: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
    x-test-static: This is apro mapping
  service: "127.0.0.1:8500"
---
apiVersion: getambassador.io/v1
kind: Mapping
metadata:
  name: ambassador-devportal-api
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /openapi/
  rewrite: ""
  add_response_headers:
    x-test-proto: "%PROTOCOL%"
    x-test-ip: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
    x-test-static: This is apro api mapping
  service: "127.0.0.1:8500"
---
apiVersion: getambassador.io/v1beta2
kind: FilterPolicy
metadata:
  name: ambassador-internal-access-control
  namespace: ambassador
  labels:
    product: aes
spec:
  rules:
    - host: "*"
      path: "*/.ambassador-internal/*"
      filters:
        - name: ambassador-internal-access-control
---
apiVersion: getambassador.io/v1beta2
kind: Filter
metadata:
  name: ambassador-internal-access-control
  namespace: ambassador
  labels:
    product: aes
spec:
  Internal: {}
---
# This mapping needs to exist, but is never actually followed.
apiVersion: getambassador.io/v1
kind: Mapping
metadata:
  name: callback-mapping
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /callback
  service: NoTaReAlSeRvIcE

######################################################################
# Create the 'ambassador' and 'ambassador-admin' Services.
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    product: aes
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: https
  selector:
    service: ambassador
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
    product: aes
  name: ambassador-admin
  namespace: ambassador
spec:
  type: ClusterIP
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: admin
  selector:
    service: ambassador

######################################################################
# Create the Deployment backing the 'ambassador' and
# 'ambassador-admin' Services.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ambassador
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        "consul.hashicorp.com/connect-inject": "false"
      labels:
        service: ambassador
        product: aes
    spec:
      serviceAccountName: ambassador
      terminationGracePeriodSeconds: 0
      imagePullSecrets:
      - name: aes-pull-secret
      containers:
      - name: aes
        image: {{env "AES_IMAGE"}}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        - name: admin
          containerPort: 8877
        livenessProbe:
          httpGet:
            path: /ambassador/v0/check_alive
            port: 8877
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /ambassador/v0/check_ready
            port: 8877
          periodSeconds: 3
        env:
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SCOUT_DISABLE
          value: "1"
        - name: APP_LOG_LEVEL
          value: DEBUG
        - name: REDIS_URL
          value: ambassador-redis:6379
        - name: AMBASSADOR_URL
          value: "https://ambassador.default.svc.cluster.local"
        - name: POLL_EVERY_SECS
          value: "60"
        - name: AMBASSADOR_INTERNAL_URL
          value: "https://127.0.0.1:8443"
        - name: AMBASSADOR_ADMIN_URL
          value: "http://127.0.0.1:8877"
        volumeMounts:
        - mountPath: "/.config/ambassador"
          name: ambassador-edge-stack-secrets
          readOnly: true
      restartPolicy: Always
      securityContext:
        runAsUser: 8888
      volumes:
      - name: ambassador-edge-stack-secrets
        secret:
          secretName: ambassador-edge-stack
