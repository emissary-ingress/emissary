#!/bin/bash

set -e

cd "${BASH_SOURCE%/*}/../.."
set -a
source ./k8s-env.sh
set +a

# Launch and check local container

container=intercept-local-$$
docker run --name=$container --rm -d -h container_on_laptop -p 8080 jmalloc/echo-server
local_port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $container)

if ! curl -s "localhost:$local_port" | grep "Request served by" | tee /dev/stderr | grep -q -e 'Request served by container_on_laptop'; then
    echo "curl of the local container failed or yielded the wrong output."
    echo "This script attempted to launch the container but failed somehow."
    exit 1
fi

REMOTE_SVC=echo
NUM_LOOPS=2

# APICTL=./bin_$(go env GOHOSTOS)_$(go env GOHOSTARCH)/apictl
# APICTL_COMMAND="$APICTL traffic intercept -n :path -m /$$ -t localhost:$local_port $REMOTE_SVC"

EDGECTL="go run github.com/datawire/ambassador/cmd/edgectl"
EDGECTL_DAEMON_START="sudo $EDGECTL daemon"
EDGECTL_DAEMON_STOP="$EDGECTL quit"
EDGECTL_CONNECT="$EDGECTL connect"
EDGECTL_DISCONNECT="$EDGECTL disconnect"
EDGECTL INT_LIST="$EDGECTL intercept list"
EDGECTL_INT_ADD="$EDGECTL intercept add -n loop_intercept -m USER=loop_test -t :$local_port $REMOTE_SVC"
EDGECTL INT_REMOVE="$EDGECTL intercept remove loop_intercept"

CURL_COMMAND="curl -s $REMOTE_SVC/$$"

ECHO_ON="set -x"
ECHO_OFF="{ set +x } 2>/dev/null"

do_curl() {
    echo "+ $CURL_COMMAND"
    $CURL_COMMAND | grep 'Request served by'
}

# do_apictl() {
#     echo "+ $APICTL_COMMAND"
#     $APICTL_COMMAND &
# }

test_curl_was_intercepted() {
    do_curl | tee /dev/stderr | grep -q -e 'Request served by container_on_laptop'
}

run_with_echo () {
    var_name="$1"

    eval "set -x; \$$var_name; status=\$?; set +x"

    return $status
}

# Make sure edgectl is okay
$EDGECTL help > /dev/null
echo "+ $EDGECTL version"
$EDGECTL version

# Start daemon and get connected.

if ! run_with_echo EDGECTL_DAEMON_START; then
    echo "Daemon failed" >&2
    exit 1
fi

if ! run_with_echo EDGECTL_CONNECT; then
    echo "Connect failed" >&2
    exit 1
fi

count=$($EDGECTL_INT_LIST | grep -c unavail)

if [ $count -gt 0 ]; then
    echo "Intercept unavailable" >&2
    exit 1
fi

if ! do_curl; then
    echo "curl of the remote service ($REMOTE_SVC) failed."
    echo "Is kubectl configured correctly?"
    echo "  make shell"
    echo "Is telepresence outbound running?"
    echo "  make proxy"
    echo "Is the example application ($REMOTE_SVC) running in the cluster?"
    echo "  make deploy"
    exit 1
fi

# Set up for cleanup

cleanup() {
    kill $pid || true
    docker kill $container || true
}

trap 'cleanup' INT EXIT

# Do the test

for idx in $(seq $NUM_LOOPS); do
    echo
    echo $idx "--------------------------"
    echo "Before intercept"
    if test_curl_was_intercepted; then false; fi
    echo
    do_apictl
    pid=$!
    for trial in {1..3}; do
        sleep $((3 + RANDOM % 4))
        echo "Trial $trial for loop $idx"
        test_curl_was_intercepted
    done
    echo "Success. Killing intercept..."
    kill $pid
    wait
    echo
    echo "After intercept"
    if test_curl_was_intercepted; then false; fi
done

echo "Done."
