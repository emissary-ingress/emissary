---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {self.path.k8s}
{serviceAccountExtra}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: {self.path.k8s}
rules:
# Edge Stack mostly needs the same permissions as Ambassador OSS,
# but it needs extra permissions to write getambassador.io CRs and
# to create and update secrets.
- apiGroups: [""]
  resources: [ "namespaces", "services" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "getambassador.io" ]
  resources: [ "*" ]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete" ]
- apiGroups: [ "apiextensions.k8s.io" ]
  resources: [ "customresourcedefinitions" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "networking.internal.knative.dev" ]
  resources: [ "clusteringresses", "ingresses" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "networking.internal.knative.dev" ]
  resources: [ "ingresses/status", "clusteringresses/status" ]
  verbs: ["update"]
- apiGroups: [ "extensions" ]
  resources: [ "ingresses" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [ "extensions" ]
  resources: [ "ingresses/status" ]
  verbs: ["update"]
- apiGroups: [""]
  resources: [ "secrets" ]
  verbs: ["get", "list", "watch", "create", "update"]
- apiGroups: [""]
  resources: [ "events" ]
  verbs: ["get", "list", "watch", "create"]
- apiGroups: ["coordination.k8s.io"]
  resources: [ "leases" ]
  verbs: ["get", "create", "update"]
- apiGroups: [""]
  resources: [ "endpoints" ]
  verbs: ["get", "list", "watch", "create", "update"]
# extra permissions for kale
- apiGroups: [""]
  resources: [ "services" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: ["apps"]
  resources: [ "deployments" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: ["batch"]
  resources: [ "jobs" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: [""]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [""]
  resources: [ "pods/log" ]
  verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: {self.path.k8s}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {self.path.k8s}
subjects:
- kind: ServiceAccount
  name: {self.path.k8s}
  namespace: {self.namespace}

# FIXME(lukeshu): The following is a hack because of the old non-Watt
# code that obeys AMBASSADOR_SINGLE_NAMESPACE, but implements it by
# filtering client-side and runs afoul of single-namespace RBAC.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: {self.path.k8s}
rules:
# old code
- apiGroups: ["getambassador.io"]
  resources: [ "filters", "filterpolicies", "ratelimits" ]
  verbs: [ "get", "list", "watch" ]
# kale
- apiGroups: ["getambassador.io"]
  resources: [ "projects", "projectcommits", "mappings" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: ["apps"]
  resources: [ "depoyments" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: ["batch"]
  resources: [ "jobs" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [""]
  resources: [ "pods", "events" ]
  verbs: [ "get", "list", "watch" ]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {self.path.k8s}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {self.path.k8s}
subjects:
- kind: ServiceAccount
  name: {self.path.k8s}
  namespace: {self.namespace}
